{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/base64-js/index.js","node_modules/buffer/index.js","node_modules/dayjs/dayjs.min.js","node_modules/ieee754/index.js","node_modules/isarray/index.js","node_modules/jszip/dist/jszip.min.js","node_modules/process/browser.js","node_modules/timers-browserify/main.js","src/HandleZip.ts","src/ToLuckySheet/LuckyBase.ts","src/ToLuckySheet/LuckyCell.ts","src/ToLuckySheet/LuckyFile.ts","src/ToLuckySheet/LuckyImage.ts","src/ToLuckySheet/LuckySheet.ts","src/ToLuckySheet/ReadXml.ts","src/common/constant.ts","src/common/emf.ts","src/common/method.ts","src/main.ts","src/main.umd.ts"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACtvDA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","file":"luckyexcel.umd.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs=e()}(this,(function(){\"use strict\";var t=1e3,e=6e4,n=36e5,r=\"millisecond\",i=\"second\",s=\"minute\",u=\"hour\",a=\"day\",o=\"week\",f=\"month\",h=\"quarter\",c=\"year\",d=\"date\",$=\"Invalid Date\",l=/^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/,y=/\\[([^\\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:\"en\",weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\")},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:\"\"+Array(e+1-r.length).join(n)+t},g={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?\"+\":\"-\")+m(r,2,\"0\")+\":\"+m(i,2,\"0\")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,f),s=n-i<0,u=e.clone().add(r+(s?-1:1),f);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:f,y:c,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:h}[t]||String(t||\"\").toLowerCase().replace(/s$/,\"\")},u:function(t){return void 0===t}},D=\"en\",v={};v[D]=M;var p=function(t){return t instanceof _},S=function(t,e,n){var r;if(!t)return D;if(\"string\"==typeof t)v[t]&&(r=t),e&&(v[t]=e,r=t);else{var i=t.name;v[i]=t,r=i}return!n&&r&&(D=r),r||!n&&D},w=function(t,e){if(p(t))return t.clone();var n=\"object\"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},O=g;O.l=S,O.i=p,O.w=function(t,e){return w(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=S(t.locale,null,!0),this.parse(t)}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(O.u(e))return new Date;if(e instanceof Date)return new Date(e);if(\"string\"==typeof e&&!/Z$/i.test(e)){var r=e.match(l);if(r){var i=r[2]-1||0,s=(r[7]||\"0\").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return O},m.isValid=function(){return!(this.$d.toString()===$)},m.isSame=function(t,e){var n=w(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return w(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<w(t)},m.$g=function(t,e,n){return O.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!O.u(e)||e,h=O.p(t),$=function(t,e){var i=O.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},l=function(t,e){return O.w(n.toDate()[t].apply(n.toDate(\"s\"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,g=\"set\"+(this.$u?\"UTC\":\"\");switch(h){case c:return r?$(1,0):$(31,11);case f:return r?$(1,M):$(0,M+1);case o:var D=this.$locale().weekStart||0,v=(y<D?y+7:y)-D;return $(r?m-v:m+(6-v),M);case a:case d:return l(g+\"Hours\",0);case u:return l(g+\"Minutes\",1);case s:return l(g+\"Seconds\",2);case i:return l(g+\"Milliseconds\",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=O.p(t),h=\"set\"+(this.$u?\"UTC\":\"\"),$=(n={},n[a]=h+\"Date\",n[d]=h+\"Date\",n[f]=h+\"Month\",n[c]=h+\"FullYear\",n[u]=h+\"Hours\",n[s]=h+\"Minutes\",n[i]=h+\"Seconds\",n[r]=h+\"Milliseconds\",n)[o],l=o===a?this.$D+(e-this.$W):e;if(o===f||o===c){var y=this.clone().set(d,1);y.$d[$](l),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else $&&this.$d[$](l);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[O.p(t)]()},m.add=function(r,h){var d,$=this;r=Number(r);var l=O.p(h),y=function(t){var e=w($);return O.w(e.date(e.date()+Math.round(t*r)),$)};if(l===f)return this.set(f,this.$M+r);if(l===c)return this.set(c,this.$y+r);if(l===a)return y(1);if(l===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[l]||1,m=this.$d.getTime()+r*M;return O.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||$;var r=t||\"YYYY-MM-DDTHH:mm:ssZ\",i=O.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,f=n.months,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].substr(0,s)},c=function(t){return O.s(s%12||12,t,\"0\")},d=n.meridiem||function(t,e,n){var r=t<12?\"AM\":\"PM\";return n?r.toLowerCase():r},l={YY:String(this.$y).slice(-2),YYYY:this.$y,M:a+1,MM:O.s(a+1,2,\"0\"),MMM:h(n.monthsShort,a,f,3),MMMM:h(f,a),D:this.$D,DD:O.s(this.$D,2,\"0\"),d:String(this.$W),dd:h(n.weekdaysMin,this.$W,o,2),ddd:h(n.weekdaysShort,this.$W,o,3),dddd:o[this.$W],H:String(s),HH:O.s(s,2,\"0\"),h:c(1),hh:c(2),a:d(s,u,!0),A:d(s,u,!1),m:String(u),mm:O.s(u,2,\"0\"),s:String(this.$s),ss:O.s(this.$s,2,\"0\"),SSS:O.s(this.$ms,3,\"0\"),Z:i};return r.replace(y,(function(t,e){return e||l[t]||i.replace(\":\",\"\")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,$){var l,y=O.p(d),M=w(r),m=(M.utcOffset()-this.utcOffset())*e,g=this-M,D=O.m(this,M);return D=(l={},l[c]=D/12,l[f]=D,l[h]=D/3,l[o]=(g-m)/6048e5,l[a]=(g-m)/864e5,l[u]=g/n,l[s]=g/e,l[i]=g/t,l)[y]||g,$?D:O.a(D)},m.daysInMonth=function(){return this.endOf(f).$D},m.$locale=function(){return v[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=S(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return O.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),b=_.prototype;return w.prototype=b,[[\"$ms\",r],[\"$s\",i],[\"$m\",s],[\"$H\",u],[\"$W\",a],[\"$M\",f],[\"$y\",c],[\"$D\",d]].forEach((function(t){b[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),w.extend=function(t,e){return t.$i||(t(e,_,w),t.$i=!0),w},w.locale=S,w.isDayjs=p,w.unix=function(t){return w(1e3*t)},w.en=v[D],w.Ls=v,w.p={},w}));","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/*!\n\nJSZip v3.7.1 - A JavaScript class for generating and reading zip files\n<http://stuartk.com/jszip>\n\n(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>\nDual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.\n\nJSZip uses the library pako released under the MIT license :\nhttps://github.com/nodeca/pako/blob/master/LICENSE\n*/\n\n!function(t){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=t();else if(\"function\"==typeof define&&define.amd)define([],t);else{(\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this).JSZip=t()}}(function(){return function s(a,o,h){function u(r,t){if(!o[r]){if(!a[r]){var e=\"function\"==typeof require&&require;if(!t&&e)return e(r,!0);if(l)return l(r,!0);var i=new Error(\"Cannot find module '\"+r+\"'\");throw i.code=\"MODULE_NOT_FOUND\",i}var n=o[r]={exports:{}};a[r][0].call(n.exports,function(t){var e=a[r][1][t];return u(e||t)},n,n.exports,s,a,o,h)}return o[r].exports}for(var l=\"function\"==typeof require&&require,t=0;t<h.length;t++)u(h[t]);return u}({1:[function(t,e,r){\"use strict\";var c=t(\"./utils\"),d=t(\"./support\"),p=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";r.encode=function(t){for(var e,r,i,n,s,a,o,h=[],u=0,l=t.length,f=l,d=\"string\"!==c.getTypeOf(t);u<t.length;)f=l-u,i=d?(e=t[u++],r=u<l?t[u++]:0,u<l?t[u++]:0):(e=t.charCodeAt(u++),r=u<l?t.charCodeAt(u++):0,u<l?t.charCodeAt(u++):0),n=e>>2,s=(3&e)<<4|r>>4,a=1<f?(15&r)<<2|i>>6:64,o=2<f?63&i:64,h.push(p.charAt(n)+p.charAt(s)+p.charAt(a)+p.charAt(o));return h.join(\"\")},r.decode=function(t){var e,r,i,n,s,a,o=0,h=0,u=\"data:\";if(t.substr(0,u.length)===u)throw new Error(\"Invalid base64 input, it looks like a data url.\");var l,f=3*(t=t.replace(/[^A-Za-z0-9\\+\\/\\=]/g,\"\")).length/4;if(t.charAt(t.length-1)===p.charAt(64)&&f--,t.charAt(t.length-2)===p.charAt(64)&&f--,f%1!=0)throw new Error(\"Invalid base64 input, bad content length.\");for(l=d.uint8array?new Uint8Array(0|f):new Array(0|f);o<t.length;)e=p.indexOf(t.charAt(o++))<<2|(n=p.indexOf(t.charAt(o++)))>>4,r=(15&n)<<4|(s=p.indexOf(t.charAt(o++)))>>2,i=(3&s)<<6|(a=p.indexOf(t.charAt(o++))),l[h++]=e,64!==s&&(l[h++]=r),64!==a&&(l[h++]=i);return l}},{\"./support\":30,\"./utils\":32}],2:[function(t,e,r){\"use strict\";var i=t(\"./external\"),n=t(\"./stream/DataWorker\"),s=t(\"./stream/Crc32Probe\"),a=t(\"./stream/DataLengthProbe\");function o(t,e,r,i,n){this.compressedSize=t,this.uncompressedSize=e,this.crc32=r,this.compression=i,this.compressedContent=n}o.prototype={getContentWorker:function(){var t=new n(i.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a(\"data_length\")),e=this;return t.on(\"end\",function(){if(this.streamInfo.data_length!==e.uncompressedSize)throw new Error(\"Bug : uncompressed data size mismatch\")}),t},getCompressedWorker:function(){return new n(i.Promise.resolve(this.compressedContent)).withStreamInfo(\"compressedSize\",this.compressedSize).withStreamInfo(\"uncompressedSize\",this.uncompressedSize).withStreamInfo(\"crc32\",this.crc32).withStreamInfo(\"compression\",this.compression)}},o.createWorkerFrom=function(t,e,r){return t.pipe(new s).pipe(new a(\"uncompressedSize\")).pipe(e.compressWorker(r)).pipe(new a(\"compressedSize\")).withStreamInfo(\"compression\",e)},e.exports=o},{\"./external\":6,\"./stream/Crc32Probe\":25,\"./stream/DataLengthProbe\":26,\"./stream/DataWorker\":27}],3:[function(t,e,r){\"use strict\";var i=t(\"./stream/GenericWorker\");r.STORE={magic:\"\\0\\0\",compressWorker:function(t){return new i(\"STORE compression\")},uncompressWorker:function(){return new i(\"STORE decompression\")}},r.DEFLATE=t(\"./flate\")},{\"./flate\":7,\"./stream/GenericWorker\":28}],4:[function(t,e,r){\"use strict\";var i=t(\"./utils\");var o=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();e.exports=function(t,e){return void 0!==t&&t.length?\"string\"!==i.getTypeOf(t)?function(t,e,r,i){var n=o,s=i+r;t^=-1;for(var a=i;a<s;a++)t=t>>>8^n[255&(t^e[a])];return-1^t}(0|e,t,t.length,0):function(t,e,r,i){var n=o,s=i+r;t^=-1;for(var a=i;a<s;a++)t=t>>>8^n[255&(t^e.charCodeAt(a))];return-1^t}(0|e,t,t.length,0):0}},{\"./utils\":32}],5:[function(t,e,r){\"use strict\";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(t,e,r){\"use strict\";var i=null;i=\"undefined\"!=typeof Promise?Promise:t(\"lie\"),e.exports={Promise:i}},{lie:37}],7:[function(t,e,r){\"use strict\";var i=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Uint32Array,n=t(\"pako\"),s=t(\"./utils\"),a=t(\"./stream/GenericWorker\"),o=i?\"uint8array\":\"array\";function h(t,e){a.call(this,\"FlateWorker/\"+t),this._pako=null,this._pakoAction=t,this._pakoOptions=e,this.meta={}}r.magic=\"\\b\\0\",s.inherits(h,a),h.prototype.processChunk=function(t){this.meta=t.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(o,t.data),!1)},h.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},h.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},h.prototype._createPako=function(){this._pako=new n[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var e=this;this._pako.onData=function(t){e.push({data:t,meta:e.meta})}},r.compressWorker=function(t){return new h(\"Deflate\",t)},r.uncompressWorker=function(){return new h(\"Inflate\",{})}},{\"./stream/GenericWorker\":28,\"./utils\":32,pako:38}],8:[function(t,e,r){\"use strict\";function A(t,e){var r,i=\"\";for(r=0;r<e;r++)i+=String.fromCharCode(255&t),t>>>=8;return i}function i(t,e,r,i,n,s){var a,o,h=t.file,u=t.compression,l=s!==O.utf8encode,f=I.transformTo(\"string\",s(h.name)),d=I.transformTo(\"string\",O.utf8encode(h.name)),c=h.comment,p=I.transformTo(\"string\",s(c)),m=I.transformTo(\"string\",O.utf8encode(c)),_=d.length!==h.name.length,g=m.length!==c.length,b=\"\",v=\"\",y=\"\",w=h.dir,k=h.date,x={crc32:0,compressedSize:0,uncompressedSize:0};e&&!r||(x.crc32=t.crc32,x.compressedSize=t.compressedSize,x.uncompressedSize=t.uncompressedSize);var S=0;e&&(S|=8),l||!_&&!g||(S|=2048);var z=0,C=0;w&&(z|=16),\"UNIX\"===n?(C=798,z|=function(t,e){var r=t;return t||(r=e?16893:33204),(65535&r)<<16}(h.unixPermissions,w)):(C=20,z|=function(t){return 63&(t||0)}(h.dosPermissions)),a=k.getUTCHours(),a<<=6,a|=k.getUTCMinutes(),a<<=5,a|=k.getUTCSeconds()/2,o=k.getUTCFullYear()-1980,o<<=4,o|=k.getUTCMonth()+1,o<<=5,o|=k.getUTCDate(),_&&(v=A(1,1)+A(B(f),4)+d,b+=\"up\"+A(v.length,2)+v),g&&(y=A(1,1)+A(B(p),4)+m,b+=\"uc\"+A(y.length,2)+y);var E=\"\";return E+=\"\\n\\0\",E+=A(S,2),E+=u.magic,E+=A(a,2),E+=A(o,2),E+=A(x.crc32,4),E+=A(x.compressedSize,4),E+=A(x.uncompressedSize,4),E+=A(f.length,2),E+=A(b.length,2),{fileRecord:R.LOCAL_FILE_HEADER+E+f+b,dirRecord:R.CENTRAL_FILE_HEADER+A(C,2)+E+A(p.length,2)+\"\\0\\0\\0\\0\"+A(z,4)+A(i,4)+f+b+p}}var I=t(\"../utils\"),n=t(\"../stream/GenericWorker\"),O=t(\"../utf8\"),B=t(\"../crc32\"),R=t(\"../signature\");function s(t,e,r,i){n.call(this,\"ZipFileWorker\"),this.bytesWritten=0,this.zipComment=e,this.zipPlatform=r,this.encodeFileName=i,this.streamFiles=t,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}I.inherits(s,n),s.prototype.push=function(t){var e=t.meta.percent||0,r=this.entriesCount,i=this._sources.length;this.accumulate?this.contentBuffer.push(t):(this.bytesWritten+=t.data.length,n.prototype.push.call(this,{data:t.data,meta:{currentFile:this.currentFile,percent:r?(e+100*(r-i-1))/r:100}}))},s.prototype.openedSource=function(t){this.currentSourceOffset=this.bytesWritten,this.currentFile=t.file.name;var e=this.streamFiles&&!t.file.dir;if(e){var r=i(t,e,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},s.prototype.closedSource=function(t){this.accumulate=!1;var e=this.streamFiles&&!t.file.dir,r=i(t,e,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),e)this.push({data:function(t){return R.DATA_DESCRIPTOR+A(t.crc32,4)+A(t.compressedSize,4)+A(t.uncompressedSize,4)}(t),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},s.prototype.flush=function(){for(var t=this.bytesWritten,e=0;e<this.dirRecords.length;e++)this.push({data:this.dirRecords[e],meta:{percent:100}});var r=this.bytesWritten-t,i=function(t,e,r,i,n){var s=I.transformTo(\"string\",n(i));return R.CENTRAL_DIRECTORY_END+\"\\0\\0\\0\\0\"+A(t,2)+A(t,2)+A(e,4)+A(r,4)+A(s.length,2)+s}(this.dirRecords.length,r,t,this.zipComment,this.encodeFileName);this.push({data:i,meta:{percent:100}})},s.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},s.prototype.registerPrevious=function(t){this._sources.push(t);var e=this;return t.on(\"data\",function(t){e.processChunk(t)}),t.on(\"end\",function(){e.closedSource(e.previous.streamInfo),e._sources.length?e.prepareNextSource():e.end()}),t.on(\"error\",function(t){e.error(t)}),this},s.prototype.resume=function(){return!!n.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},s.prototype.error=function(t){var e=this._sources;if(!n.prototype.error.call(this,t))return!1;for(var r=0;r<e.length;r++)try{e[r].error(t)}catch(t){}return!0},s.prototype.lock=function(){n.prototype.lock.call(this);for(var t=this._sources,e=0;e<t.length;e++)t[e].lock()},e.exports=s},{\"../crc32\":4,\"../signature\":23,\"../stream/GenericWorker\":28,\"../utf8\":31,\"../utils\":32}],9:[function(t,e,r){\"use strict\";var u=t(\"../compressions\"),i=t(\"./ZipFileWorker\");r.generateWorker=function(t,a,e){var o=new i(a.streamFiles,e,a.platform,a.encodeFileName),h=0;try{t.forEach(function(t,e){h++;var r=function(t,e){var r=t||e,i=u[r];if(!i)throw new Error(r+\" is not a valid compression method !\");return i}(e.options.compression,a.compression),i=e.options.compressionOptions||a.compressionOptions||{},n=e.dir,s=e.date;e._compressWorker(r,i).withStreamInfo(\"file\",{name:t,dir:n,date:s,comment:e.comment||\"\",unixPermissions:e.unixPermissions,dosPermissions:e.dosPermissions}).pipe(o)}),o.entriesCount=h}catch(t){o.error(t)}return o}},{\"../compressions\":3,\"./ZipFileWorker\":8}],10:[function(t,e,r){\"use strict\";function i(){if(!(this instanceof i))return new i;if(arguments.length)throw new Error(\"The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.\");this.files=Object.create(null),this.comment=null,this.root=\"\",this.clone=function(){var t=new i;for(var e in this)\"function\"!=typeof this[e]&&(t[e]=this[e]);return t}}(i.prototype=t(\"./object\")).loadAsync=t(\"./load\"),i.support=t(\"./support\"),i.defaults=t(\"./defaults\"),i.version=\"3.7.1\",i.loadAsync=function(t,e){return(new i).loadAsync(t,e)},i.external=t(\"./external\"),e.exports=i},{\"./defaults\":5,\"./external\":6,\"./load\":11,\"./object\":15,\"./support\":30}],11:[function(t,e,r){\"use strict\";var i=t(\"./utils\"),n=t(\"./external\"),o=t(\"./utf8\"),h=t(\"./zipEntries\"),s=t(\"./stream/Crc32Probe\"),u=t(\"./nodejsUtils\");function l(i){return new n.Promise(function(t,e){var r=i.decompressed.getContentWorker().pipe(new s);r.on(\"error\",function(t){e(t)}).on(\"end\",function(){r.streamInfo.crc32!==i.decompressed.crc32?e(new Error(\"Corrupted zip : CRC32 mismatch\")):t()}).resume()})}e.exports=function(t,s){var a=this;return s=i.extend(s||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:o.utf8decode}),u.isNode&&u.isStream(t)?n.Promise.reject(new Error(\"JSZip can't accept a stream when loading a zip file.\")):i.prepareContent(\"the loaded zip file\",t,!0,s.optimizedBinaryString,s.base64).then(function(t){var e=new h(s);return e.load(t),e}).then(function(t){var e=[n.Promise.resolve(t)],r=t.files;if(s.checkCRC32)for(var i=0;i<r.length;i++)e.push(l(r[i]));return n.Promise.all(e)}).then(function(t){for(var e=t.shift(),r=e.files,i=0;i<r.length;i++){var n=r[i];a.file(n.fileNameStr,n.decompressed,{binary:!0,optimizedBinaryString:!0,date:n.date,dir:n.dir,comment:n.fileCommentStr.length?n.fileCommentStr:null,unixPermissions:n.unixPermissions,dosPermissions:n.dosPermissions,createFolders:s.createFolders})}return e.zipComment.length&&(a.comment=e.zipComment),a})}},{\"./external\":6,\"./nodejsUtils\":14,\"./stream/Crc32Probe\":25,\"./utf8\":31,\"./utils\":32,\"./zipEntries\":33}],12:[function(t,e,r){\"use strict\";var i=t(\"../utils\"),n=t(\"../stream/GenericWorker\");function s(t,e){n.call(this,\"Nodejs stream input adapter for \"+t),this._upstreamEnded=!1,this._bindStream(e)}i.inherits(s,n),s.prototype._bindStream=function(t){var e=this;(this._stream=t).pause(),t.on(\"data\",function(t){e.push({data:t,meta:{percent:0}})}).on(\"error\",function(t){e.isPaused?this.generatedError=t:e.error(t)}).on(\"end\",function(){e.isPaused?e._upstreamEnded=!0:e.end()})},s.prototype.pause=function(){return!!n.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return!!n.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},e.exports=s},{\"../stream/GenericWorker\":28,\"../utils\":32}],13:[function(t,e,r){\"use strict\";var n=t(\"readable-stream\").Readable;function i(t,e,r){n.call(this,e),this._helper=t;var i=this;t.on(\"data\",function(t,e){i.push(t)||i._helper.pause(),r&&r(e)}).on(\"error\",function(t){i.emit(\"error\",t)}).on(\"end\",function(){i.push(null)})}t(\"../utils\").inherits(i,n),i.prototype._read=function(){this._helper.resume()},e.exports=i},{\"../utils\":32,\"readable-stream\":16}],14:[function(t,e,r){\"use strict\";e.exports={isNode:\"undefined\"!=typeof Buffer,newBufferFrom:function(t,e){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(t,e);if(\"number\"==typeof t)throw new Error('The \"data\" argument must not be a number');return new Buffer(t,e)},allocBuffer:function(t){if(Buffer.alloc)return Buffer.alloc(t);var e=new Buffer(t);return e.fill(0),e},isBuffer:function(t){return Buffer.isBuffer(t)},isStream:function(t){return t&&\"function\"==typeof t.on&&\"function\"==typeof t.pause&&\"function\"==typeof t.resume}}},{}],15:[function(t,e,r){\"use strict\";function s(t,e,r){var i,n=u.getTypeOf(e),s=u.extend(r||{},f);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),\"string\"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(t=g(t)),s.createFolders&&(i=_(t))&&b.call(this,i,!0);var a=\"string\"===n&&!1===s.binary&&!1===s.base64;r&&void 0!==r.binary||(s.binary=!a),(e instanceof d&&0===e.uncompressedSize||s.dir||!e||0===e.length)&&(s.base64=!1,s.binary=!0,e=\"\",s.compression=\"STORE\",n=\"string\");var o=null;o=e instanceof d||e instanceof l?e:p.isNode&&p.isStream(e)?new m(t,e):u.prepareContent(t,e,s.binary,s.optimizedBinaryString,s.base64);var h=new c(t,o,s);this.files[t]=h}var n=t(\"./utf8\"),u=t(\"./utils\"),l=t(\"./stream/GenericWorker\"),a=t(\"./stream/StreamHelper\"),f=t(\"./defaults\"),d=t(\"./compressedObject\"),c=t(\"./zipObject\"),o=t(\"./generate\"),p=t(\"./nodejsUtils\"),m=t(\"./nodejs/NodejsStreamInputAdapter\"),_=function(t){\"/\"===t.slice(-1)&&(t=t.substring(0,t.length-1));var e=t.lastIndexOf(\"/\");return 0<e?t.substring(0,e):\"\"},g=function(t){return\"/\"!==t.slice(-1)&&(t+=\"/\"),t},b=function(t,e){return e=void 0!==e?e:f.createFolders,t=g(t),this.files[t]||s.call(this,t,null,{dir:!0,createFolders:e}),this.files[t]};function h(t){return\"[object RegExp]\"===Object.prototype.toString.call(t)}var i={load:function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},forEach:function(t){var e,r,i;for(e in this.files)i=this.files[e],(r=e.slice(this.root.length,e.length))&&e.slice(0,this.root.length)===this.root&&t(r,i)},filter:function(r){var i=[];return this.forEach(function(t,e){r(t,e)&&i.push(e)}),i},file:function(t,e,r){if(1!==arguments.length)return t=this.root+t,s.call(this,t,e,r),this;if(h(t)){var i=t;return this.filter(function(t,e){return!e.dir&&i.test(t)})}var n=this.files[this.root+t];return n&&!n.dir?n:null},folder:function(r){if(!r)return this;if(h(r))return this.filter(function(t,e){return e.dir&&r.test(t)});var t=this.root+r,e=b.call(this,t),i=this.clone();return i.root=e.name,i},remove:function(r){r=this.root+r;var t=this.files[r];if(t||(\"/\"!==r.slice(-1)&&(r+=\"/\"),t=this.files[r]),t&&!t.dir)delete this.files[r];else for(var e=this.filter(function(t,e){return e.name.slice(0,r.length)===r}),i=0;i<e.length;i++)delete this.files[e[i].name];return this},generate:function(t){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},generateInternalStream:function(t){var e,r={};try{if((r=u.extend(t||{},{streamFiles:!1,compression:\"STORE\",compressionOptions:null,type:\"\",platform:\"DOS\",comment:null,mimeType:\"application/zip\",encodeFileName:n.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),\"binarystring\"===r.type&&(r.type=\"string\"),!r.type)throw new Error(\"No output type specified.\");u.checkSupport(r.type),\"darwin\"!==r.platform&&\"freebsd\"!==r.platform&&\"linux\"!==r.platform&&\"sunos\"!==r.platform||(r.platform=\"UNIX\"),\"win32\"===r.platform&&(r.platform=\"DOS\");var i=r.comment||this.comment||\"\";e=o.generateWorker(this,r,i)}catch(t){(e=new l(\"error\")).error(t)}return new a(e,r.type||\"string\",r.mimeType)},generateAsync:function(t,e){return this.generateInternalStream(t).accumulate(e)},generateNodeStream:function(t,e){return(t=t||{}).type||(t.type=\"nodebuffer\"),this.generateInternalStream(t).toNodejsStream(e)}};e.exports=i},{\"./compressedObject\":2,\"./defaults\":5,\"./generate\":9,\"./nodejs/NodejsStreamInputAdapter\":12,\"./nodejsUtils\":14,\"./stream/GenericWorker\":28,\"./stream/StreamHelper\":29,\"./utf8\":31,\"./utils\":32,\"./zipObject\":35}],16:[function(t,e,r){e.exports=t(\"stream\")},{stream:void 0}],17:[function(t,e,r){\"use strict\";var i=t(\"./DataReader\");function n(t){i.call(this,t);for(var e=0;e<this.data.length;e++)t[e]=255&t[e]}t(\"../utils\").inherits(n,i),n.prototype.byteAt=function(t){return this.data[this.zero+t]},n.prototype.lastIndexOfSignature=function(t){for(var e=t.charCodeAt(0),r=t.charCodeAt(1),i=t.charCodeAt(2),n=t.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===e&&this.data[s+1]===r&&this.data[s+2]===i&&this.data[s+3]===n)return s-this.zero;return-1},n.prototype.readAndCheckSignature=function(t){var e=t.charCodeAt(0),r=t.charCodeAt(1),i=t.charCodeAt(2),n=t.charCodeAt(3),s=this.readData(4);return e===s[0]&&r===s[1]&&i===s[2]&&n===s[3]},n.prototype.readData=function(t){if(this.checkOffset(t),0===t)return[];var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n},{\"../utils\":32,\"./DataReader\":18}],18:[function(t,e,r){\"use strict\";var i=t(\"../utils\");function n(t){this.data=t,this.length=t.length,this.index=0,this.zero=0}n.prototype={checkOffset:function(t){this.checkIndex(this.index+t)},checkIndex:function(t){if(this.length<this.zero+t||t<0)throw new Error(\"End of data reached (data length = \"+this.length+\", asked index = \"+t+\"). Corrupted zip ?\")},setIndex:function(t){this.checkIndex(t),this.index=t},skip:function(t){this.setIndex(this.index+t)},byteAt:function(t){},readInt:function(t){var e,r=0;for(this.checkOffset(t),e=this.index+t-1;e>=this.index;e--)r=(r<<8)+this.byteAt(e);return this.index+=t,r},readString:function(t){return i.transformTo(\"string\",this.readData(t))},readData:function(t){},lastIndexOfSignature:function(t){},readAndCheckSignature:function(t){},readDate:function(){var t=this.readInt(4);return new Date(Date.UTC(1980+(t>>25&127),(t>>21&15)-1,t>>16&31,t>>11&31,t>>5&63,(31&t)<<1))}},e.exports=n},{\"../utils\":32}],19:[function(t,e,r){\"use strict\";var i=t(\"./Uint8ArrayReader\");function n(t){i.call(this,t)}t(\"../utils\").inherits(n,i),n.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n},{\"../utils\":32,\"./Uint8ArrayReader\":21}],20:[function(t,e,r){\"use strict\";var i=t(\"./DataReader\");function n(t){i.call(this,t)}t(\"../utils\").inherits(n,i),n.prototype.byteAt=function(t){return this.data.charCodeAt(this.zero+t)},n.prototype.lastIndexOfSignature=function(t){return this.data.lastIndexOf(t)-this.zero},n.prototype.readAndCheckSignature=function(t){return t===this.readData(4)},n.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n},{\"../utils\":32,\"./DataReader\":18}],21:[function(t,e,r){\"use strict\";var i=t(\"./ArrayReader\");function n(t){i.call(this,t)}t(\"../utils\").inherits(n,i),n.prototype.readData=function(t){if(this.checkOffset(t),0===t)return new Uint8Array(0);var e=this.data.subarray(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n},{\"../utils\":32,\"./ArrayReader\":17}],22:[function(t,e,r){\"use strict\";var i=t(\"../utils\"),n=t(\"../support\"),s=t(\"./ArrayReader\"),a=t(\"./StringReader\"),o=t(\"./NodeBufferReader\"),h=t(\"./Uint8ArrayReader\");e.exports=function(t){var e=i.getTypeOf(t);return i.checkSupport(e),\"string\"!==e||n.uint8array?\"nodebuffer\"===e?new o(t):n.uint8array?new h(i.transformTo(\"uint8array\",t)):new s(i.transformTo(\"array\",t)):new a(t)}},{\"../support\":30,\"../utils\":32,\"./ArrayReader\":17,\"./NodeBufferReader\":19,\"./StringReader\":20,\"./Uint8ArrayReader\":21}],23:[function(t,e,r){\"use strict\";r.LOCAL_FILE_HEADER=\"PK\u0003\u0004\",r.CENTRAL_FILE_HEADER=\"PK\u0001\u0002\",r.CENTRAL_DIRECTORY_END=\"PK\u0005\u0006\",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR=\"PK\u0006\u0007\",r.ZIP64_CENTRAL_DIRECTORY_END=\"PK\u0006\u0006\",r.DATA_DESCRIPTOR=\"PK\u0007\\b\"},{}],24:[function(t,e,r){\"use strict\";var i=t(\"./GenericWorker\"),n=t(\"../utils\");function s(t){i.call(this,\"ConvertWorker to \"+t),this.destType=t}n.inherits(s,i),s.prototype.processChunk=function(t){this.push({data:n.transformTo(this.destType,t.data),meta:t.meta})},e.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],25:[function(t,e,r){\"use strict\";var i=t(\"./GenericWorker\"),n=t(\"../crc32\");function s(){i.call(this,\"Crc32Probe\"),this.withStreamInfo(\"crc32\",0)}t(\"../utils\").inherits(s,i),s.prototype.processChunk=function(t){this.streamInfo.crc32=n(t.data,this.streamInfo.crc32||0),this.push(t)},e.exports=s},{\"../crc32\":4,\"../utils\":32,\"./GenericWorker\":28}],26:[function(t,e,r){\"use strict\";var i=t(\"../utils\"),n=t(\"./GenericWorker\");function s(t){n.call(this,\"DataLengthProbe for \"+t),this.propName=t,this.withStreamInfo(t,0)}i.inherits(s,n),s.prototype.processChunk=function(t){if(t){var e=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=e+t.data.length}n.prototype.processChunk.call(this,t)},e.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],27:[function(t,e,r){\"use strict\";var i=t(\"../utils\"),n=t(\"./GenericWorker\");function s(t){n.call(this,\"DataWorker\");var e=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type=\"\",this._tickScheduled=!1,t.then(function(t){e.dataIsReady=!0,e.data=t,e.max=t&&t.length||0,e.type=i.getTypeOf(t),e.isPaused||e._tickAndRepeat()},function(t){e.error(t)})}i.inherits(s,n),s.prototype.cleanUp=function(){n.prototype.cleanUp.call(this),this.data=null},s.prototype.resume=function(){return!!n.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,i.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(i.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var t=null,e=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case\"string\":t=this.data.substring(this.index,e);break;case\"uint8array\":t=this.data.subarray(this.index,e);break;case\"array\":case\"nodebuffer\":t=this.data.slice(this.index,e)}return this.index=e,this.push({data:t,meta:{percent:this.max?this.index/this.max*100:0}})},e.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],28:[function(t,e,r){\"use strict\";function i(t){this.name=t||\"default\",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}i.prototype={push:function(t){this.emit(\"data\",t)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit(\"end\"),this.cleanUp(),this.isFinished=!0}catch(t){this.emit(\"error\",t)}return!0},error:function(t){return!this.isFinished&&(this.isPaused?this.generatedError=t:(this.isFinished=!0,this.emit(\"error\",t),this.previous&&this.previous.error(t),this.cleanUp()),!0)},on:function(t,e){return this._listeners[t].push(e),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(t,e){if(this._listeners[t])for(var r=0;r<this._listeners[t].length;r++)this._listeners[t][r].call(this,e)},pipe:function(t){return t.registerPrevious(this)},registerPrevious:function(t){if(this.isLocked)throw new Error(\"The stream '\"+this+\"' has already been used.\");this.streamInfo=t.streamInfo,this.mergeStreamInfo(),this.previous=t;var e=this;return t.on(\"data\",function(t){e.processChunk(t)}),t.on(\"end\",function(){e.end()}),t.on(\"error\",function(t){e.error(t)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var t=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),t=!0),this.previous&&this.previous.resume(),!t},flush:function(){},processChunk:function(t){this.push(t)},withStreamInfo:function(t,e){return this.extraStreamInfo[t]=e,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var t in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(t)&&(this.streamInfo[t]=this.extraStreamInfo[t])},lock:function(){if(this.isLocked)throw new Error(\"The stream '\"+this+\"' has already been used.\");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var t=\"Worker \"+this.name;return this.previous?this.previous+\" -> \"+t:t}},e.exports=i},{}],29:[function(t,e,r){\"use strict\";var h=t(\"../utils\"),n=t(\"./ConvertWorker\"),s=t(\"./GenericWorker\"),u=t(\"../base64\"),i=t(\"../support\"),a=t(\"../external\"),o=null;if(i.nodestream)try{o=t(\"../nodejs/NodejsStreamOutputAdapter\")}catch(t){}function l(t,o){return new a.Promise(function(e,r){var i=[],n=t._internalType,s=t._outputType,a=t._mimeType;t.on(\"data\",function(t,e){i.push(t),o&&o(e)}).on(\"error\",function(t){i=[],r(t)}).on(\"end\",function(){try{var t=function(t,e,r){switch(t){case\"blob\":return h.newBlob(h.transformTo(\"arraybuffer\",e),r);case\"base64\":return u.encode(e);default:return h.transformTo(t,e)}}(s,function(t,e){var r,i=0,n=null,s=0;for(r=0;r<e.length;r++)s+=e[r].length;switch(t){case\"string\":return e.join(\"\");case\"array\":return Array.prototype.concat.apply([],e);case\"uint8array\":for(n=new Uint8Array(s),r=0;r<e.length;r++)n.set(e[r],i),i+=e[r].length;return n;case\"nodebuffer\":return Buffer.concat(e);default:throw new Error(\"concat : unsupported type '\"+t+\"'\")}}(n,i),a);e(t)}catch(t){r(t)}i=[]}).resume()})}function f(t,e,r){var i=e;switch(e){case\"blob\":case\"arraybuffer\":i=\"uint8array\";break;case\"base64\":i=\"string\"}try{this._internalType=i,this._outputType=e,this._mimeType=r,h.checkSupport(i),this._worker=t.pipe(new n(i)),t.lock()}catch(t){this._worker=new s(\"error\"),this._worker.error(t)}}f.prototype={accumulate:function(t){return l(this,t)},on:function(t,e){var r=this;return\"data\"===t?this._worker.on(t,function(t){e.call(r,t.data,t.meta)}):this._worker.on(t,function(){h.delay(e,arguments,r)}),this},resume:function(){return h.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(t){if(h.checkSupport(\"nodestream\"),\"nodebuffer\"!==this._outputType)throw new Error(this._outputType+\" is not supported by this method\");return new o(this,{objectMode:\"nodebuffer\"!==this._outputType},t)}},e.exports=f},{\"../base64\":1,\"../external\":6,\"../nodejs/NodejsStreamOutputAdapter\":13,\"../support\":30,\"../utils\":32,\"./ConvertWorker\":24,\"./GenericWorker\":28}],30:[function(t,e,r){\"use strict\";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer=\"undefined\"!=typeof ArrayBuffer&&\"undefined\"!=typeof Uint8Array,r.nodebuffer=\"undefined\"!=typeof Buffer,r.uint8array=\"undefined\"!=typeof Uint8Array,\"undefined\"==typeof ArrayBuffer)r.blob=!1;else{var i=new ArrayBuffer(0);try{r.blob=0===new Blob([i],{type:\"application/zip\"}).size}catch(t){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);n.append(i),r.blob=0===n.getBlob(\"application/zip\").size}catch(t){r.blob=!1}}}try{r.nodestream=!!t(\"readable-stream\").Readable}catch(t){r.nodestream=!1}},{\"readable-stream\":16}],31:[function(t,e,s){\"use strict\";for(var o=t(\"./utils\"),h=t(\"./support\"),r=t(\"./nodejsUtils\"),i=t(\"./stream/GenericWorker\"),u=new Array(256),n=0;n<256;n++)u[n]=252<=n?6:248<=n?5:240<=n?4:224<=n?3:192<=n?2:1;u[254]=u[254]=1;function a(){i.call(this,\"utf-8 decode\"),this.leftOver=null}function l(){i.call(this,\"utf-8 encode\")}s.utf8encode=function(t){return h.nodebuffer?r.newBufferFrom(t,\"utf-8\"):function(t){var e,r,i,n,s,a=t.length,o=0;for(n=0;n<a;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),o+=r<128?1:r<2048?2:r<65536?3:4;for(e=h.uint8array?new Uint8Array(o):new Array(o),n=s=0;s<o;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),r<128?e[s++]=r:(r<2048?e[s++]=192|r>>>6:(r<65536?e[s++]=224|r>>>12:(e[s++]=240|r>>>18,e[s++]=128|r>>>12&63),e[s++]=128|r>>>6&63),e[s++]=128|63&r);return e}(t)},s.utf8decode=function(t){return h.nodebuffer?o.transformTo(\"nodebuffer\",t).toString(\"utf-8\"):function(t){var e,r,i,n,s=t.length,a=new Array(2*s);for(e=r=0;e<s;)if((i=t[e++])<128)a[r++]=i;else if(4<(n=u[i]))a[r++]=65533,e+=n-1;else{for(i&=2===n?31:3===n?15:7;1<n&&e<s;)i=i<<6|63&t[e++],n--;1<n?a[r++]=65533:i<65536?a[r++]=i:(i-=65536,a[r++]=55296|i>>10&1023,a[r++]=56320|1023&i)}return a.length!==r&&(a.subarray?a=a.subarray(0,r):a.length=r),o.applyFromCharCode(a)}(t=o.transformTo(h.uint8array?\"uint8array\":\"array\",t))},o.inherits(a,i),a.prototype.processChunk=function(t){var e=o.transformTo(h.uint8array?\"uint8array\":\"array\",t.data);if(this.leftOver&&this.leftOver.length){if(h.uint8array){var r=e;(e=new Uint8Array(r.length+this.leftOver.length)).set(this.leftOver,0),e.set(r,this.leftOver.length)}else e=this.leftOver.concat(e);this.leftOver=null}var i=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;0<=r&&128==(192&t[r]);)r--;return r<0?e:0===r?e:r+u[t[r]]>e?r:e}(e),n=e;i!==e.length&&(h.uint8array?(n=e.subarray(0,i),this.leftOver=e.subarray(i,e.length)):(n=e.slice(0,i),this.leftOver=e.slice(i,e.length))),this.push({data:s.utf8decode(n),meta:t.meta})},a.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:s.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},s.Utf8DecodeWorker=a,o.inherits(l,i),l.prototype.processChunk=function(t){this.push({data:s.utf8encode(t.data),meta:t.meta})},s.Utf8EncodeWorker=l},{\"./nodejsUtils\":14,\"./stream/GenericWorker\":28,\"./support\":30,\"./utils\":32}],32:[function(t,e,a){\"use strict\";var o=t(\"./support\"),h=t(\"./base64\"),r=t(\"./nodejsUtils\"),i=t(\"set-immediate-shim\"),u=t(\"./external\");function n(t){return t}function l(t,e){for(var r=0;r<t.length;++r)e[r]=255&t.charCodeAt(r);return e}a.newBlob=function(e,r){a.checkSupport(\"blob\");try{return new Blob([e],{type:r})}catch(t){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return i.append(e),i.getBlob(r)}catch(t){throw new Error(\"Bug : can't construct the Blob.\")}}};var s={stringifyByChunk:function(t,e,r){var i=[],n=0,s=t.length;if(s<=r)return String.fromCharCode.apply(null,t);for(;n<s;)\"array\"===e||\"nodebuffer\"===e?i.push(String.fromCharCode.apply(null,t.slice(n,Math.min(n+r,s)))):i.push(String.fromCharCode.apply(null,t.subarray(n,Math.min(n+r,s)))),n+=r;return i.join(\"\")},stringifyByChar:function(t){for(var e=\"\",r=0;r<t.length;r++)e+=String.fromCharCode(t[r]);return e},applyCanBeUsed:{uint8array:function(){try{return o.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(t){return!1}}(),nodebuffer:function(){try{return o.nodebuffer&&1===String.fromCharCode.apply(null,r.allocBuffer(1)).length}catch(t){return!1}}()}};function f(t){var e=65536,r=a.getTypeOf(t),i=!0;if(\"uint8array\"===r?i=s.applyCanBeUsed.uint8array:\"nodebuffer\"===r&&(i=s.applyCanBeUsed.nodebuffer),i)for(;1<e;)try{return s.stringifyByChunk(t,r,e)}catch(t){e=Math.floor(e/2)}return s.stringifyByChar(t)}function d(t,e){for(var r=0;r<t.length;r++)e[r]=t[r];return e}a.applyFromCharCode=f;var c={};c.string={string:n,array:function(t){return l(t,new Array(t.length))},arraybuffer:function(t){return c.string.uint8array(t).buffer},uint8array:function(t){return l(t,new Uint8Array(t.length))},nodebuffer:function(t){return l(t,r.allocBuffer(t.length))}},c.array={string:f,array:n,arraybuffer:function(t){return new Uint8Array(t).buffer},uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return r.newBufferFrom(t)}},c.arraybuffer={string:function(t){return f(new Uint8Array(t))},array:function(t){return d(new Uint8Array(t),new Array(t.byteLength))},arraybuffer:n,uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return r.newBufferFrom(new Uint8Array(t))}},c.uint8array={string:f,array:function(t){return d(t,new Array(t.length))},arraybuffer:function(t){return t.buffer},uint8array:n,nodebuffer:function(t){return r.newBufferFrom(t)}},c.nodebuffer={string:f,array:function(t){return d(t,new Array(t.length))},arraybuffer:function(t){return c.nodebuffer.uint8array(t).buffer},uint8array:function(t){return d(t,new Uint8Array(t.length))},nodebuffer:n},a.transformTo=function(t,e){if(e=e||\"\",!t)return e;a.checkSupport(t);var r=a.getTypeOf(e);return c[r][t](e)},a.getTypeOf=function(t){return\"string\"==typeof t?\"string\":\"[object Array]\"===Object.prototype.toString.call(t)?\"array\":o.nodebuffer&&r.isBuffer(t)?\"nodebuffer\":o.uint8array&&t instanceof Uint8Array?\"uint8array\":o.arraybuffer&&t instanceof ArrayBuffer?\"arraybuffer\":void 0},a.checkSupport=function(t){if(!o[t.toLowerCase()])throw new Error(t+\" is not supported by this platform\")},a.MAX_VALUE_16BITS=65535,a.MAX_VALUE_32BITS=-1,a.pretty=function(t){var e,r,i=\"\";for(r=0;r<(t||\"\").length;r++)i+=\"\\\\x\"+((e=t.charCodeAt(r))<16?\"0\":\"\")+e.toString(16).toUpperCase();return i},a.delay=function(t,e,r){i(function(){t.apply(r||null,e||[])})},a.inherits=function(t,e){function r(){}r.prototype=e.prototype,t.prototype=new r},a.extend=function(){var t,e,r={};for(t=0;t<arguments.length;t++)for(e in arguments[t])arguments[t].hasOwnProperty(e)&&void 0===r[e]&&(r[e]=arguments[t][e]);return r},a.prepareContent=function(r,t,i,n,s){return u.Promise.resolve(t).then(function(i){return o.blob&&(i instanceof Blob||-1!==[\"[object File]\",\"[object Blob]\"].indexOf(Object.prototype.toString.call(i)))&&\"undefined\"!=typeof FileReader?new u.Promise(function(e,r){var t=new FileReader;t.onload=function(t){e(t.target.result)},t.onerror=function(t){r(t.target.error)},t.readAsArrayBuffer(i)}):i}).then(function(t){var e=a.getTypeOf(t);return e?(\"arraybuffer\"===e?t=a.transformTo(\"uint8array\",t):\"string\"===e&&(s?t=h.decode(t):i&&!0!==n&&(t=function(t){return l(t,o.uint8array?new Uint8Array(t.length):new Array(t.length))}(t))),t):u.Promise.reject(new Error(\"Can't read the data of '\"+r+\"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?\"))})}},{\"./base64\":1,\"./external\":6,\"./nodejsUtils\":14,\"./support\":30,\"set-immediate-shim\":54}],33:[function(t,e,r){\"use strict\";var i=t(\"./reader/readerFor\"),n=t(\"./utils\"),s=t(\"./signature\"),a=t(\"./zipEntry\"),o=(t(\"./utf8\"),t(\"./support\"));function h(t){this.files=[],this.loadOptions=t}h.prototype={checkSignature:function(t){if(!this.reader.readAndCheckSignature(t)){this.reader.index-=4;var e=this.reader.readString(4);throw new Error(\"Corrupted zip or bug: unexpected signature (\"+n.pretty(e)+\", expected \"+n.pretty(t)+\")\")}},isSignature:function(t,e){var r=this.reader.index;this.reader.setIndex(t);var i=this.reader.readString(4)===e;return this.reader.setIndex(r),i},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var t=this.reader.readData(this.zipCommentLength),e=o.uint8array?\"uint8array\":\"array\",r=n.transformTo(e,t);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var t,e,r,i=this.zip64EndOfCentralSize-44;0<i;)t=this.reader.readInt(2),e=this.reader.readInt(4),r=this.reader.readData(e),this.zip64ExtensibleData[t]={id:t,length:e,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error(\"Multi-volumes zip are not supported\")},readLocalFiles:function(){var t,e;for(t=0;t<this.files.length;t++)e=this.files[t],this.reader.setIndex(e.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),e.readLocalPart(this.reader),e.handleUTF8(),e.processAttributes()},readCentralDir:function(){var t;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(t=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(t);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error(\"Corrupted zip or bug: expected \"+this.centralDirRecords+\" records in central dir, got \"+this.files.length)},readEndOfCentral:function(){var t=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(t<0)throw!this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error(\"Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html\"):new Error(\"Corrupted zip: can't find end of central directory\");this.reader.setIndex(t);var e=t;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===n.MAX_VALUE_16BITS||this.diskWithCentralDirStart===n.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===n.MAX_VALUE_16BITS||this.centralDirRecords===n.MAX_VALUE_16BITS||this.centralDirSize===n.MAX_VALUE_32BITS||this.centralDirOffset===n.MAX_VALUE_32BITS){if(this.zip64=!0,(t=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory locator\");if(this.reader.setIndex(t),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory\");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var i=e-r;if(0<i)this.isSignature(e,s.CENTRAL_FILE_HEADER)||(this.reader.zero=i);else if(i<0)throw new Error(\"Corrupted zip: missing \"+Math.abs(i)+\" bytes.\")},prepareReader:function(t){this.reader=i(t)},load:function(t){this.prepareReader(t),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},e.exports=h},{\"./reader/readerFor\":22,\"./signature\":23,\"./support\":30,\"./utf8\":31,\"./utils\":32,\"./zipEntry\":34}],34:[function(t,e,r){\"use strict\";var i=t(\"./reader/readerFor\"),s=t(\"./utils\"),n=t(\"./compressedObject\"),a=t(\"./crc32\"),o=t(\"./utf8\"),h=t(\"./compressions\"),u=t(\"./support\");function l(t,e){this.options=t,this.loadOptions=e}l.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(t){var e,r;if(t.skip(22),this.fileNameLength=t.readInt(2),r=t.readInt(2),this.fileName=t.readData(this.fileNameLength),t.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error(\"Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)\");if(null===(e=function(t){for(var e in h)if(h.hasOwnProperty(e)&&h[e].magic===t)return h[e];return null}(this.compressionMethod)))throw new Error(\"Corrupted zip : compression \"+s.pretty(this.compressionMethod)+\" unknown (inner file : \"+s.transformTo(\"string\",this.fileName)+\")\");this.decompressed=new n(this.compressedSize,this.uncompressedSize,this.crc32,e,t.readData(this.compressedSize))},readCentralPart:function(t){this.versionMadeBy=t.readInt(2),t.skip(2),this.bitFlag=t.readInt(2),this.compressionMethod=t.readString(2),this.date=t.readDate(),this.crc32=t.readInt(4),this.compressedSize=t.readInt(4),this.uncompressedSize=t.readInt(4);var e=t.readInt(2);if(this.extraFieldsLength=t.readInt(2),this.fileCommentLength=t.readInt(2),this.diskNumberStart=t.readInt(2),this.internalFileAttributes=t.readInt(2),this.externalFileAttributes=t.readInt(4),this.localHeaderOffset=t.readInt(4),this.isEncrypted())throw new Error(\"Encrypted zip are not supported\");t.skip(e),this.readExtraFields(t),this.parseZIP64ExtraField(t),this.fileComment=t.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var t=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==t&&(this.dosPermissions=63&this.externalFileAttributes),3==t&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||\"/\"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(t){if(this.extraFields[1]){var e=i(this.extraFields[1].value);this.uncompressedSize===s.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===s.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===s.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===s.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(t){var e,r,i,n=t.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});t.index+4<n;)e=t.readInt(2),r=t.readInt(2),i=t.readData(r),this.extraFields[e]={id:e,length:r,value:i};t.setIndex(n)},handleUTF8:function(){var t=u.uint8array?\"uint8array\":\"array\";if(this.useUTF8())this.fileNameStr=o.utf8decode(this.fileName),this.fileCommentStr=o.utf8decode(this.fileComment);else{var e=this.findExtraFieldUnicodePath();if(null!==e)this.fileNameStr=e;else{var r=s.transformTo(t,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var i=this.findExtraFieldUnicodeComment();if(null!==i)this.fileCommentStr=i;else{var n=s.transformTo(t,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(n)}}},findExtraFieldUnicodePath:function(){var t=this.extraFields[28789];if(t){var e=i(t.value);return 1!==e.readInt(1)?null:a(this.fileName)!==e.readInt(4)?null:o.utf8decode(e.readData(t.length-5))}return null},findExtraFieldUnicodeComment:function(){var t=this.extraFields[25461];if(t){var e=i(t.value);return 1!==e.readInt(1)?null:a(this.fileComment)!==e.readInt(4)?null:o.utf8decode(e.readData(t.length-5))}return null}},e.exports=l},{\"./compressedObject\":2,\"./compressions\":3,\"./crc32\":4,\"./reader/readerFor\":22,\"./support\":30,\"./utf8\":31,\"./utils\":32}],35:[function(t,e,r){\"use strict\";function i(t,e,r){this.name=t,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=e,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}}var s=t(\"./stream/StreamHelper\"),n=t(\"./stream/DataWorker\"),a=t(\"./utf8\"),o=t(\"./compressedObject\"),h=t(\"./stream/GenericWorker\");i.prototype={internalStream:function(t){var e=null,r=\"string\";try{if(!t)throw new Error(\"No output type specified.\");var i=\"string\"===(r=t.toLowerCase())||\"text\"===r;\"binarystring\"!==r&&\"text\"!==r||(r=\"string\"),e=this._decompressWorker();var n=!this._dataBinary;n&&!i&&(e=e.pipe(new a.Utf8EncodeWorker)),!n&&i&&(e=e.pipe(new a.Utf8DecodeWorker))}catch(t){(e=new h(\"error\")).error(t)}return new s(e,r,\"\")},async:function(t,e){return this.internalStream(t).accumulate(e)},nodeStream:function(t,e){return this.internalStream(t||\"nodebuffer\").toNodejsStream(e)},_compressWorker:function(t,e){if(this._data instanceof o&&this._data.compression.magic===t.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new a.Utf8EncodeWorker)),o.createWorkerFrom(r,t,e)},_decompressWorker:function(){return this._data instanceof o?this._data.getContentWorker():this._data instanceof h?this._data:new n(this._data)}};for(var u=[\"asText\",\"asBinary\",\"asNodeBuffer\",\"asUint8Array\",\"asArrayBuffer\"],l=function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},f=0;f<u.length;f++)i.prototype[u[f]]=l;e.exports=i},{\"./compressedObject\":2,\"./stream/DataWorker\":27,\"./stream/GenericWorker\":28,\"./stream/StreamHelper\":29,\"./utf8\":31}],36:[function(t,l,e){(function(e){\"use strict\";var r,i,t=e.MutationObserver||e.WebKitMutationObserver;if(t){var n=0,s=new t(u),a=e.document.createTextNode(\"\");s.observe(a,{characterData:!0}),r=function(){a.data=n=++n%2}}else if(e.setImmediate||void 0===e.MessageChannel)r=\"document\"in e&&\"onreadystatechange\"in e.document.createElement(\"script\")?function(){var t=e.document.createElement(\"script\");t.onreadystatechange=function(){u(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(u,0)};else{var o=new e.MessageChannel;o.port1.onmessage=u,r=function(){o.port2.postMessage(0)}}var h=[];function u(){var t,e;i=!0;for(var r=h.length;r;){for(e=h,h=[],t=-1;++t<r;)e[t]();r=h.length}i=!1}l.exports=function(t){1!==h.push(t)||i||r()}}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],37:[function(t,e,r){\"use strict\";var n=t(\"immediate\");function u(){}var l={},s=[\"REJECTED\"],a=[\"FULFILLED\"],i=[\"PENDING\"];function o(t){if(\"function\"!=typeof t)throw new TypeError(\"resolver must be a function\");this.state=i,this.queue=[],this.outcome=void 0,t!==u&&c(this,t)}function h(t,e,r){this.promise=t,\"function\"==typeof e&&(this.onFulfilled=e,this.callFulfilled=this.otherCallFulfilled),\"function\"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function f(e,r,i){n(function(){var t;try{t=r(i)}catch(t){return l.reject(e,t)}t===e?l.reject(e,new TypeError(\"Cannot resolve promise with itself\")):l.resolve(e,t)})}function d(t){var e=t&&t.then;if(t&&(\"object\"==typeof t||\"function\"==typeof t)&&\"function\"==typeof e)return function(){e.apply(t,arguments)}}function c(e,t){var r=!1;function i(t){r||(r=!0,l.reject(e,t))}function n(t){r||(r=!0,l.resolve(e,t))}var s=p(function(){t(n,i)});\"error\"===s.status&&i(s.value)}function p(t,e){var r={};try{r.value=t(e),r.status=\"success\"}catch(t){r.status=\"error\",r.value=t}return r}(e.exports=o).prototype.finally=function(e){if(\"function\"!=typeof e)return this;var r=this.constructor;return this.then(function(t){return r.resolve(e()).then(function(){return t})},function(t){return r.resolve(e()).then(function(){throw t})})},o.prototype.catch=function(t){return this.then(null,t)},o.prototype.then=function(t,e){if(\"function\"!=typeof t&&this.state===a||\"function\"!=typeof e&&this.state===s)return this;var r=new this.constructor(u);this.state!==i?f(r,this.state===a?t:e,this.outcome):this.queue.push(new h(r,t,e));return r},h.prototype.callFulfilled=function(t){l.resolve(this.promise,t)},h.prototype.otherCallFulfilled=function(t){f(this.promise,this.onFulfilled,t)},h.prototype.callRejected=function(t){l.reject(this.promise,t)},h.prototype.otherCallRejected=function(t){f(this.promise,this.onRejected,t)},l.resolve=function(t,e){var r=p(d,e);if(\"error\"===r.status)return l.reject(t,r.value);var i=r.value;if(i)c(t,i);else{t.state=a,t.outcome=e;for(var n=-1,s=t.queue.length;++n<s;)t.queue[n].callFulfilled(e)}return t},l.reject=function(t,e){t.state=s,t.outcome=e;for(var r=-1,i=t.queue.length;++r<i;)t.queue[r].callRejected(e);return t},o.resolve=function(t){if(t instanceof this)return t;return l.resolve(new this(u),t)},o.reject=function(t){var e=new this(u);return l.reject(e,t)},o.all=function(t){var r=this;if(\"[object Array]\"!==Object.prototype.toString.call(t))return this.reject(new TypeError(\"must be an array\"));var i=t.length,n=!1;if(!i)return this.resolve([]);var s=new Array(i),a=0,e=-1,o=new this(u);for(;++e<i;)h(t[e],e);return o;function h(t,e){r.resolve(t).then(function(t){s[e]=t,++a!==i||n||(n=!0,l.resolve(o,s))},function(t){n||(n=!0,l.reject(o,t))})}},o.race=function(t){var e=this;if(\"[object Array]\"!==Object.prototype.toString.call(t))return this.reject(new TypeError(\"must be an array\"));var r=t.length,i=!1;if(!r)return this.resolve([]);var n=-1,s=new this(u);for(;++n<r;)a=t[n],e.resolve(a).then(function(t){i||(i=!0,l.resolve(s,t))},function(t){i||(i=!0,l.reject(s,t))});var a;return s}},{immediate:36}],38:[function(t,e,r){\"use strict\";var i={};(0,t(\"./lib/utils/common\").assign)(i,t(\"./lib/deflate\"),t(\"./lib/inflate\"),t(\"./lib/zlib/constants\")),e.exports=i},{\"./lib/deflate\":39,\"./lib/inflate\":40,\"./lib/utils/common\":41,\"./lib/zlib/constants\":44}],39:[function(t,e,r){\"use strict\";var a=t(\"./zlib/deflate\"),o=t(\"./utils/common\"),h=t(\"./utils/strings\"),n=t(\"./zlib/messages\"),s=t(\"./zlib/zstream\"),u=Object.prototype.toString,l=0,f=-1,d=0,c=8;function p(t){if(!(this instanceof p))return new p(t);this.options=o.assign({level:f,method:c,chunkSize:16384,windowBits:15,memLevel:8,strategy:d,to:\"\"},t||{});var e=this.options;e.raw&&0<e.windowBits?e.windowBits=-e.windowBits:e.gzip&&0<e.windowBits&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=a.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(r!==l)throw new Error(n[r]);if(e.header&&a.deflateSetHeader(this.strm,e.header),e.dictionary){var i;if(i=\"string\"==typeof e.dictionary?h.string2buf(e.dictionary):\"[object ArrayBuffer]\"===u.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,(r=a.deflateSetDictionary(this.strm,i))!==l)throw new Error(n[r]);this._dict_set=!0}}function i(t,e){var r=new p(e);if(r.push(t,!0),r.err)throw r.msg||n[r.err];return r.result}p.prototype.push=function(t,e){var r,i,n=this.strm,s=this.options.chunkSize;if(this.ended)return!1;i=e===~~e?e:!0===e?4:0,\"string\"==typeof t?n.input=h.string2buf(t):\"[object ArrayBuffer]\"===u.call(t)?n.input=new Uint8Array(t):n.input=t,n.next_in=0,n.avail_in=n.input.length;do{if(0===n.avail_out&&(n.output=new o.Buf8(s),n.next_out=0,n.avail_out=s),1!==(r=a.deflate(n,i))&&r!==l)return this.onEnd(r),!(this.ended=!0);0!==n.avail_out&&(0!==n.avail_in||4!==i&&2!==i)||(\"string\"===this.options.to?this.onData(h.buf2binstring(o.shrinkBuf(n.output,n.next_out))):this.onData(o.shrinkBuf(n.output,n.next_out)))}while((0<n.avail_in||0===n.avail_out)&&1!==r);return 4===i?(r=a.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===l):2!==i||(this.onEnd(l),!(n.avail_out=0))},p.prototype.onData=function(t){this.chunks.push(t)},p.prototype.onEnd=function(t){t===l&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},r.Deflate=p,r.deflate=i,r.deflateRaw=function(t,e){return(e=e||{}).raw=!0,i(t,e)},r.gzip=function(t,e){return(e=e||{}).gzip=!0,i(t,e)}},{\"./utils/common\":41,\"./utils/strings\":42,\"./zlib/deflate\":46,\"./zlib/messages\":51,\"./zlib/zstream\":53}],40:[function(t,e,r){\"use strict\";var d=t(\"./zlib/inflate\"),c=t(\"./utils/common\"),p=t(\"./utils/strings\"),m=t(\"./zlib/constants\"),i=t(\"./zlib/messages\"),n=t(\"./zlib/zstream\"),s=t(\"./zlib/gzheader\"),_=Object.prototype.toString;function a(t){if(!(this instanceof a))return new a(t);this.options=c.assign({chunkSize:16384,windowBits:0,to:\"\"},t||{});var e=this.options;e.raw&&0<=e.windowBits&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(0<=e.windowBits&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),15<e.windowBits&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new n,this.strm.avail_out=0;var r=d.inflateInit2(this.strm,e.windowBits);if(r!==m.Z_OK)throw new Error(i[r]);this.header=new s,d.inflateGetHeader(this.strm,this.header)}function o(t,e){var r=new a(e);if(r.push(t,!0),r.err)throw r.msg||i[r.err];return r.result}a.prototype.push=function(t,e){var r,i,n,s,a,o,h=this.strm,u=this.options.chunkSize,l=this.options.dictionary,f=!1;if(this.ended)return!1;i=e===~~e?e:!0===e?m.Z_FINISH:m.Z_NO_FLUSH,\"string\"==typeof t?h.input=p.binstring2buf(t):\"[object ArrayBuffer]\"===_.call(t)?h.input=new Uint8Array(t):h.input=t,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new c.Buf8(u),h.next_out=0,h.avail_out=u),(r=d.inflate(h,m.Z_NO_FLUSH))===m.Z_NEED_DICT&&l&&(o=\"string\"==typeof l?p.string2buf(l):\"[object ArrayBuffer]\"===_.call(l)?new Uint8Array(l):l,r=d.inflateSetDictionary(this.strm,o)),r===m.Z_BUF_ERROR&&!0===f&&(r=m.Z_OK,f=!1),r!==m.Z_STREAM_END&&r!==m.Z_OK)return this.onEnd(r),!(this.ended=!0);h.next_out&&(0!==h.avail_out&&r!==m.Z_STREAM_END&&(0!==h.avail_in||i!==m.Z_FINISH&&i!==m.Z_SYNC_FLUSH)||(\"string\"===this.options.to?(n=p.utf8border(h.output,h.next_out),s=h.next_out-n,a=p.buf2string(h.output,n),h.next_out=s,h.avail_out=u-s,s&&c.arraySet(h.output,h.output,n,s,0),this.onData(a)):this.onData(c.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(f=!0)}while((0<h.avail_in||0===h.avail_out)&&r!==m.Z_STREAM_END);return r===m.Z_STREAM_END&&(i=m.Z_FINISH),i===m.Z_FINISH?(r=d.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===m.Z_OK):i!==m.Z_SYNC_FLUSH||(this.onEnd(m.Z_OK),!(h.avail_out=0))},a.prototype.onData=function(t){this.chunks.push(t)},a.prototype.onEnd=function(t){t===m.Z_OK&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=c.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},r.Inflate=a,r.inflate=o,r.inflateRaw=function(t,e){return(e=e||{}).raw=!0,o(t,e)},r.ungzip=o},{\"./utils/common\":41,\"./utils/strings\":42,\"./zlib/constants\":44,\"./zlib/gzheader\":47,\"./zlib/inflate\":49,\"./zlib/messages\":51,\"./zlib/zstream\":53}],41:[function(t,e,r){\"use strict\";var i=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Int32Array;r.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var r=e.shift();if(r){if(\"object\"!=typeof r)throw new TypeError(r+\"must be non-object\");for(var i in r)r.hasOwnProperty(i)&&(t[i]=r[i])}}return t},r.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var n={arraySet:function(t,e,r,i,n){if(e.subarray&&t.subarray)t.set(e.subarray(r,r+i),n);else for(var s=0;s<i;s++)t[n+s]=e[r+s]},flattenChunks:function(t){var e,r,i,n,s,a;for(e=i=0,r=t.length;e<r;e++)i+=t[e].length;for(a=new Uint8Array(i),e=n=0,r=t.length;e<r;e++)s=t[e],a.set(s,n),n+=s.length;return a}},s={arraySet:function(t,e,r,i,n){for(var s=0;s<i;s++)t[n+s]=e[r+s]},flattenChunks:function(t){return[].concat.apply([],t)}};r.setTyped=function(t){t?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,n)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,s))},r.setTyped(i)},{}],42:[function(t,e,r){\"use strict\";var h=t(\"./common\"),n=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(t){n=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){s=!1}for(var u=new h.Buf8(256),i=0;i<256;i++)u[i]=252<=i?6:248<=i?5:240<=i?4:224<=i?3:192<=i?2:1;function l(t,e){if(e<65537&&(t.subarray&&s||!t.subarray&&n))return String.fromCharCode.apply(null,h.shrinkBuf(t,e));for(var r=\"\",i=0;i<e;i++)r+=String.fromCharCode(t[i]);return r}u[254]=u[254]=1,r.string2buf=function(t){var e,r,i,n,s,a=t.length,o=0;for(n=0;n<a;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),o+=r<128?1:r<2048?2:r<65536?3:4;for(e=new h.Buf8(o),n=s=0;s<o;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),r<128?e[s++]=r:(r<2048?e[s++]=192|r>>>6:(r<65536?e[s++]=224|r>>>12:(e[s++]=240|r>>>18,e[s++]=128|r>>>12&63),e[s++]=128|r>>>6&63),e[s++]=128|63&r);return e},r.buf2binstring=function(t){return l(t,t.length)},r.binstring2buf=function(t){for(var e=new h.Buf8(t.length),r=0,i=e.length;r<i;r++)e[r]=t.charCodeAt(r);return e},r.buf2string=function(t,e){var r,i,n,s,a=e||t.length,o=new Array(2*a);for(r=i=0;r<a;)if((n=t[r++])<128)o[i++]=n;else if(4<(s=u[n]))o[i++]=65533,r+=s-1;else{for(n&=2===s?31:3===s?15:7;1<s&&r<a;)n=n<<6|63&t[r++],s--;1<s?o[i++]=65533:n<65536?o[i++]=n:(n-=65536,o[i++]=55296|n>>10&1023,o[i++]=56320|1023&n)}return l(o,i)},r.utf8border=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;0<=r&&128==(192&t[r]);)r--;return r<0?e:0===r?e:r+u[t[r]]>e?r:e}},{\"./common\":41}],43:[function(t,e,r){\"use strict\";e.exports=function(t,e,r,i){for(var n=65535&t|0,s=t>>>16&65535|0,a=0;0!==r;){for(r-=a=2e3<r?2e3:r;s=s+(n=n+e[i++]|0)|0,--a;);n%=65521,s%=65521}return n|s<<16|0}},{}],44:[function(t,e,r){\"use strict\";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(t,e,r){\"use strict\";var o=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();e.exports=function(t,e,r,i){var n=o,s=i+r;t^=-1;for(var a=i;a<s;a++)t=t>>>8^n[255&(t^e[a])];return-1^t}},{}],46:[function(t,e,r){\"use strict\";var h,d=t(\"../utils/common\"),u=t(\"./trees\"),c=t(\"./adler32\"),p=t(\"./crc32\"),i=t(\"./messages\"),l=0,f=4,m=0,_=-2,g=-1,b=4,n=2,v=8,y=9,s=286,a=30,o=19,w=2*s+1,k=15,x=3,S=258,z=S+x+1,C=42,E=113,A=1,I=2,O=3,B=4;function R(t,e){return t.msg=i[e],e}function T(t){return(t<<1)-(4<t?9:0)}function D(t){for(var e=t.length;0<=--e;)t[e]=0}function F(t){var e=t.state,r=e.pending;r>t.avail_out&&(r=t.avail_out),0!==r&&(d.arraySet(t.output,e.pending_buf,e.pending_out,r,t.next_out),t.next_out+=r,e.pending_out+=r,t.total_out+=r,t.avail_out-=r,e.pending-=r,0===e.pending&&(e.pending_out=0))}function N(t,e){u._tr_flush_block(t,0<=t.block_start?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,F(t.strm)}function U(t,e){t.pending_buf[t.pending++]=e}function P(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function L(t,e){var r,i,n=t.max_chain_length,s=t.strstart,a=t.prev_length,o=t.nice_match,h=t.strstart>t.w_size-z?t.strstart-(t.w_size-z):0,u=t.window,l=t.w_mask,f=t.prev,d=t.strstart+S,c=u[s+a-1],p=u[s+a];t.prev_length>=t.good_match&&(n>>=2),o>t.lookahead&&(o=t.lookahead);do{if(u[(r=e)+a]===p&&u[r+a-1]===c&&u[r]===u[s]&&u[++r]===u[s+1]){s+=2,r++;do{}while(u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&s<d);if(i=S-(d-s),s=d-S,a<i){if(t.match_start=e,o<=(a=i))break;c=u[s+a-1],p=u[s+a]}}}while((e=f[e&l])>h&&0!=--n);return a<=t.lookahead?a:t.lookahead}function j(t){var e,r,i,n,s,a,o,h,u,l,f=t.w_size;do{if(n=t.window_size-t.lookahead-t.strstart,t.strstart>=f+(f-z)){for(d.arraySet(t.window,t.window,f,f,0),t.match_start-=f,t.strstart-=f,t.block_start-=f,e=r=t.hash_size;i=t.head[--e],t.head[e]=f<=i?i-f:0,--r;);for(e=r=f;i=t.prev[--e],t.prev[e]=f<=i?i-f:0,--r;);n+=f}if(0===t.strm.avail_in)break;if(a=t.strm,o=t.window,h=t.strstart+t.lookahead,u=n,l=void 0,l=a.avail_in,u<l&&(l=u),r=0===l?0:(a.avail_in-=l,d.arraySet(o,a.input,a.next_in,l,h),1===a.state.wrap?a.adler=c(a.adler,o,l,h):2===a.state.wrap&&(a.adler=p(a.adler,o,l,h)),a.next_in+=l,a.total_in+=l,l),t.lookahead+=r,t.lookahead+t.insert>=x)for(s=t.strstart-t.insert,t.ins_h=t.window[s],t.ins_h=(t.ins_h<<t.hash_shift^t.window[s+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[s+x-1])&t.hash_mask,t.prev[s&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=s,s++,t.insert--,!(t.lookahead+t.insert<x)););}while(t.lookahead<z&&0!==t.strm.avail_in)}function Z(t,e){for(var r,i;;){if(t.lookahead<z){if(j(t),t.lookahead<z&&e===l)return A;if(0===t.lookahead)break}if(r=0,t.lookahead>=x&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==r&&t.strstart-r<=t.w_size-z&&(t.match_length=L(t,r)),t.match_length>=x)if(i=u._tr_tally(t,t.strstart-t.match_start,t.match_length-x),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=x){for(t.match_length--;t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart,0!=--t.match_length;);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else i=u._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=t.strstart<x-1?t.strstart:x-1,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}function W(t,e){for(var r,i,n;;){if(t.lookahead<z){if(j(t),t.lookahead<z&&e===l)return A;if(0===t.lookahead)break}if(r=0,t.lookahead>=x&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=x-1,0!==r&&t.prev_length<t.max_lazy_match&&t.strstart-r<=t.w_size-z&&(t.match_length=L(t,r),t.match_length<=5&&(1===t.strategy||t.match_length===x&&4096<t.strstart-t.match_start)&&(t.match_length=x-1)),t.prev_length>=x&&t.match_length<=t.prev_length){for(n=t.strstart+t.lookahead-x,i=u._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-x),t.lookahead-=t.prev_length-1,t.prev_length-=2;++t.strstart<=n&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!=--t.prev_length;);if(t.match_available=0,t.match_length=x-1,t.strstart++,i&&(N(t,!1),0===t.strm.avail_out))return A}else if(t.match_available){if((i=u._tr_tally(t,0,t.window[t.strstart-1]))&&N(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return A}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=u._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<x-1?t.strstart:x-1,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}function M(t,e,r,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=r,this.max_chain=i,this.func=n}function H(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=v,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new d.Buf16(2*w),this.dyn_dtree=new d.Buf16(2*(2*a+1)),this.bl_tree=new d.Buf16(2*(2*o+1)),D(this.dyn_ltree),D(this.dyn_dtree),D(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new d.Buf16(k+1),this.heap=new d.Buf16(2*s+1),D(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new d.Buf16(2*s+1),D(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function G(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=n,(e=t.state).pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?C:E,t.adler=2===e.wrap?0:1,e.last_flush=l,u._tr_init(e),m):R(t,_)}function K(t){var e=G(t);return e===m&&function(t){t.window_size=2*t.w_size,D(t.head),t.max_lazy_match=h[t.level].max_lazy,t.good_match=h[t.level].good_length,t.nice_match=h[t.level].nice_length,t.max_chain_length=h[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=x-1,t.match_available=0,t.ins_h=0}(t.state),e}function Y(t,e,r,i,n,s){if(!t)return _;var a=1;if(e===g&&(e=6),i<0?(a=0,i=-i):15<i&&(a=2,i-=16),n<1||y<n||r!==v||i<8||15<i||e<0||9<e||s<0||b<s)return R(t,_);8===i&&(i=9);var o=new H;return(t.state=o).strm=t,o.wrap=a,o.gzhead=null,o.w_bits=i,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=n+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+x-1)/x),o.window=new d.Buf8(2*o.w_size),o.head=new d.Buf16(o.hash_size),o.prev=new d.Buf16(o.w_size),o.lit_bufsize=1<<n+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new d.Buf8(o.pending_buf_size),o.d_buf=1*o.lit_bufsize,o.l_buf=3*o.lit_bufsize,o.level=e,o.strategy=s,o.method=r,K(t)}h=[new M(0,0,0,0,function(t,e){var r=65535;for(r>t.pending_buf_size-5&&(r=t.pending_buf_size-5);;){if(t.lookahead<=1){if(j(t),0===t.lookahead&&e===l)return A;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var i=t.block_start+r;if((0===t.strstart||t.strstart>=i)&&(t.lookahead=t.strstart-i,t.strstart=i,N(t,!1),0===t.strm.avail_out))return A;if(t.strstart-t.block_start>=t.w_size-z&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=0,e===f?(N(t,!0),0===t.strm.avail_out?O:B):(t.strstart>t.block_start&&(N(t,!1),t.strm.avail_out),A)}),new M(4,4,8,4,Z),new M(4,5,16,8,Z),new M(4,6,32,32,Z),new M(4,4,16,16,W),new M(8,16,32,32,W),new M(8,16,128,128,W),new M(8,32,128,256,W),new M(32,128,258,1024,W),new M(32,258,258,4096,W)],r.deflateInit=function(t,e){return Y(t,e,v,15,8,0)},r.deflateInit2=Y,r.deflateReset=K,r.deflateResetKeep=G,r.deflateSetHeader=function(t,e){return t&&t.state?2!==t.state.wrap?_:(t.state.gzhead=e,m):_},r.deflate=function(t,e){var r,i,n,s;if(!t||!t.state||5<e||e<0)return t?R(t,_):_;if(i=t.state,!t.output||!t.input&&0!==t.avail_in||666===i.status&&e!==f)return R(t,0===t.avail_out?-5:_);if(i.strm=t,r=i.last_flush,i.last_flush=e,i.status===C)if(2===i.wrap)t.adler=0,U(i,31),U(i,139),U(i,8),i.gzhead?(U(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),U(i,255&i.gzhead.time),U(i,i.gzhead.time>>8&255),U(i,i.gzhead.time>>16&255),U(i,i.gzhead.time>>24&255),U(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),U(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(U(i,255&i.gzhead.extra.length),U(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(t.adler=p(t.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(U(i,0),U(i,0),U(i,0),U(i,0),U(i,0),U(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),U(i,3),i.status=E);else{var a=v+(i.w_bits-8<<4)<<8;a|=(2<=i.strategy||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(a|=32),a+=31-a%31,i.status=E,P(i,a),0!==i.strstart&&(P(i,t.adler>>>16),P(i,65535&t.adler)),t.adler=1}if(69===i.status)if(i.gzhead.extra){for(n=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),F(t),n=i.pending,i.pending!==i.pending_buf_size));)U(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73)}else i.status=73;if(73===i.status)if(i.gzhead.name){n=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),F(t),n=i.pending,i.pending===i.pending_buf_size)){s=1;break}s=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,U(i,s)}while(0!==s);i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),0===s&&(i.gzindex=0,i.status=91)}else i.status=91;if(91===i.status)if(i.gzhead.comment){n=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),F(t),n=i.pending,i.pending===i.pending_buf_size)){s=1;break}s=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,U(i,s)}while(0!==s);i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),0===s&&(i.status=103)}else i.status=103;if(103===i.status&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&F(t),i.pending+2<=i.pending_buf_size&&(U(i,255&t.adler),U(i,t.adler>>8&255),t.adler=0,i.status=E)):i.status=E),0!==i.pending){if(F(t),0===t.avail_out)return i.last_flush=-1,m}else if(0===t.avail_in&&T(e)<=T(r)&&e!==f)return R(t,-5);if(666===i.status&&0!==t.avail_in)return R(t,-5);if(0!==t.avail_in||0!==i.lookahead||e!==l&&666!==i.status){var o=2===i.strategy?function(t,e){for(var r;;){if(0===t.lookahead&&(j(t),0===t.lookahead)){if(e===l)return A;break}if(t.match_length=0,r=u._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,r&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=0,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}(i,e):3===i.strategy?function(t,e){for(var r,i,n,s,a=t.window;;){if(t.lookahead<=S){if(j(t),t.lookahead<=S&&e===l)return A;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=x&&0<t.strstart&&(i=a[n=t.strstart-1])===a[++n]&&i===a[++n]&&i===a[++n]){s=t.strstart+S;do{}while(i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&n<s);t.match_length=S-(s-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=x?(r=u._tr_tally(t,1,t.match_length-x),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(r=u._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),r&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=0,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}(i,e):h[i.level].func(i,e);if(o!==O&&o!==B||(i.status=666),o===A||o===O)return 0===t.avail_out&&(i.last_flush=-1),m;if(o===I&&(1===e?u._tr_align(i):5!==e&&(u._tr_stored_block(i,0,0,!1),3===e&&(D(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),F(t),0===t.avail_out))return i.last_flush=-1,m}return e!==f?m:i.wrap<=0?1:(2===i.wrap?(U(i,255&t.adler),U(i,t.adler>>8&255),U(i,t.adler>>16&255),U(i,t.adler>>24&255),U(i,255&t.total_in),U(i,t.total_in>>8&255),U(i,t.total_in>>16&255),U(i,t.total_in>>24&255)):(P(i,t.adler>>>16),P(i,65535&t.adler)),F(t),0<i.wrap&&(i.wrap=-i.wrap),0!==i.pending?m:1)},r.deflateEnd=function(t){var e;return t&&t.state?(e=t.state.status)!==C&&69!==e&&73!==e&&91!==e&&103!==e&&e!==E&&666!==e?R(t,_):(t.state=null,e===E?R(t,-3):m):_},r.deflateSetDictionary=function(t,e){var r,i,n,s,a,o,h,u,l=e.length;if(!t||!t.state)return _;if(2===(s=(r=t.state).wrap)||1===s&&r.status!==C||r.lookahead)return _;for(1===s&&(t.adler=c(t.adler,e,l,0)),r.wrap=0,l>=r.w_size&&(0===s&&(D(r.head),r.strstart=0,r.block_start=0,r.insert=0),u=new d.Buf8(r.w_size),d.arraySet(u,e,l-r.w_size,r.w_size,0),e=u,l=r.w_size),a=t.avail_in,o=t.next_in,h=t.input,t.avail_in=l,t.next_in=0,t.input=e,j(r);r.lookahead>=x;){for(i=r.strstart,n=r.lookahead-(x-1);r.ins_h=(r.ins_h<<r.hash_shift^r.window[i+x-1])&r.hash_mask,r.prev[i&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=i,i++,--n;);r.strstart=i,r.lookahead=x-1,j(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=x-1,r.match_available=0,t.next_in=o,t.input=h,t.avail_in=a,r.wrap=s,m},r.deflateInfo=\"pako deflate (from Nodeca project)\"},{\"../utils/common\":41,\"./adler32\":43,\"./crc32\":45,\"./messages\":51,\"./trees\":52}],47:[function(t,e,r){\"use strict\";e.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name=\"\",this.comment=\"\",this.hcrc=0,this.done=!1}},{}],48:[function(t,e,r){\"use strict\";e.exports=function(t,e){var r,i,n,s,a,o,h,u,l,f,d,c,p,m,_,g,b,v,y,w,k,x,S,z,C;r=t.state,i=t.next_in,z=t.input,n=i+(t.avail_in-5),s=t.next_out,C=t.output,a=s-(e-t.avail_out),o=s+(t.avail_out-257),h=r.dmax,u=r.wsize,l=r.whave,f=r.wnext,d=r.window,c=r.hold,p=r.bits,m=r.lencode,_=r.distcode,g=(1<<r.lenbits)-1,b=(1<<r.distbits)-1;t:do{p<15&&(c+=z[i++]<<p,p+=8,c+=z[i++]<<p,p+=8),v=m[c&g];e:for(;;){if(c>>>=y=v>>>24,p-=y,0===(y=v>>>16&255))C[s++]=65535&v;else{if(!(16&y)){if(0==(64&y)){v=m[(65535&v)+(c&(1<<y)-1)];continue e}if(32&y){r.mode=12;break t}t.msg=\"invalid literal/length code\",r.mode=30;break t}w=65535&v,(y&=15)&&(p<y&&(c+=z[i++]<<p,p+=8),w+=c&(1<<y)-1,c>>>=y,p-=y),p<15&&(c+=z[i++]<<p,p+=8,c+=z[i++]<<p,p+=8),v=_[c&b];r:for(;;){if(c>>>=y=v>>>24,p-=y,!(16&(y=v>>>16&255))){if(0==(64&y)){v=_[(65535&v)+(c&(1<<y)-1)];continue r}t.msg=\"invalid distance code\",r.mode=30;break t}if(k=65535&v,p<(y&=15)&&(c+=z[i++]<<p,(p+=8)<y&&(c+=z[i++]<<p,p+=8)),h<(k+=c&(1<<y)-1)){t.msg=\"invalid distance too far back\",r.mode=30;break t}if(c>>>=y,p-=y,(y=s-a)<k){if(l<(y=k-y)&&r.sane){t.msg=\"invalid distance too far back\",r.mode=30;break t}if(S=d,(x=0)===f){if(x+=u-y,y<w){for(w-=y;C[s++]=d[x++],--y;);x=s-k,S=C}}else if(f<y){if(x+=u+f-y,(y-=f)<w){for(w-=y;C[s++]=d[x++],--y;);if(x=0,f<w){for(w-=y=f;C[s++]=d[x++],--y;);x=s-k,S=C}}}else if(x+=f-y,y<w){for(w-=y;C[s++]=d[x++],--y;);x=s-k,S=C}for(;2<w;)C[s++]=S[x++],C[s++]=S[x++],C[s++]=S[x++],w-=3;w&&(C[s++]=S[x++],1<w&&(C[s++]=S[x++]))}else{for(x=s-k;C[s++]=C[x++],C[s++]=C[x++],C[s++]=C[x++],2<(w-=3););w&&(C[s++]=C[x++],1<w&&(C[s++]=C[x++]))}break}}break}}while(i<n&&s<o);i-=w=p>>3,c&=(1<<(p-=w<<3))-1,t.next_in=i,t.next_out=s,t.avail_in=i<n?n-i+5:5-(i-n),t.avail_out=s<o?o-s+257:257-(s-o),r.hold=c,r.bits=p}},{}],49:[function(t,e,r){\"use strict\";var I=t(\"../utils/common\"),O=t(\"./adler32\"),B=t(\"./crc32\"),R=t(\"./inffast\"),T=t(\"./inftrees\"),D=1,F=2,N=0,U=-2,P=1,i=852,n=592;function L(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function s(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new I.Buf16(320),this.work=new I.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function a(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg=\"\",e.wrap&&(t.adler=1&e.wrap),e.mode=P,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new I.Buf32(i),e.distcode=e.distdyn=new I.Buf32(n),e.sane=1,e.back=-1,N):U}function o(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,a(t)):U}function h(t,e){var r,i;return t&&t.state?(i=t.state,e<0?(r=0,e=-e):(r=1+(e>>4),e<48&&(e&=15)),e&&(e<8||15<e)?U:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=r,i.wbits=e,o(t))):U}function u(t,e){var r,i;return t?(i=new s,(t.state=i).window=null,(r=h(t,e))!==N&&(t.state=null),r):U}var l,f,d=!0;function j(t){if(d){var e;for(l=new I.Buf32(512),f=new I.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(T(D,t.lens,0,288,l,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;T(F,t.lens,0,32,f,0,t.work,{bits:5}),d=!1}t.lencode=l,t.lenbits=9,t.distcode=f,t.distbits=5}function Z(t,e,r,i){var n,s=t.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new I.Buf8(s.wsize)),i>=s.wsize?(I.arraySet(s.window,e,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):(i<(n=s.wsize-s.wnext)&&(n=i),I.arraySet(s.window,e,r-i,n,s.wnext),(i-=n)?(I.arraySet(s.window,e,r-i,i,0),s.wnext=i,s.whave=s.wsize):(s.wnext+=n,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=n))),0}r.inflateReset=o,r.inflateReset2=h,r.inflateResetKeep=a,r.inflateInit=function(t){return u(t,15)},r.inflateInit2=u,r.inflate=function(t,e){var r,i,n,s,a,o,h,u,l,f,d,c,p,m,_,g,b,v,y,w,k,x,S,z,C=0,E=new I.Buf8(4),A=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return U;12===(r=t.state).mode&&(r.mode=13),a=t.next_out,n=t.output,h=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,u=r.hold,l=r.bits,f=o,d=h,x=N;t:for(;;)switch(r.mode){case P:if(0===r.wrap){r.mode=13;break}for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(2&r.wrap&&35615===u){E[r.check=0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0),l=u=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&u)<<8)+(u>>8))%31){t.msg=\"incorrect header check\",r.mode=30;break}if(8!=(15&u)){t.msg=\"unknown compression method\",r.mode=30;break}if(l-=4,k=8+(15&(u>>>=4)),0===r.wbits)r.wbits=k;else if(k>r.wbits){t.msg=\"invalid window size\",r.mode=30;break}r.dmax=1<<k,t.adler=r.check=1,r.mode=512&u?10:12,l=u=0;break;case 2:for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(r.flags=u,8!=(255&r.flags)){t.msg=\"unknown compression method\",r.mode=30;break}if(57344&r.flags){t.msg=\"unknown header flags set\",r.mode=30;break}r.head&&(r.head.text=u>>8&1),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=3;case 3:for(;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.head&&(r.head.time=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,E[2]=u>>>16&255,E[3]=u>>>24&255,r.check=B(r.check,E,4,0)),l=u=0,r.mode=4;case 4:for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.head&&(r.head.xflags=255&u,r.head.os=u>>8),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=5;case 5:if(1024&r.flags){for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.length=u,r.head&&(r.head.extra_len=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(o<(c=r.length)&&(c=o),c&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),I.arraySet(r.head.extra,i,s,c,k)),512&r.flags&&(r.check=B(r.check,i,c,s)),o-=c,s+=c,r.length-=c),r.length))break t;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===o)break t;for(c=0;k=i[s+c++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k)),k&&c<o;);if(512&r.flags&&(r.check=B(r.check,i,c,s)),o-=c,s+=c,k)break t}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===o)break t;for(c=0;k=i[s+c++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k)),k&&c<o;);if(512&r.flags&&(r.check=B(r.check,i,c,s)),o-=c,s+=c,k)break t}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(u!==(65535&r.check)){t.msg=\"header crc mismatch\",r.mode=30;break}l=u=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),t.adler=r.check=0,r.mode=12;break;case 10:for(;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}t.adler=r.check=L(u),l=u=0,r.mode=11;case 11:if(0===r.havedict)return t.next_out=a,t.avail_out=h,t.next_in=s,t.avail_in=o,r.hold=u,r.bits=l,2;t.adler=r.check=1,r.mode=12;case 12:if(5===e||6===e)break t;case 13:if(r.last){u>>>=7&l,l-=7&l,r.mode=27;break}for(;l<3;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}switch(r.last=1&u,l-=1,3&(u>>>=1)){case 0:r.mode=14;break;case 1:if(j(r),r.mode=20,6!==e)break;u>>>=2,l-=2;break t;case 2:r.mode=17;break;case 3:t.msg=\"invalid block type\",r.mode=30}u>>>=2,l-=2;break;case 14:for(u>>>=7&l,l-=7&l;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if((65535&u)!=(u>>>16^65535)){t.msg=\"invalid stored block lengths\",r.mode=30;break}if(r.length=65535&u,l=u=0,r.mode=15,6===e)break t;case 15:r.mode=16;case 16:if(c=r.length){if(o<c&&(c=o),h<c&&(c=h),0===c)break t;I.arraySet(n,i,s,c,a),o-=c,s+=c,h-=c,a+=c,r.length-=c;break}r.mode=12;break;case 17:for(;l<14;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(r.nlen=257+(31&u),u>>>=5,l-=5,r.ndist=1+(31&u),u>>>=5,l-=5,r.ncode=4+(15&u),u>>>=4,l-=4,286<r.nlen||30<r.ndist){t.msg=\"too many length or distance symbols\",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;l<3;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.lens[A[r.have++]]=7&u,u>>>=3,l-=3}for(;r.have<19;)r.lens[A[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,S={bits:r.lenbits},x=T(0,r.lens,0,19,r.lencode,0,r.work,S),r.lenbits=S.bits,x){t.msg=\"invalid code lengths set\",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(b<16)u>>>=_,l-=_,r.lens[r.have++]=b;else{if(16===b){for(z=_+2;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(u>>>=_,l-=_,0===r.have){t.msg=\"invalid bit length repeat\",r.mode=30;break}k=r.lens[r.have-1],c=3+(3&u),u>>>=2,l-=2}else if(17===b){for(z=_+3;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}l-=_,k=0,c=3+(7&(u>>>=_)),u>>>=3,l-=3}else{for(z=_+7;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}l-=_,k=0,c=11+(127&(u>>>=_)),u>>>=7,l-=7}if(r.have+c>r.nlen+r.ndist){t.msg=\"invalid bit length repeat\",r.mode=30;break}for(;c--;)r.lens[r.have++]=k}}if(30===r.mode)break;if(0===r.lens[256]){t.msg=\"invalid code -- missing end-of-block\",r.mode=30;break}if(r.lenbits=9,S={bits:r.lenbits},x=T(D,r.lens,0,r.nlen,r.lencode,0,r.work,S),r.lenbits=S.bits,x){t.msg=\"invalid literal/lengths set\",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,S={bits:r.distbits},x=T(F,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,S),r.distbits=S.bits,x){t.msg=\"invalid distances set\",r.mode=30;break}if(r.mode=20,6===e)break t;case 20:r.mode=21;case 21:if(6<=o&&258<=h){t.next_out=a,t.avail_out=h,t.next_in=s,t.avail_in=o,r.hold=u,r.bits=l,R(t,d),a=t.next_out,n=t.output,h=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,u=r.hold,l=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(g&&0==(240&g)){for(v=_,y=g,w=b;g=(C=r.lencode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}u>>>=v,l-=v,r.back+=v}if(u>>>=_,l-=_,r.back+=_,r.length=b,0===g){r.mode=26;break}if(32&g){r.back=-1,r.mode=12;break}if(64&g){t.msg=\"invalid literal/length code\",r.mode=30;break}r.extra=15&g,r.mode=22;case 22:if(r.extra){for(z=r.extra;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.length+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;g=(C=r.distcode[u&(1<<r.distbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(0==(240&g)){for(v=_,y=g,w=b;g=(C=r.distcode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}u>>>=v,l-=v,r.back+=v}if(u>>>=_,l-=_,r.back+=_,64&g){t.msg=\"invalid distance code\",r.mode=30;break}r.offset=b,r.extra=15&g,r.mode=24;case 24:if(r.extra){for(z=r.extra;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.offset+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){t.msg=\"invalid distance too far back\",r.mode=30;break}r.mode=25;case 25:if(0===h)break t;if(c=d-h,r.offset>c){if((c=r.offset-c)>r.whave&&r.sane){t.msg=\"invalid distance too far back\",r.mode=30;break}p=c>r.wnext?(c-=r.wnext,r.wsize-c):r.wnext-c,c>r.length&&(c=r.length),m=r.window}else m=n,p=a-r.offset,c=r.length;for(h<c&&(c=h),h-=c,r.length-=c;n[a++]=m[p++],--c;);0===r.length&&(r.mode=21);break;case 26:if(0===h)break t;n[a++]=r.length,h--,r.mode=21;break;case 27:if(r.wrap){for(;l<32;){if(0===o)break t;o--,u|=i[s++]<<l,l+=8}if(d-=h,t.total_out+=d,r.total+=d,d&&(t.adler=r.check=r.flags?B(r.check,n,d,a-d):O(r.check,n,d,a-d)),d=h,(r.flags?u:L(u))!==r.check){t.msg=\"incorrect data check\",r.mode=30;break}l=u=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(u!==(4294967295&r.total)){t.msg=\"incorrect length check\",r.mode=30;break}l=u=0}r.mode=29;case 29:x=1;break t;case 30:x=-3;break t;case 31:return-4;case 32:default:return U}return t.next_out=a,t.avail_out=h,t.next_in=s,t.avail_in=o,r.hold=u,r.bits=l,(r.wsize||d!==t.avail_out&&r.mode<30&&(r.mode<27||4!==e))&&Z(t,t.output,t.next_out,d-t.avail_out)?(r.mode=31,-4):(f-=t.avail_in,d-=t.avail_out,t.total_in+=f,t.total_out+=d,r.total+=d,r.wrap&&d&&(t.adler=r.check=r.flags?B(r.check,n,d,t.next_out-d):O(r.check,n,d,t.next_out-d)),t.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==f&&0===d||4===e)&&x===N&&(x=-5),x)},r.inflateEnd=function(t){if(!t||!t.state)return U;var e=t.state;return e.window&&(e.window=null),t.state=null,N},r.inflateGetHeader=function(t,e){var r;return t&&t.state?0==(2&(r=t.state).wrap)?U:((r.head=e).done=!1,N):U},r.inflateSetDictionary=function(t,e){var r,i=e.length;return t&&t.state?0!==(r=t.state).wrap&&11!==r.mode?U:11===r.mode&&O(1,e,i,0)!==r.check?-3:Z(t,e,i,i)?(r.mode=31,-4):(r.havedict=1,N):U},r.inflateInfo=\"pako inflate (from Nodeca project)\"},{\"../utils/common\":41,\"./adler32\":43,\"./crc32\":45,\"./inffast\":48,\"./inftrees\":50}],50:[function(t,e,r){\"use strict\";var D=t(\"../utils/common\"),F=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],N=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],U=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],P=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(t,e,r,i,n,s,a,o){var h,u,l,f,d,c,p,m,_,g=o.bits,b=0,v=0,y=0,w=0,k=0,x=0,S=0,z=0,C=0,E=0,A=null,I=0,O=new D.Buf16(16),B=new D.Buf16(16),R=null,T=0;for(b=0;b<=15;b++)O[b]=0;for(v=0;v<i;v++)O[e[r+v]]++;for(k=g,w=15;1<=w&&0===O[w];w--);if(w<k&&(k=w),0===w)return n[s++]=20971520,n[s++]=20971520,o.bits=1,0;for(y=1;y<w&&0===O[y];y++);for(k<y&&(k=y),b=z=1;b<=15;b++)if(z<<=1,(z-=O[b])<0)return-1;if(0<z&&(0===t||1!==w))return-1;for(B[1]=0,b=1;b<15;b++)B[b+1]=B[b]+O[b];for(v=0;v<i;v++)0!==e[r+v]&&(a[B[e[r+v]]++]=v);if(c=0===t?(A=R=a,19):1===t?(A=F,I-=257,R=N,T-=257,256):(A=U,R=P,-1),b=y,d=s,S=v=E=0,l=-1,f=(C=1<<(x=k))-1,1===t&&852<C||2===t&&592<C)return 1;for(;;){for(p=b-S,_=a[v]<c?(m=0,a[v]):a[v]>c?(m=R[T+a[v]],A[I+a[v]]):(m=96,0),h=1<<b-S,y=u=1<<x;n[d+(E>>S)+(u-=h)]=p<<24|m<<16|_|0,0!==u;);for(h=1<<b-1;E&h;)h>>=1;if(0!==h?(E&=h-1,E+=h):E=0,v++,0==--O[b]){if(b===w)break;b=e[r+a[v]]}if(k<b&&(E&f)!==l){for(0===S&&(S=k),d+=y,z=1<<(x=b-S);x+S<w&&!((z-=O[x+S])<=0);)x++,z<<=1;if(C+=1<<x,1===t&&852<C||2===t&&592<C)return 1;n[l=E&f]=k<<24|x<<16|d-s|0}}return 0!==E&&(n[d+E]=b-S<<24|64<<16|0),o.bits=k,0}},{\"../utils/common\":41}],51:[function(t,e,r){\"use strict\";e.exports={2:\"need dictionary\",1:\"stream end\",0:\"\",\"-1\":\"file error\",\"-2\":\"stream error\",\"-3\":\"data error\",\"-4\":\"insufficient memory\",\"-5\":\"buffer error\",\"-6\":\"incompatible version\"}},{}],52:[function(t,e,r){\"use strict\";var n=t(\"../utils/common\"),o=0,h=1;function i(t){for(var e=t.length;0<=--e;)t[e]=0}var s=0,a=29,u=256,l=u+1+a,f=30,d=19,_=2*l+1,g=15,c=16,p=7,m=256,b=16,v=17,y=18,w=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],k=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],x=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],z=new Array(2*(l+2));i(z);var C=new Array(2*f);i(C);var E=new Array(512);i(E);var A=new Array(256);i(A);var I=new Array(a);i(I);var O,B,R,T=new Array(f);function D(t,e,r,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=r,this.elems=i,this.max_length=n,this.has_stree=t&&t.length}function F(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function N(t){return t<256?E[t]:E[256+(t>>>7)]}function U(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function P(t,e,r){t.bi_valid>c-r?(t.bi_buf|=e<<t.bi_valid&65535,U(t,t.bi_buf),t.bi_buf=e>>c-t.bi_valid,t.bi_valid+=r-c):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=r)}function L(t,e,r){P(t,r[2*e],r[2*e+1])}function j(t,e){for(var r=0;r|=1&t,t>>>=1,r<<=1,0<--e;);return r>>>1}function Z(t,e,r){var i,n,s=new Array(g+1),a=0;for(i=1;i<=g;i++)s[i]=a=a+r[i-1]<<1;for(n=0;n<=e;n++){var o=t[2*n+1];0!==o&&(t[2*n]=j(s[o]++,o))}}function W(t){var e;for(e=0;e<l;e++)t.dyn_ltree[2*e]=0;for(e=0;e<f;e++)t.dyn_dtree[2*e]=0;for(e=0;e<d;e++)t.bl_tree[2*e]=0;t.dyn_ltree[2*m]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function M(t){8<t.bi_valid?U(t,t.bi_buf):0<t.bi_valid&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function H(t,e,r,i){var n=2*e,s=2*r;return t[n]<t[s]||t[n]===t[s]&&i[e]<=i[r]}function G(t,e,r){for(var i=t.heap[r],n=r<<1;n<=t.heap_len&&(n<t.heap_len&&H(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!H(e,i,t.heap[n],t.depth));)t.heap[r]=t.heap[n],r=n,n<<=1;t.heap[r]=i}function K(t,e,r){var i,n,s,a,o=0;if(0!==t.last_lit)for(;i=t.pending_buf[t.d_buf+2*o]<<8|t.pending_buf[t.d_buf+2*o+1],n=t.pending_buf[t.l_buf+o],o++,0===i?L(t,n,e):(L(t,(s=A[n])+u+1,e),0!==(a=w[s])&&P(t,n-=I[s],a),L(t,s=N(--i),r),0!==(a=k[s])&&P(t,i-=T[s],a)),o<t.last_lit;);L(t,m,e)}function Y(t,e){var r,i,n,s=e.dyn_tree,a=e.stat_desc.static_tree,o=e.stat_desc.has_stree,h=e.stat_desc.elems,u=-1;for(t.heap_len=0,t.heap_max=_,r=0;r<h;r++)0!==s[2*r]?(t.heap[++t.heap_len]=u=r,t.depth[r]=0):s[2*r+1]=0;for(;t.heap_len<2;)s[2*(n=t.heap[++t.heap_len]=u<2?++u:0)]=1,t.depth[n]=0,t.opt_len--,o&&(t.static_len-=a[2*n+1]);for(e.max_code=u,r=t.heap_len>>1;1<=r;r--)G(t,s,r);for(n=h;r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],G(t,s,1),i=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=i,s[2*n]=s[2*r]+s[2*i],t.depth[n]=(t.depth[r]>=t.depth[i]?t.depth[r]:t.depth[i])+1,s[2*r+1]=s[2*i+1]=n,t.heap[1]=n++,G(t,s,1),2<=t.heap_len;);t.heap[--t.heap_max]=t.heap[1],function(t,e){var r,i,n,s,a,o,h=e.dyn_tree,u=e.max_code,l=e.stat_desc.static_tree,f=e.stat_desc.has_stree,d=e.stat_desc.extra_bits,c=e.stat_desc.extra_base,p=e.stat_desc.max_length,m=0;for(s=0;s<=g;s++)t.bl_count[s]=0;for(h[2*t.heap[t.heap_max]+1]=0,r=t.heap_max+1;r<_;r++)p<(s=h[2*h[2*(i=t.heap[r])+1]+1]+1)&&(s=p,m++),h[2*i+1]=s,u<i||(t.bl_count[s]++,a=0,c<=i&&(a=d[i-c]),o=h[2*i],t.opt_len+=o*(s+a),f&&(t.static_len+=o*(l[2*i+1]+a)));if(0!==m){do{for(s=p-1;0===t.bl_count[s];)s--;t.bl_count[s]--,t.bl_count[s+1]+=2,t.bl_count[p]--,m-=2}while(0<m);for(s=p;0!==s;s--)for(i=t.bl_count[s];0!==i;)u<(n=t.heap[--r])||(h[2*n+1]!==s&&(t.opt_len+=(s-h[2*n+1])*h[2*n],h[2*n+1]=s),i--)}}(t,e),Z(s,u,t.bl_count)}function X(t,e,r){var i,n,s=-1,a=e[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),e[2*(r+1)+1]=65535,i=0;i<=r;i++)n=a,a=e[2*(i+1)+1],++o<h&&n===a||(o<u?t.bl_tree[2*n]+=o:0!==n?(n!==s&&t.bl_tree[2*n]++,t.bl_tree[2*b]++):o<=10?t.bl_tree[2*v]++:t.bl_tree[2*y]++,s=n,u=(o=0)===a?(h=138,3):n===a?(h=6,3):(h=7,4))}function V(t,e,r){var i,n,s=-1,a=e[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),i=0;i<=r;i++)if(n=a,a=e[2*(i+1)+1],!(++o<h&&n===a)){if(o<u)for(;L(t,n,t.bl_tree),0!=--o;);else 0!==n?(n!==s&&(L(t,n,t.bl_tree),o--),L(t,b,t.bl_tree),P(t,o-3,2)):o<=10?(L(t,v,t.bl_tree),P(t,o-3,3)):(L(t,y,t.bl_tree),P(t,o-11,7));s=n,u=(o=0)===a?(h=138,3):n===a?(h=6,3):(h=7,4)}}i(T);var q=!1;function J(t,e,r,i){P(t,(s<<1)+(i?1:0),3),function(t,e,r,i){M(t),i&&(U(t,r),U(t,~r)),n.arraySet(t.pending_buf,t.window,e,r,t.pending),t.pending+=r}(t,e,r,!0)}r._tr_init=function(t){q||(function(){var t,e,r,i,n,s=new Array(g+1);for(i=r=0;i<a-1;i++)for(I[i]=r,t=0;t<1<<w[i];t++)A[r++]=i;for(A[r-1]=i,i=n=0;i<16;i++)for(T[i]=n,t=0;t<1<<k[i];t++)E[n++]=i;for(n>>=7;i<f;i++)for(T[i]=n<<7,t=0;t<1<<k[i]-7;t++)E[256+n++]=i;for(e=0;e<=g;e++)s[e]=0;for(t=0;t<=143;)z[2*t+1]=8,t++,s[8]++;for(;t<=255;)z[2*t+1]=9,t++,s[9]++;for(;t<=279;)z[2*t+1]=7,t++,s[7]++;for(;t<=287;)z[2*t+1]=8,t++,s[8]++;for(Z(z,l+1,s),t=0;t<f;t++)C[2*t+1]=5,C[2*t]=j(t,5);O=new D(z,w,u+1,l,g),B=new D(C,k,0,f,g),R=new D(new Array(0),x,0,d,p)}(),q=!0),t.l_desc=new F(t.dyn_ltree,O),t.d_desc=new F(t.dyn_dtree,B),t.bl_desc=new F(t.bl_tree,R),t.bi_buf=0,t.bi_valid=0,W(t)},r._tr_stored_block=J,r._tr_flush_block=function(t,e,r,i){var n,s,a=0;0<t.level?(2===t.strm.data_type&&(t.strm.data_type=function(t){var e,r=4093624447;for(e=0;e<=31;e++,r>>>=1)if(1&r&&0!==t.dyn_ltree[2*e])return o;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return h;for(e=32;e<u;e++)if(0!==t.dyn_ltree[2*e])return h;return o}(t)),Y(t,t.l_desc),Y(t,t.d_desc),a=function(t){var e;for(X(t,t.dyn_ltree,t.l_desc.max_code),X(t,t.dyn_dtree,t.d_desc.max_code),Y(t,t.bl_desc),e=d-1;3<=e&&0===t.bl_tree[2*S[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}(t),n=t.opt_len+3+7>>>3,(s=t.static_len+3+7>>>3)<=n&&(n=s)):n=s=r+5,r+4<=n&&-1!==e?J(t,e,r,i):4===t.strategy||s===n?(P(t,2+(i?1:0),3),K(t,z,C)):(P(t,4+(i?1:0),3),function(t,e,r,i){var n;for(P(t,e-257,5),P(t,r-1,5),P(t,i-4,4),n=0;n<i;n++)P(t,t.bl_tree[2*S[n]+1],3);V(t,t.dyn_ltree,e-1),V(t,t.dyn_dtree,r-1)}(t,t.l_desc.max_code+1,t.d_desc.max_code+1,a+1),K(t,t.dyn_ltree,t.dyn_dtree)),W(t),i&&M(t)},r._tr_tally=function(t,e,r){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&r,t.last_lit++,0===e?t.dyn_ltree[2*r]++:(t.matches++,e--,t.dyn_ltree[2*(A[r]+u+1)]++,t.dyn_dtree[2*N(e)]++),t.last_lit===t.lit_bufsize-1},r._tr_align=function(t){P(t,2,3),L(t,m,z),function(t){16===t.bi_valid?(U(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):8<=t.bi_valid&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}(t)}},{\"../utils/common\":41}],53:[function(t,e,r){\"use strict\";e.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=\"\",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(t,e,r){\"use strict\";e.exports=\"function\"==typeof setImmediate?setImmediate:function(){var t=[].slice.apply(arguments);t.splice(1,0,0),setTimeout.apply(null,t)}},{}]},{},[10])(10)});","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};","import JSZip from \"jszip\";\nimport {IuploadfileList} from \"./ICommon\";\nimport {getBinaryContent} from \"./common/method\"\n\n\nexport class HandleZip{\n    uploadFile:File; \n    workBook:JSZip; \n    \n    constructor(file?:File){\n        // Support nodejs fs to read files\n        // if(file instanceof File){\n            this.uploadFile = file;\n        // }\n    }\n\n    unzipFile(successFunc:(file:IuploadfileList)=>void, errorFunc:(err:Error)=>void):void { \n        // var new_zip:JSZip = new JSZip();\n        JSZip.loadAsync(this.uploadFile)                                   // 1) read the Blob\n        .then(function(zip:any) {\n            let fileList:IuploadfileList = <IuploadfileList>{}, lastIndex:number = Object.keys(zip.files).length, index:number=0;\n            zip.forEach(function (relativePath:any, zipEntry:any) {  // 2) print entries\n                let fileName = zipEntry.name;\n                let fileNameArr = fileName.split(\".\");\n                let suffix = fileNameArr[fileNameArr.length-1].toLowerCase();\n                let fileType = \"string\";\n                if(suffix in {\"png\":1, \"jpeg\":1, \"jpg\":1, \"gif\":1,\"bmp\":1,\"tif\":1,\"webp\":1,}){\n                    fileType = \"base64\";\n                }\n                else if(suffix==\"emf\"){\n                    fileType = \"arraybuffer\";\n                }\n                zipEntry.async(fileType).then(function (data:string) {\n                    if(fileType==\"base64\"){\n                        data = \"data:image/\"+ suffix +\";base64,\" + data;\n                    }\n                    fileList[zipEntry.name] = data;\n                    // console.log(lastIndex, index);\n                    if(lastIndex==index+1){\n                        successFunc(fileList);\n                    }\n                    index++;\n                });\n            });\n            \n        }, function (e:Error) {\n            errorFunc(e);\n        });\n    }\n\n    unzipFileByUrl(url:string,successFunc:(file:IuploadfileList)=>void, errorFunc:(err:Error)=>void):void { \n        var new_zip:JSZip = new JSZip();\n        getBinaryContent(url, function(err:any, data:any) {\n            if(err) {\n                throw err; // or handle err\n            }\n        \n            JSZip.loadAsync(data).then(function(zip:any) {\n                let fileList:IuploadfileList = <IuploadfileList>{}, lastIndex:number = Object.keys(zip.files).length, index:number=0;\n                zip.forEach(function (relativePath:any, zipEntry:any) {  // 2) print entries\n                    let fileName = zipEntry.name;\n                    let fileNameArr = fileName.split(\".\");\n                    let suffix = fileNameArr[fileNameArr.length-1].toLowerCase();\n                    let fileType = \"string\";\n                    if(suffix in {\"png\":1, \"jpeg\":1, \"jpg\":1, \"gif\":1,\"bmp\":1,\"tif\":1,\"webp\":1,}){\n                        fileType = \"base64\";\n                    }\n                    else if(suffix==\"emf\"){\n                        fileType = \"arraybuffer\";\n                    }\n                    zipEntry.async(fileType).then(function (data:any) {\n                        if(fileType==\"base64\"){\n                            data = \"data:image/\"+ suffix +\";base64,\" + data;\n                        }\n                        fileList[zipEntry.name] = data;\n                        // console.log(lastIndex, index);\n                        if(lastIndex==index+1){\n                            successFunc(fileList);\n                        }\n                        index++;\n                    });\n                });\n                \n            }, function (e:Error) {\n                errorFunc(e);\n            });\n        });\n        \n    }\n\n    newZipFile():void { \n        var zip = new JSZip();\n        this.workBook =  zip;\n    }\n\n    //title:\"nested/hello.txt\", content:\"Hello Worldasdfasfasdfasfasfasfasfasdfas\"\n    addToZipFile(title:string,content:string):void { \n        if(this.workBook==null){\n            var zip = new JSZip();\n            this.workBook =  zip;\n        }\n        this.workBook.file(title, content);\n    }\n}","import { ILuckyFile, ILuckyFileInfo,IluckySheet,IluckySheetCelldata,IluckySheetConfig,IluckySheetCelldataValue,IluckySheetCelldataValueMerge,ILuckySheetCellFormat,IluckySheetConfigMerges,IluckySheetConfigMerge,IMapluckySheetborderInfoCellForImp,IluckySheetborderInfoCellValue,IluckySheetborderInfoCellValueStyle,IluckySheetborderInfoCellForImp,IluckySheetRowAndColumnLen,IluckySheetRowAndColumnHidden,IluckySheetSelection,IluckysheetFrozen,IluckySheetChart,IluckySheetPivotTable,IluckysheetConditionFormat,IluckysheetCalcChain,ILuckyInlineString,IluckyImage,IluckyImageBorder,IluckyImageCrop,IluckyImageDefault,IluckyImages, IluckysheetHyperlink, IluckysheetDataVerification} from \"./ILuck\";\n\n\n\nexport class LuckyFileBase implements ILuckyFile {\n    info:ILuckyFileInfo\n    sheets:IluckySheet[]\n}\n\nexport class LuckySheetBase implements IluckySheet{\n    name:string\n    color:string\n    config:IluckySheetConfig\n    index:string\n    status:string\n    order:string\n    row:number\n    column:number\n    luckysheet_select_save:IluckySheetSelection[]\n    scrollLeft:number\n    scrollTop:number\n    zoomRatio:number\n    showGridLines:string\n    defaultColWidth:number\n    defaultRowHeight:number\n\n    celldata:IluckySheetCelldata[]\n    chart:IluckySheetChart[]\n\n    isPivotTable:boolean\n    pivotTable:IluckySheetPivotTable\n\n    luckysheet_conditionformat_save:IluckysheetConditionFormat[]\n    freezen:IluckysheetFrozen\n\n    calcChain:IluckysheetCalcChain[]\n\n    images:IluckyImages\n    \n    dataVerification: IluckysheetDataVerification;\n    hyperlink: IluckysheetHyperlink\n    hide: number;\n    \n}\n\nexport class LuckyFileInfo implements ILuckyFileInfo{\n    name:string\n    creator:string\n    lastmodifiedby:string\n    createdTime:string\n    modifiedTime:string\n    company:string\n    appversion:string\n}\n\nexport class LuckySheetCelldataBase implements IluckySheetCelldata{\n    r:number\n    c:number\n    v:IluckySheetCelldataValue | string | null\n}\n\nexport class LuckySheetCelldataValue implements IluckySheetCelldataValue{\n    ct: LuckySheetCellFormat | undefined //celltype,Cell value format: text, time, etc. numfmts\n    bg: string | undefined//background,#fff000,\tfill\n    ff: string | undefined//fontfamily, fonts\n    fc: string | undefined//fontcolor fonts\n    bl: number | undefined//Bold, fonts\n    it: number | undefined//italic, fonts\n    fs: number | undefined//font size, fonts\n    cl: number | undefined//strike, 0 Regular, 1 strikes, fonts\n    un: number | undefined//underline, 0 Regular, 1 underlines, fonts\n    vt: number | undefined//Vertical alignment, 0 middle, 1 up, 2 down, alignment\n    ht: number | undefined//Horizontal alignment,0 center, 1 left, 2 right, alignment\n    mc: IluckySheetCelldataValueMerge | undefined //Merge Cells, mergeCells\n    tr: number | undefined //Text rotation,0: 0、3 Vertical text alignment\n    tb: number | undefined //Text wrap,0 truncation, 1 overflow, 2 word wrap, alignment\n    v: string | undefined //Original value, v\n    m: string | undefined //Display value, v\n    f: string | undefined //formula, f\n    rt:number | undefined //text rotation angle 0-180 alignment\n    qp:number | undefined //quotePrefix, show number as string\n}\n\n\nexport class LuckySheetCellFormat implements ILuckySheetCellFormat {\n    fa:string\n    t:string\n    s:LuckyInlineString[] | undefined\n}\n\nexport class LuckyInlineString implements ILuckyInlineString {\n    ff:string | undefined //font family\n    fc:string | undefined//font color\n    fs:number | undefined//font size\n    cl:number | undefined//strike\n    un:number | undefined//underline\n    bl:number | undefined//blod\n    it:number | undefined//italic\n    va:number | undefined//1sub and 2super and 0none\n    v:string | undefined\n}\n\nexport class LuckyConfig implements IluckySheetConfig{\n    merge:IluckySheetConfigMerges\n    borderInfo:IluckySheetborderInfoCellForImp[]\n    // _borderInfo: IMapluckySheetborderInfoCellForImp\n    rowlen:IluckySheetRowAndColumnLen\n    columnlen:IluckySheetRowAndColumnLen\n    rowhidden:IluckySheetRowAndColumnHidden\n    colhidden:IluckySheetRowAndColumnHidden\n\n    customHeight:IluckySheetRowAndColumnHidden\n    customWidth:IluckySheetRowAndColumnHidden\n}\n\nexport class LuckySheetborderInfoCellForImp implements IluckySheetborderInfoCellForImp{\n    rangeType:string\n    // cells:string[]\n    value:IluckySheetborderInfoCellValue\n}\n\nexport class LuckySheetborderInfoCellValue implements IluckySheetborderInfoCellValue{\n    row_index: number\n    col_index: number\n    l: IluckySheetborderInfoCellValueStyle\n    r: IluckySheetborderInfoCellValueStyle\n    t: IluckySheetborderInfoCellValueStyle\n    b: IluckySheetborderInfoCellValueStyle\n}\n\nexport class LuckySheetborderInfoCellValueStyle implements IluckySheetborderInfoCellValueStyle{\n    \"style\": number\n    \"color\": string\n}\n\nexport class LuckySheetConfigMerge implements IluckySheetConfigMerge{\n    r: number\n    c: number\n    rs: number\n    cs: number\n}\n\nexport class LuckysheetCalcChain implements IluckysheetCalcChain{\n    r:number\n    c:number\n    index:string | undefined\n}\n\n\nexport class LuckyImageBase implements IluckyImage{\n    border: IluckyImageBorder\n    crop: IluckyImageCrop\n    default: IluckyImageDefault\n\n    fixedLeft: number\n    fixedTop: number\n    isFixedPos: Boolean\n    originHeight: number\n    originWidth: number\n    src: string\n    type: string\n}","import { IluckySheetborderInfoCellForImp,IluckySheetCelldataValue,IluckySheetCelldataValueMerge,ILuckySheetCellFormat } from \"./ILuck\";\nimport { ReadXml, Element, IStyleCollections,getColor,getlineStringAttr } from \"./ReadXml\";\nimport {getXmlAttibute, getColumnWidthPixel, getRowHeightPixel,getcellrange, escapeCharacter, isChinese, isJapanese, isKoera,isContainMultiType} from \"../common/method\";\nimport { ST_CellType, indexedColors, OEM_CHARSET,borderTypes,fontFamilys } from \"../common/constant\"\nimport { IattributeList, stringToNum } from \"../ICommon\";\nimport { LuckySheetborderInfoCellValueStyle,LuckySheetborderInfoCellForImp,LuckySheetborderInfoCellValue,LuckySheetCelldataBase,LuckySheetCelldataValue,LuckySheetCellFormat,LuckyInlineString } from \"./LuckyBase\";\n\nexport class LuckySheetCelldata extends LuckySheetCelldataBase{\n    _borderObject:IluckySheetborderInfoCellForImp\n    _fomulaRef:string\n    _formulaSi:string\n    _formulaType:string\n\n    private sheetFile:string\n    private readXml:ReadXml\n    private cell:Element\n    private styles:IStyleCollections\n    private sharedStrings:Element[]\n    private mergeCells:Element[]\n\n    constructor(cell:Element, styles:IStyleCollections, sharedStrings:Element[], mergeCells:Element[], sheetFile:string, ReadXml:ReadXml){\n        //Private\n        super();\n        this.cell = cell;\n        this.sheetFile = sheetFile;\n        this.styles = styles;\n        this.sharedStrings = sharedStrings;\n        this.readXml = ReadXml;\n        this.mergeCells = mergeCells;\n\n        let attrList = cell.attributeList;\n        let r = attrList.r, s = attrList.s, t = attrList.t;\n        let range = getcellrange(r);\n\n        this.r = range.row[0];\n        this.c = range.column[0];\n        this.v = this.generateValue(s, t);\n\n    }\n\n    /**\n    * @param s Style index ,start 1\n    * @param t Cell type, Optional value is ST_CellType, it's found at constat.ts\n    */\n    private generateValue(s:string, t:string){\n        let v = this.cell.getInnerElements(\"v\");\n        let f = this.cell.getInnerElements(\"f\");\n\n        if(v==null){\n            v = this.cell.getInnerElements(\"t\");\n        }\n\n        let cellXfs = this.styles[\"cellXfs\"] as Element[];\n        let cellStyleXfs = this.styles[\"cellStyleXfs\"] as Element[];\n        let cellStyles = this.styles[\"cellStyles\"] as Element[];\n        let fonts = this.styles[\"fonts\"] as Element[];\n        let fills = this.styles[\"fills\"] as Element[];\n        let borders = this.styles[\"borders\"] as Element[];\n        let numfmts = this.styles[\"numfmts\"] as IattributeList;\n        let clrScheme = this.styles[\"clrScheme\"] as Element[];\n\n        let sharedStrings = this.sharedStrings;\n        let cellValue = new LuckySheetCelldataValue();\n\n        if(f!=null){\n            let formula = f[0], attrList = formula.attributeList;\n            let t = attrList.t, ref = attrList.ref, si = attrList.si;\n            let formulaValue =f[0].value;\n            if(t==\"shared\"){\n                this._fomulaRef = ref;\n                this._formulaType = t;\n                this._formulaSi = si;\n            }\n            // console.log(ref, t, si);\n            if(ref!=null || (formulaValue!=null && formulaValue.length>0)){\n                formulaValue = escapeCharacter(formulaValue);\n                cellValue.f = \"=\" + formulaValue;\n            }\n\n        }\n\n        let familyFont = null;\n        let quotePrefix;\n        if(s!=null){\n            let sNum = parseInt(s);\n            let cellXf = cellXfs[sNum];\n            let xfId = cellXf.attributeList.xfId;\n\n            let numFmtId,fontId,fillId,borderId;\n            let horizontal,vertical, wrapText, textRotation, shrinkToFit, indent,applyProtection;\n\n            if(xfId!=null){\n                let cellStyleXf = cellStyleXfs[parseInt(xfId)];\n                let attrList = cellStyleXf.attributeList;\n\n                let applyNumberFormat = attrList.applyNumberFormat;\n                let applyFont = attrList.applyFont;\n                let applyFill = attrList.applyFill;\n                let applyBorder = attrList.applyBorder;\n                let applyAlignment = attrList.applyAlignment;\n                // let applyProtection = attrList.applyProtection;\n\n                applyProtection = attrList.applyProtection;\n                quotePrefix = attrList.quotePrefix;\n\n                if(applyNumberFormat!=\"0\" && attrList.numFmtId!=null){\n                    // if(attrList.numFmtId!=\"0\"){\n                        numFmtId = attrList.numFmtId;\n                    // }\n                }\n                if(applyFont!=\"0\" && attrList.fontId!=null){\n                    fontId = attrList.fontId;\n                }\n                if(applyFill!=\"0\" && attrList.fillId!=null){\n                    fillId = attrList.fillId;\n                }\n                if(applyBorder!=\"0\" && attrList.borderId!=null){\n                    borderId = attrList.borderId;\n                }\n                if(applyAlignment!=null && applyAlignment!=\"0\"){\n                    let alignment = cellStyleXf.getInnerElements(\"alignment\");\n                    if(alignment!=null){\n                        let attrList = alignment[0].attributeList;\n                        if(attrList.horizontal!=null){\n                            horizontal = attrList.horizontal;\n                        }\n                        if(attrList.vertical!=null){\n                            vertical = attrList.vertical;\n                        }\n                        if(attrList.wrapText!=null){\n                            wrapText = attrList.wrapText;\n                        }\n                        if(attrList.textRotation!=null){\n                            textRotation = attrList.textRotation;\n                        }\n                        if(attrList.shrinkToFit!=null){\n                            shrinkToFit = attrList.shrinkToFit;\n                        }\n                        if(attrList.indent!=null){\n                            indent = attrList.indent;\n                        }\n                    }\n                }\n            }\n\n            let applyNumberFormat = cellXf.attributeList.applyNumberFormat;\n            let applyFont = cellXf.attributeList.applyFont;\n            let applyFill = cellXf.attributeList.applyFill;\n            let applyBorder = cellXf.attributeList.applyBorder;\n            let applyAlignment = cellXf.attributeList.applyAlignment;\n\n            if(cellXf.attributeList.applyProtection!=null){\n                applyProtection = cellXf.attributeList.applyProtection;\n            }\n\n            if(cellXf.attributeList.quotePrefix!=null){\n                quotePrefix = cellXf.attributeList.quotePrefix;\n            }\n\n            if(applyNumberFormat!=\"0\" && cellXf.attributeList.numFmtId!=null){\n                numFmtId = cellXf.attributeList.numFmtId;\n            }\n            if(applyFont!=\"0\"){\n                fontId = cellXf.attributeList.fontId;\n            }\n            if(applyFill!=\"0\"){\n                fillId = cellXf.attributeList.fillId;\n            }\n            if(applyBorder!=\"0\"){\n                borderId =cellXf.attributeList.borderId;\n            }\n            if(applyAlignment!=\"0\"){\n                let alignment = cellXf.getInnerElements(\"alignment\");\n                if(alignment!=null && alignment.length>0){\n                    let attrList = alignment[0].attributeList;\n                    if(attrList.horizontal!=null){\n                        horizontal = attrList.horizontal;\n                    }\n                    if(attrList.vertical!=null){\n                        vertical = attrList.vertical;\n                    }\n                    if(attrList.wrapText!=null){\n                        wrapText = attrList.wrapText;\n                    }\n                    if(attrList.textRotation!=null){\n                        textRotation = attrList.textRotation;\n                    }\n                    if(attrList.shrinkToFit!=null){\n                        shrinkToFit = attrList.shrinkToFit;\n                    }\n                    if(attrList.indent!=null){\n                        indent = attrList.indent;\n                    }\n                }\n            }\n\n\n\n            if(numFmtId!=undefined){\n                let numf = numfmts[parseInt(numFmtId)];\n                let cellFormat = new LuckySheetCellFormat();\n                cellFormat.fa = escapeCharacter(numf);\n                // console.log(numf, numFmtId, this.v);\n                cellFormat.t = t || 'd';\n                cellValue.ct = cellFormat;\n            }\n\n            if(fillId!=undefined){\n                let fillIdNum = parseInt(fillId);\n                let fill  = fills[fillIdNum];\n                // console.log(cellValue.v);\n                let bg = this.getBackgroundByFill(fill, clrScheme);\n                if(bg!=null){\n                    cellValue.bg = bg;\n                }\n            }\n\n\n            if(fontId!=undefined){\n                let fontIdNum = parseInt(fontId);\n                let font = fonts[fontIdNum];\n                if(font!=null){\n                    let sz = font.getInnerElements(\"sz\");//font size\n                    let colors = font.getInnerElements(\"color\");//font color\n                    let family = font.getInnerElements(\"name\");//font family\n                    let familyOverrides = font.getInnerElements(\"family\");//font family will be overrided by name\n                    let charset = font.getInnerElements(\"charset\");//font charset\n                    let bolds = font.getInnerElements(\"b\");//font bold\n                    let italics = font.getInnerElements(\"i\");//font italic\n                    let strikes = font.getInnerElements(\"strike\");//font italic\n                    let underlines = font.getInnerElements(\"u\");//font italic\n\n                    if(sz!=null && sz.length>0){\n                        let fs = sz[0].attributeList.val;\n                        if(fs!=null){\n                            cellValue.fs = parseInt(fs);\n                        }\n\n                    }\n\n                    if(colors!=null && colors.length>0){\n                        let color = colors[0];\n                        let fc = getColor(color, this.styles, \"t\");\n                        if(fc!=null){\n                            cellValue.fc = fc;\n                        }\n                    }\n\n\n                    if(familyOverrides!=null && familyOverrides.length>0){\n                        let val = familyOverrides[0].attributeList.val;\n                        if(val!=null){\n                            familyFont = fontFamilys[val];\n                        }\n                    }\n\n                    if(family!=null && family.length>0){\n                        let val = family[0].attributeList.val;\n                        if(val!=null){\n                            cellValue.ff = val;\n                        }\n                    }\n\n\n                    if(bolds!=null && bolds.length>0){\n                        let bold = bolds[0].attributeList.val;\n                        if(bold==\"0\"){\n                            cellValue.bl =  0;\n                        }\n                        else{\n                            cellValue.bl =  1;\n                        }\n                    }\n\n                    if(italics!=null && italics.length>0){\n                        let italic = italics[0].attributeList.val;\n                        if(italic==\"0\"){\n                            cellValue.it =  0;\n                        }\n                        else{\n                            cellValue.it =  1;\n                        }\n                    }\n\n                    if(strikes!=null && strikes.length>0){\n                        let strike = strikes[0].attributeList.val;\n                        if(strike==\"0\"){\n                            cellValue.cl =  0;\n                        }\n                        else{\n                            cellValue.cl =  1;\n                        }\n                    }\n\n                    if(underlines!=null && underlines.length>0){\n                        let underline = underlines[0].attributeList.val;\n                        if(underline==\"single\"){\n                            cellValue.un =  1;\n                        }\n                        else if(underline==\"double\"){\n                            cellValue.un =  2;\n                        }\n                        else if(underline==\"singleAccounting\"){\n                            cellValue.un =  3;\n                        }\n                        else if(underline==\"doubleAccounting\"){\n                            cellValue.un =  4;\n                        }\n                        else{\n                            cellValue.un =  0;\n                        }\n                    }\n                }\n            }\n\n            // vt: number | undefined//Vertical alignment, 0 middle, 1 up, 2 down, alignment\n            // ht: number | undefined//Horizontal alignment,0 center, 1 left, 2 right, alignment\n            // tr: number | undefined //Text rotation,0: 0、1: 45 、2: -45、3 Vertical text、4: 90 、5: -90, alignment\n            // tb: number | undefined //Text wrap,0 truncation, 1 overflow, 2 word wrap, alignment\n\n            if(horizontal!=undefined){//Horizontal alignment\n                if(horizontal==\"center\"){\n                    cellValue.ht = 0;\n                }\n                else if(horizontal==\"centerContinuous\"){\n                    cellValue.ht = 0;//luckysheet unsupport\n                }\n                else if(horizontal==\"left\"){\n                    cellValue.ht = 1;\n                }\n                else if(horizontal==\"right\"){\n                    cellValue.ht = 2;\n                }\n                else if(horizontal==\"distributed\"){\n                    cellValue.ht = 0;//luckysheet unsupport\n                }\n                else if(horizontal==\"fill\"){\n                    cellValue.ht = 1;//luckysheet unsupport\n                }\n                else if(horizontal==\"general\"){\n                    cellValue.ht = 1;//luckysheet unsupport\n                }\n                else if(horizontal==\"justify\"){\n                    cellValue.ht = 0;//luckysheet unsupport\n                }\n                else{\n                    cellValue.ht = 1;\n                }\n            }\n\n            if(vertical!=undefined){//Vertical alignment\n                if(vertical==\"bottom\"){\n                    cellValue.vt = 2;\n                }\n                else if(vertical==\"center\"){\n                    cellValue.vt = 0;\n                }\n                else if(vertical==\"distributed\"){\n                    cellValue.vt = 0;//luckysheet unsupport\n                }\n                else if(vertical==\"justify\"){\n                    cellValue.vt = 0;//luckysheet unsupport\n                }\n                else if(vertical==\"top\"){\n                    cellValue.vt = 1;\n                }\n                else{\n                    cellValue.vt = 1;\n                }\n            }\n            else {\n                //sometimes bottom style is lost after setting it in excel\n                //when vertical is undefined set it to 2.\n                cellValue.vt = 2;\n            }\n\n            if(wrapText!=undefined){\n                if(wrapText==\"1\"){\n                    cellValue.tb = 2;\n                }\n                else{\n                    cellValue.tb = 1;\n                }\n            }\n            else{\n                cellValue.tb = 1;\n            }\n\n            if(textRotation!=undefined){\n                // tr: number | undefined //Text rotation,0: 0、1: 45 、2: -45、3 Vertical text、4: 90 、5: -90, alignment\n                if(textRotation==\"255\"){\n                    cellValue.tr = 3;\n                }\n                // else if(textRotation==\"45\"){\n                //     cellValue.tr = 1;\n                // }\n                // else if(textRotation==\"90\"){\n                //     cellValue.tr = 4;\n                // }\n                // else if(textRotation==\"135\"){\n                //     cellValue.tr = 2;\n                // }\n                // else if(textRotation==\"180\"){\n                //     cellValue.tr = 5;\n                // }\n                else{\n                    cellValue.tr = 0;\n                    cellValue.rt =  parseInt(textRotation);\n                }\n\n\n            }\n\n            if(shrinkToFit!=undefined){//luckysheet unsupport\n\n            }\n\n            if(indent!=undefined){//luckysheet unsupport\n\n            }\n\n            if(borderId!=undefined){\n                let borderIdNum = parseInt(borderId);\n                let border = borders[borderIdNum];\n                // this._borderId = borderIdNum;\n\n                let borderObject = new LuckySheetborderInfoCellForImp();\n                borderObject.rangeType = \"cell\";\n                // borderObject.cells = [];\n                let borderCellValue = new LuckySheetborderInfoCellValue();\n\n                borderCellValue.row_index = this.r;\n                borderCellValue.col_index = this.c;\n\n                let lefts = border.getInnerElements(\"left\");\n                let rights = border.getInnerElements(\"right\");\n                let tops = border.getInnerElements(\"top\");\n                let bottoms = border.getInnerElements(\"bottom\");\n                let diagonals = border.getInnerElements(\"diagonal\");\n\n                let starts = border.getInnerElements(\"start\");\n                let ends = border.getInnerElements(\"end\");\n\n                let left = this.getBorderInfo(lefts);\n                let right = this.getBorderInfo(rights);\n                let top = this.getBorderInfo(tops);\n                let bottom = this.getBorderInfo(bottoms);\n                let diagonal = this.getBorderInfo(diagonals);\n\n                let start = this.getBorderInfo(starts);\n                let end = this.getBorderInfo(ends);\n\n                let isAdd = false;\n\n                if(start!=null && start.color!=null){\n                    borderCellValue.l = start;\n                    isAdd = true;\n                }\n\n                if(end!=null && end.color!=null){\n                    borderCellValue.r = end;\n                    isAdd = true;\n                }\n\n                if(left!=null && left.color!=null){\n                    borderCellValue.l = left;\n                    isAdd = true;\n                }\n\n                if(right!=null && right.color!=null){\n                    borderCellValue.r = right;\n                    isAdd = true;\n                }\n\n                if(top!=null && top.color!=null){\n                    borderCellValue.t = top;\n                    isAdd = true;\n                }\n\n                if(bottom!=null && bottom.color!=null){\n                    borderCellValue.b = bottom;\n                    isAdd = true;\n                }\n\n                if(isAdd){\n                    borderObject.value = borderCellValue;\n                    // this.config._borderInfo[borderId] = borderObject;\n                    this._borderObject = borderObject;\n                }\n            }\n\n        }\n        else{\n            cellValue.tb = 1;\n        }\n\n        if(v!=null){\n            let value =v[0].value;\n\n            if(/&#\\d+;/.test(value)){\n                value = this.htmlDecode(value);\n            }\n\n            if(t==ST_CellType[\"SharedString\"]){\n                let siIndex = parseInt(v[0].value);\n                let sharedSI = sharedStrings[siIndex];\n\n                let rFlag = sharedSI.getInnerElements(\"r\");\n                if(rFlag==null){\n                    let tFlag = sharedSI.getInnerElements(\"t\");\n                    if(tFlag!=null){\n                        let text = \"\";\n                        tFlag.forEach((t)=>{\n                            text += t.value;\n                        });\n\n                        text = escapeCharacter(text);\n\n                        //isContainMultiType(text) &&\n                        if(familyFont==\"Roman\" && text.length>0){\n                            let textArray = text.split(\"\");\n                            let preWordType:string = null, wordText=\"\", preWholef:string=null;\n                            let wholef = \"Times New Roman\";\n                            if(cellValue.ff!=null){\n                                wholef = cellValue.ff;\n                            }\n\n                            let cellFormat = cellValue.ct;\n                            if(cellFormat==null){\n                                cellFormat = new LuckySheetCellFormat();\n                            }\n\n                            if(cellFormat.s==null){\n                                cellFormat.s = [];\n                            }\n\n                            for(let i=0;i<textArray.length;i++){\n                                let w = textArray[i];\n                                let type:string = null, ff=wholef;\n\n                                if(isChinese(w)){\n                                    type = \"c\";\n                                    ff=\"宋体\";\n                                }\n                                else if(isJapanese(w)){\n                                    type = \"j\";\n                                    ff=\"Yu Gothic\";\n                                }\n                                else if(isKoera(w)){\n                                    type = \"k\";\n                                    ff=\"Malgun Gothic\";\n                                }\n                                else{\n                                    type = \"e\";\n                                }\n\n                                if((type!=preWordType && preWordType!=null) || i==textArray.length-1){\n                                    let InlineString = new LuckyInlineString();\n\n                                    InlineString.ff = preWholef;\n\n                                    if(cellValue.fc!=null){\n                                        InlineString.fc = cellValue.fc;\n                                    }\n\n                                    if(cellValue.fs!=null){\n                                        InlineString.fs = cellValue.fs;\n                                    }\n\n                                    if(cellValue.cl!=null){\n                                        InlineString.cl = cellValue.cl;\n                                    }\n\n                                    if(cellValue.un!=null){\n                                        InlineString.un = cellValue.un;\n                                    }\n\n                                    if(cellValue.bl!=null){\n                                        InlineString.bl = cellValue.bl;\n                                    }\n\n                                    if(cellValue.it!=null){\n                                        InlineString.it = cellValue.it;\n                                    }\n\n                                    if(i==textArray.length-1){\n                                        if(type==preWordType){\n                                            InlineString.ff = ff;\n                                            InlineString.v = wordText + w;\n                                        }\n                                        else{\n                                            InlineString.ff = preWholef;\n                                            InlineString.v = wordText;\n                                            cellFormat.s.push(InlineString);\n\n                                            let InlineStringLast = new LuckyInlineString();\n                                            InlineStringLast.ff = ff;\n                                            InlineStringLast.v = w;\n                                            if(cellValue.fc!=null){\n                                                InlineStringLast.fc = cellValue.fc;\n                                            }\n\n                                            if(cellValue.fs!=null){\n                                                InlineStringLast.fs = cellValue.fs;\n                                            }\n\n                                            if(cellValue.cl!=null){\n                                                InlineStringLast.cl = cellValue.cl;\n                                            }\n\n                                            if(cellValue.un!=null){\n                                                InlineStringLast.un = cellValue.un;\n                                            }\n\n                                            if(cellValue.bl!=null){\n                                                InlineStringLast.bl = cellValue.bl;\n                                            }\n\n                                            if(cellValue.it!=null){\n                                                InlineStringLast.it = cellValue.it;\n                                            }\n                                            cellFormat.s.push(InlineStringLast);\n\n                                            break;\n                                        }\n                                    }\n                                    else{\n                                        InlineString.v = wordText;\n                                    }\n\n\n                                    cellFormat.s.push(InlineString);\n\n                                    wordText = w;\n                                }\n                                else{\n                                    wordText += w;\n                                }\n\n\n                                preWordType = type;\n                                preWholef = ff;\n                            }\n\n                            cellFormat.t = \"inlineStr\";\n                            // cellFormat.s = [InlineString];\n                            cellValue.ct = cellFormat;\n                            // console.log(cellValue);\n                        }\n                        else{\n\n\n                            text = this.replaceSpecialWrap(text);\n\n                            if(text.indexOf(\"\\r\\n\")>-1 || text.indexOf(\"\\n\")>-1){\n                                let InlineString = new LuckyInlineString();\n                                InlineString.v = text;\n                                let cellFormat = cellValue.ct;\n                                if(cellFormat==null){\n                                    cellFormat = new LuckySheetCellFormat();\n                                }\n\n                                if(cellValue.ff!=null){\n                                    InlineString.ff = cellValue.ff;\n                                }\n\n                                if(cellValue.fc!=null){\n                                    InlineString.fc = cellValue.fc;\n                                }\n\n                                if(cellValue.fs!=null){\n                                    InlineString.fs = cellValue.fs;\n                                }\n\n                                if(cellValue.cl!=null){\n                                    InlineString.cl = cellValue.cl;\n                                }\n\n                                if(cellValue.un!=null){\n                                    InlineString.un = cellValue.un;\n                                }\n\n                                if(cellValue.bl!=null){\n                                    InlineString.bl = cellValue.bl;\n                                }\n\n                                if(cellValue.it!=null){\n                                    InlineString.it = cellValue.it;\n                                }\n\n                                cellFormat.t = \"inlineStr\";\n                                cellFormat.s = [InlineString];\n                                cellValue.ct = cellFormat;\n                            }\n                            else{\n                                cellValue.v = text;\n                                quotePrefix = \"1\";\n                            }\n                        }\n\n                    }\n                }\n                else{\n                    let styles:LuckyInlineString[] = [];\n                    rFlag.forEach((r)=>{\n                        let tFlag = r.getInnerElements(\"t\");\n                        let rPr = r.getInnerElements(\"rPr\");\n\n                        let InlineString = new LuckyInlineString();\n\n                        if(tFlag!=null && tFlag.length>0){\n                            let text = tFlag[0].value;\n                            text = this.replaceSpecialWrap(text);\n                            text = escapeCharacter(text);\n                            InlineString.v = text;\n                        }\n\n                        if(rPr!=null && rPr.length>0){\n                            let frpr = rPr[0];\n                            let sz = getlineStringAttr(frpr,\"sz\"), rFont=getlineStringAttr(frpr,\"rFont\"), family=getlineStringAttr(frpr,\"family\"), charset=getlineStringAttr(frpr,\"charset\"), scheme=getlineStringAttr(frpr,\"scheme\"), b=getlineStringAttr(frpr,\"b\"), i=getlineStringAttr(frpr,\"i\"), u=getlineStringAttr(frpr,\"u\"), strike=getlineStringAttr(frpr,\"strike\"), vertAlign=getlineStringAttr(frpr,\"vertAlign\"), color;\n\n\n                            let cEle = frpr.getInnerElements(\"color\");\n                            if(cEle!=null && cEle.length>0){\n                                color = getColor(cEle[0],this.styles, \"t\");\n                            }\n\n\n                            let ff;\n                            // if(family!=null){\n                            //     ff = fontFamilys[family];\n                            // }\n                            if(rFont!=null){\n                                ff = rFont;\n                            }\n                            if(ff!=null){\n                                InlineString.ff = ff;\n                            }\n                            else if(cellValue.ff!=null){\n                                InlineString.ff = cellValue.ff;\n                            }\n\n                            if(color!=null){\n                                InlineString.fc = color;\n                            }\n                            else if(cellValue.fc!=null){\n                                InlineString.fc = cellValue.fc;\n                            }\n\n                            if(sz!=null){\n                                InlineString.fs = parseInt(sz);\n                            }\n                            else if(cellValue.fs!=null){\n                                InlineString.fs = cellValue.fs;\n                            }\n\n                            if(strike!=null){\n                                InlineString.cl = parseInt(strike);\n                            }\n                            else if(cellValue.cl!=null){\n                                InlineString.cl = cellValue.cl;\n                            }\n\n                            if(u!=null){\n                                InlineString.un = parseInt(u);\n                            }\n                            else if(cellValue.un!=null){\n                                InlineString.un = cellValue.un;\n                            }\n\n                            if(b!=null){\n                                InlineString.bl = parseInt(b);\n                            }\n                            else if(cellValue.bl!=null){\n                                InlineString.bl = cellValue.bl;\n                            }\n\n                            if(i!=null){\n                                InlineString.it = parseInt(i);\n                            }\n                            else if(cellValue.it!=null){\n                                InlineString.it = cellValue.it;\n                            }\n\n                            if(vertAlign!=null){\n                                InlineString.va = parseInt(vertAlign);\n                            }\n\n\n                            // ff:string | undefined //font family\n                            // fc:string | undefined//font color\n                            // fs:number | undefined//font size\n                            // cl:number | undefined//strike\n                            // un:number | undefined//underline\n                            // bl:number | undefined//blod\n                            // it:number | undefined//italic\n                            // v:string | undefined\n                        }\n                        else{\n                            if(InlineString.ff==null && cellValue.ff!=null){\n                                InlineString.ff = cellValue.ff;\n                            }\n\n                            if(InlineString.fc==null && cellValue.fc!=null){\n                                InlineString.fc = cellValue.fc;\n                            }\n\n                            if(InlineString.fs==null && cellValue.fs!=null){\n                                InlineString.fs = cellValue.fs;\n                            }\n\n                            if(InlineString.cl==null && cellValue.cl!=null){\n                                InlineString.cl = cellValue.cl;\n                            }\n\n                            if(InlineString.un==null && cellValue.un!=null){\n                                InlineString.un = cellValue.un;\n                            }\n\n                            if(InlineString.bl==null && cellValue.bl!=null){\n                                InlineString.bl = cellValue.bl;\n                            }\n\n                            if(InlineString.it==null && cellValue.it!=null){\n                                InlineString.it = cellValue.it;\n                            }\n                        }\n\n\n                        styles.push(InlineString);\n                    });\n\n                    let cellFormat = cellValue.ct;\n                    if(cellFormat==null){\n                        cellFormat = new LuckySheetCellFormat();\n                    }\n                    cellFormat.t = \"inlineStr\";\n                    cellFormat.s = styles;\n                    cellValue.ct = cellFormat;\n                }\n            }\n            // to be confirmed\n            else if(t==ST_CellType[\"InlineString\"] && v!=null){\n                cellValue.v = \"'\"+ value;\n            }\n            else {\n                value = escapeCharacter(value);\n                cellValue.v = value;\n            }\n        }\n\n        if(quotePrefix!=null){\n            cellValue.qp = parseInt(quotePrefix);\n        }\n\n        return cellValue;\n\n    }\n\n    private replaceSpecialWrap(text:string):string{\n        text = text.replace(/_x000D_/g, \"\").replace(/&#13;&#10;/g, \"\\r\\n\").replace(/&#13;/g, \"\\r\").replace(/&#10;/g, \"\\n\");\n        return text;\n    }\n\n\n    private getBackgroundByFill(fill:Element, clrScheme:Element[]):string|null{\n        let patternFills = fill.getInnerElements(\"patternFill\");\n        if(patternFills!=null){\n            let patternFill = patternFills[0];\n            let fgColors = patternFill.getInnerElements(\"fgColor\");\n            let bgColors = patternFill.getInnerElements(\"bgColor\");\n            let fg, bg;\n            if(fgColors!=null){\n                let fgColor = fgColors[0];\n                fg = getColor(fgColor, this.styles);\n            }\n\n            if(bgColors!=null){\n                let bgColor = bgColors[0];\n                bg = getColor(bgColor, this.styles);\n            }\n            // console.log(fgColors,bgColors,clrScheme);\n            if(fg!=null){\n                return fg;\n            }\n            else if(bg!=null){\n                return bg;\n            }\n        }\n        else{\n            let gradientfills = fill.getInnerElements(\"gradientFill\");\n            if(gradientfills!=null){\n                //graient color fill handler\n\n                return null;\n            }\n        }\n    }\n\n    private getBorderInfo(borders:Element[]):LuckySheetborderInfoCellValueStyle{\n        if(borders==null){\n            return null;\n        }\n\n        let border = borders[0], attrList = border.attributeList;\n        let clrScheme = this.styles[\"clrScheme\"] as Element[];\n        let style:string = attrList.style;\n        if(style==null || style==\"none\"){\n            return null;\n        }\n\n        let colors = border.getInnerElements(\"color\");\n        let colorRet = \"#000000\";\n        if(colors!=null){\n            let color = colors[0];\n            colorRet = getColor(color, this.styles, \"b\");\n            if(colorRet==null){\n                colorRet = \"#000000\";\n            }\n        }\n\n        let ret = new LuckySheetborderInfoCellValueStyle();\n        ret.style = borderTypes[style];\n        ret.color = colorRet;\n\n        return ret;\n    }\n\n    private htmlDecode (str:string):string {\n        return str.replace(/&#(x)?([^&]{1,5});/g,function($,$1,$2) {\n            return String.fromCharCode(parseInt($2 , $1 ? 16:10));\n        });\n    };\n\n}\n\n","﻿import { ILuckyFile,IluckySheetRowAndColumnHidden,IluckySheetRowAndColumnLen} from \"./ILuck\";\nimport { LuckySheet} from \"./LuckySheet\";\nimport {IuploadfileList, IattributeList} from \"../ICommon\";\nimport {workBookFile, coreFile, appFile, stylesFile, sharedStringsFile,numFmtDefault,theme1File,calcChainFile,workbookRels, numFmtDefaultMap} from \"../common/constant\";\nimport { ReadXml,IStyleCollections,Element } from \"./ReadXml\";\nimport {getXmlAttibute} from \"../common/method\";\nimport { LuckyFileBase,LuckyFileInfo,LuckySheetBase,LuckySheetCelldataBase,LuckySheetCelldataValue,LuckySheetCellFormat } from \"./LuckyBase\";\nimport {ImageList} from \"./LuckyImage\";\n\nexport class LuckyFile extends LuckyFileBase {\n\n    private files:IuploadfileList\n    private sheetNameList:IattributeList\n    private readXml:ReadXml\n    private fileName:string\n    private styles:IStyleCollections\n    private sharedStrings:Element[]\n    private calcChain:Element[]\n    private imageList:ImageList\n\n    constructor(files:IuploadfileList, fileName:string) {\n        super();\n        this.files = files;\n        this.fileName = fileName;\n        this.readXml = new ReadXml(files);\n        this.getSheetNameList();\n\n        this.sharedStrings = this.readXml.getElementsByTagName(\"sst/si\", sharedStringsFile);\n        this.calcChain = this.readXml.getElementsByTagName(\"calcChain/c\", calcChainFile);\n        this.styles = {};\n        this.styles[\"cellXfs\"] =  this.readXml.getElementsByTagName(\"cellXfs/xf\", stylesFile);\n        this.styles[\"cellStyleXfs\"] =  this.readXml.getElementsByTagName(\"cellStyleXfs/xf\", stylesFile);\n        this.styles[\"cellStyles\"] =  this.readXml.getElementsByTagName(\"cellStyles/cellStyle\", stylesFile);\n        this.styles[\"fonts\"] =  this.readXml.getElementsByTagName(\"fonts/font\", stylesFile);\n        this.styles[\"fills\"] =  this.readXml.getElementsByTagName(\"fills/fill\", stylesFile);\n        this.styles[\"borders\"] =  this.readXml.getElementsByTagName(\"borders/border\", stylesFile);\n        this.styles[\"clrScheme\"] =  this.readXml.getElementsByTagName(\"a:clrScheme/a:dk1|a:lt1|a:dk2|a:lt2|a:accent1|a:accent2|a:accent3|a:accent4|a:accent5|a:accent6|a:hlink|a:folHlink\", theme1File);\n        this.styles[\"indexedColors\"] =  this.readXml.getElementsByTagName(\"colors/indexedColors/rgbColor\", stylesFile);\n        this.styles[\"mruColors\"] =  this.readXml.getElementsByTagName(\"colors/mruColors/color\", stylesFile);\n\n        this.imageList = new ImageList(files);\n\n        let numfmts =  this.readXml.getElementsByTagName(\"numFmt/numFmt\", stylesFile);\n        let numFmtDefaultC = JSON.parse(JSON.stringify(numFmtDefault));\n        for(let i=0;i<numfmts.length;i++){\n            let attrList = numfmts[i].attributeList;\n            let numfmtid = getXmlAttibute(attrList, \"numFmtId\", \"49\");\n            let formatcode = getXmlAttibute(attrList, \"formatCode\", \"@\");\n            // console.log(numfmtid, formatcode);\n            if(!(numfmtid in numFmtDefault)){\n                numFmtDefaultC[numfmtid] = numFmtDefaultMap[formatcode] || formatcode;\n            }\n        }\n\n        // console.log(JSON.stringify(numFmtDefaultC), numfmts);\n        this.styles[\"numfmts\"] =  numFmtDefaultC;\n    }\n\n    /**\n    * @return All sheet name of workbook\n    */\n    private getSheetNameList(){\n        let workbookRelList = this.readXml.getElementsByTagName(\"Relationships/Relationship\", workbookRels);\n        if(workbookRelList==null){\n            return;\n        }\n\n        let regex = new RegExp(\"worksheets/[^/]*?.xml\");\n        let sheetNames:IattributeList = {};\n        for(let i=0;i<workbookRelList.length;i++){\n            let rel = workbookRelList[i], attrList = rel.attributeList;\n            let id = attrList[\"Id\"], target = attrList[\"Target\"];\n            if(regex.test(target)){\n                if(target.indexOf('/xl') === 0){\n                    sheetNames[id] =   target.substr(1);\n                }else{\n                    sheetNames[id] =   \"xl/\" + target;\n                }\n            }\n\n        }\n\n        this.sheetNameList = sheetNames;\n    }\n\n    /**\n    * @param sheetName WorkSheet'name\n    * @return sheet file name and path in zip\n    */\n   private getSheetFileBysheetId(sheetId:string){\n        // for(let i=0;i<this.sheetNameList.length;i++){\n        //     let sheetFileName = this.sheetNameList[i];\n        //     if(sheetFileName.indexOf(\"sheet\"+sheetId)>-1){\n        //         return sheetFileName;\n        //     }\n        // }\n        return this.sheetNameList[sheetId];\n    }\n\n    /**\n    * @return workBook information\n    */\n    getWorkBookInfo(){\n        let Company = this.readXml.getElementsByTagName(\"Company\", appFile);\n        let AppVersion = this.readXml.getElementsByTagName(\"AppVersion\", appFile);\n        let creator = this.readXml.getElementsByTagName(\"dc:creator\", coreFile);\n        let lastModifiedBy = this.readXml.getElementsByTagName(\"cp:lastModifiedBy\", coreFile);\n        let created = this.readXml.getElementsByTagName(\"dcterms:created\", coreFile);\n        let modified = this.readXml.getElementsByTagName(\"dcterms:modified\", coreFile);\n        this.info = new LuckyFileInfo();\n        this.info.name = this.fileName;\n        this.info.creator = creator.length>0?creator[0].value:\"\";\n        this.info.lastmodifiedby = lastModifiedBy.length>0?lastModifiedBy[0].value:\"\";\n        this.info.createdTime = created.length>0?created[0].value:\"\";\n        this.info.modifiedTime = modified.length>0?modified[0].value:\"\";\n        this.info.company = Company.length>0?Company[0].value:\"\";\n        this.info.appversion = AppVersion.length>0?AppVersion[0].value:\"\";\n    }\n\n    /**\n    * @return All sheet , include whole information\n    */\n    getSheetsFull(isInitialCell:boolean=true){\n        let sheets = this.readXml.getElementsByTagName(\"sheets/sheet\", workBookFile);\n        let sheetList:IattributeList = {};\n        for(let key in sheets){\n            let sheet = sheets[key];\n            sheetList[sheet.attributeList.name] = sheet.attributeList[\"sheetId\"];\n        }\n        this.sheets = [];\n        let order = 0;\n        for(let key in sheets){\n            let sheet = sheets[key];\n            let sheetName = sheet.attributeList.name;\n            let sheetId = sheet.attributeList[\"sheetId\"];\n            let rid = sheet.attributeList[\"r:id\"];\n            let sheetFile = this.getSheetFileBysheetId(rid);\n            let hide = sheet.attributeList.state === \"hidden\" ? 1 : 0;\n\n            let drawing = this.readXml.getElementsByTagName(\"worksheet/drawing\", sheetFile), drawingFile, drawingRelsFile;\n            if(drawing!=null && drawing.length>0){\n                let attrList = drawing[0].attributeList;\n                let rid = getXmlAttibute(attrList, \"r:id\", null);\n                if(rid!=null){\n                    drawingFile = this.getDrawingFile(rid, sheetFile);\n                    drawingRelsFile = this.getDrawingRelsFile(drawingFile);\n                }\n            }\n\n            if(sheetFile!=null){\n                let sheet = new LuckySheet(sheetName, sheetId, order, isInitialCell,\n                    {\n                        sheetFile:sheetFile,\n                        readXml:this.readXml,\n                        sheetList:sheetList,\n                        styles:this.styles,\n                        sharedStrings:this.sharedStrings,\n                        calcChain:this.calcChain,\n                        imageList:this.imageList,\n                        drawingFile:drawingFile,\n                        drawingRelsFile: drawingRelsFile,\n                        hide: hide,\n                    }\n                )\n                this.columnWidthSet = [];\n                this.rowHeightSet = [];\n\n                this.imagePositionCaculation(sheet);\n\n                this.sheets.push(sheet);\n                order++;\n            }\n        }\n    }\n\n    private columnWidthSet:number[] = [];\n    private rowHeightSet:number[] = [];\n\n    private extendArray(index:number, sets:number[],def:number, hidden:IluckySheetRowAndColumnHidden, lens:IluckySheetRowAndColumnLen){\n        if(index<sets.length){\n            return;\n        }\n\n        let startIndex = sets.length, endIndex = index;\n        let allGap = 0;\n        if(startIndex>0){\n            allGap = sets[startIndex-1];\n        }\n        // else{\n        //     sets.push(0);\n        // }\n        for(let i=startIndex;i<=endIndex;i++){\n            let gap = def, istring  = i.toString();\n            if(istring in hidden){\n                gap = 0;\n            }\n            else if(istring in lens){\n                gap = lens[istring];\n            }\n\n            allGap += Math.round(gap + 1);\n\n            sets.push(allGap);\n        }\n    }\n\n    private imagePositionCaculation(sheet:LuckySheet){\n        let images = sheet.images, defaultColWidth = sheet.defaultColWidth, defaultRowHeight = sheet.defaultRowHeight;\n        let colhidden = {};\n        if(sheet.config.colhidden){\n            colhidden = sheet.config.colhidden;\n        }\n\n        let columnlen = {};\n        if(sheet.config.columnlen){\n            columnlen = sheet.config.columnlen;\n        }\n\n        let rowhidden = {};\n        if(sheet.config.rowhidden){\n            rowhidden = sheet.config.rowhidden;\n        }\n\n        let rowlen = {};\n        if(sheet.config.rowlen){\n            rowlen = sheet.config.rowlen;\n        }\n\n        for(let key in images){\n            let imageObject:any = images[key];//Image, luckyImage\n            let fromCol = imageObject.fromCol;\n            let fromColOff = imageObject.fromColOff;\n            let fromRow = imageObject.fromRow;\n            let fromRowOff = imageObject.fromRowOff;\n\n            let toCol = imageObject.toCol;\n            let toColOff = imageObject.toColOff;\n            let toRow = imageObject.toRow;\n            let toRowOff = imageObject.toRowOff;\n\n            let x_n =0,y_n = 0;\n            let cx_n = 0, cy_n = 0;\n\n            if(fromCol>=this.columnWidthSet.length){\n                this.extendArray(fromCol, this.columnWidthSet, defaultColWidth, colhidden, columnlen);\n            }\n            if(fromCol==0){\n                x_n = 0;\n            }\n            else{\n                x_n = this.columnWidthSet[fromCol-1];\n            }\n            x_n = x_n + fromColOff;\n\n            if(fromRow>=this.rowHeightSet.length){\n                this.extendArray(fromRow, this.rowHeightSet, defaultRowHeight, rowhidden, rowlen);\n            }\n            if(fromRow==0){\n                y_n = 0;\n            }\n            else{\n                y_n = this.rowHeightSet[fromRow-1];\n            }\n            y_n = y_n + fromRowOff;\n\n\n            if(toCol>=this.columnWidthSet.length){\n                this.extendArray(toCol, this.columnWidthSet, defaultColWidth, colhidden, columnlen);\n            }\n            if(toCol==0){\n                cx_n = 0;\n            }\n            else{\n                cx_n = this.columnWidthSet[toCol-1];\n            }\n            cx_n = cx_n + toColOff- x_n;\n\n            if(toRow>=this.rowHeightSet.length){\n                this.extendArray(toRow, this.rowHeightSet, defaultRowHeight, rowhidden, rowlen);\n            }\n            if(toRow==0){\n                cy_n = 0;\n            }\n            else{\n                cy_n = this.rowHeightSet[toRow-1];\n            }\n\n            cy_n = cy_n + toRowOff - y_n;\n\n            console.log(defaultColWidth, colhidden , columnlen);\n            console.log(fromCol, this.columnWidthSet[fromCol] , fromColOff);\n            console.log(toCol, this.columnWidthSet[toCol] , toColOff, JSON.stringify(this.columnWidthSet));\n\n            imageObject.originWidth = cx_n;\n            imageObject.originHeight = cy_n;\n\n            imageObject.crop.height = cy_n;\n            imageObject.crop.width = cx_n;\n\n            imageObject.default.height = cy_n;\n            imageObject.default.left = x_n;\n            imageObject.default.top = y_n;\n            imageObject.default.width = cx_n;\n        }\n\n        console.log(this.columnWidthSet, this.rowHeightSet);\n    }\n\n    /**\n    * @return drawing file string\n    */\n   private getDrawingFile(rid:string, sheetFile:string):string{\n        let sheetRelsPath = \"xl/worksheets/_rels/\";\n        let sheetFileArr = sheetFile.split(\"/\");\n        let sheetRelsName = sheetFileArr[sheetFileArr.length-1];\n\n        let sheetRelsFile = sheetRelsPath + sheetRelsName + \".rels\";\n\n        let drawing = this.readXml.getElementsByTagName(\"Relationships/Relationship\", sheetRelsFile);\n        if(drawing.length>0){\n            for(let i=0;i<drawing.length;i++){\n                let relationship = drawing[i];\n                let attrList = relationship.attributeList;\n                let relationshipId = getXmlAttibute(attrList, \"Id\", null);\n                if(relationshipId==rid){\n                    let target = getXmlAttibute(attrList, \"Target\", null);\n                    if(target!=null){\n                        return target.replace(/\\.\\.\\//g, \"\");\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n    private getDrawingRelsFile(drawingFile:string):string{\n        let drawingRelsPath = \"xl/drawings/_rels/\";\n        let drawingFileArr = drawingFile.split(\"/\");\n        let drawingRelsName = drawingFileArr[drawingFileArr.length-1];\n\n        let drawingRelsFile = drawingRelsPath + drawingRelsName + \".rels\";\n\n        return drawingRelsFile;\n    }\n\n    /**\n    * @return All sheet base information widthout cell and config\n    */\n    getSheetsWithoutCell(){\n        this.getSheetsFull(false);\n    }\n\n    /**\n    * @return LuckySheet file json\n    */\n    Parse():string{\n        // let xml = this.readXml;\n        // for(let key in this.sheetNameList){\n        //     let sheetName=this.sheetNameList[key];\n        //     let sheetColumns = xml.getElementsByTagName(\"row/c/f\", sheetName);\n        //     console.log(sheetColumns);\n        // }\n        // return \"\";\n\n        this.getWorkBookInfo();\n        this.getSheetsFull();\n\n        // for(let i=0;i<this.sheets.length;i++){\n        //     let sheet = this.sheets[i];\n        //     let _borderInfo = sheet.config._borderInfo;\n        //     if(_borderInfo==null){\n        //         continue;\n        //     }\n        //     let _borderInfoKeys = Object.keys(_borderInfo);\n        //     _borderInfoKeys.sort();\n        //     for(let a=0;a<_borderInfoKeys.length;a++){\n        //         let key = parseInt(_borderInfoKeys[a]);\n        //         let b = _borderInfo[key];\n        //         if(b.cells.length==0){\n        //             continue;\n        //         }\n        //         if(sheet.config.borderInfo==null){\n        //             sheet.config.borderInfo = [];\n        //         }\n        //         sheet.config.borderInfo.push(b);\n        //     }\n        // }\n\n        return this.toJsonString(this);\n    }\n\n    private toJsonString(file:ILuckyFile):string{\n        let LuckyOutPutFile = new LuckyFileBase();\n        LuckyOutPutFile.info = file.info;\n        LuckyOutPutFile.sheets = [];\n\n        file.sheets.forEach((sheet)=>{\n            let sheetout = new LuckySheetBase();\n            //let attrName = [\"name\",\"color\",\"config\",\"index\",\"status\",\"order\",\"row\",\"column\",\"luckysheet_select_save\",\"scrollLeft\",\"scrollTop\",\"zoomRatio\",\"showGridLines\",\"defaultColWidth\",\"defaultRowHeight\",\"celldata\",\"chart\",\"isPivotTable\",\"pivotTable\",\"luckysheet_conditionformat_save\",\"freezen\",\"calcChain\"];\n\n            if(sheet.name!=null){\n                sheetout.name = sheet.name;\n            }\n\n            if(sheet.color!=null){\n                sheetout.color = sheet.color;\n            }\n\n            if(sheet.config!=null){\n                sheetout.config = sheet.config;\n                // if(sheetout.config._borderInfo!=null){\n                //     delete sheetout.config._borderInfo;\n                // }\n            }\n\n            if(sheet.index!=null){\n                sheetout.index = sheet.index;\n            }\n\n            if(sheet.status!=null){\n                sheetout.status = sheet.status;\n            }\n\n            if(sheet.order!=null){\n                sheetout.order = sheet.order;\n            }\n\n            if(sheet.row!=null){\n                sheetout.row = sheet.row;\n            }\n\n            if(sheet.column!=null){\n                sheetout.column = sheet.column;\n            }\n\n            if(sheet.luckysheet_select_save!=null){\n                sheetout.luckysheet_select_save = sheet.luckysheet_select_save;\n            }\n\n            if(sheet.scrollLeft!=null){\n                sheetout.scrollLeft = sheet.scrollLeft;\n            }\n\n            if(sheet.scrollTop!=null){\n                sheetout.scrollTop = sheet.scrollTop;\n            }\n\n            if(sheet.zoomRatio!=null){\n                sheetout.zoomRatio = sheet.zoomRatio;\n            }\n\n            if(sheet.showGridLines!=null){\n                sheetout.showGridLines = sheet.showGridLines;\n            }\n\n            if(sheet.defaultColWidth!=null){\n                sheetout.defaultColWidth = sheet.defaultColWidth;\n            }\n\n            if(sheet.defaultRowHeight!=null){\n                sheetout.defaultRowHeight = sheet.defaultRowHeight;\n            }\n\n            if(sheet.celldata!=null){\n                // sheetout.celldata = sheet.celldata;\n                sheetout.celldata = [];\n                sheet.celldata.forEach((cell)=>{\n                    let cellout = new LuckySheetCelldataBase();\n                    cellout.r = cell.r;\n                    cellout.c = cell.c;\n                    cellout.v = cell.v;\n                    sheetout.celldata.push(cellout);\n                });\n            }\n\n            if(sheet.chart!=null){\n                sheetout.chart = sheet.chart;\n            }\n\n            if(sheet.isPivotTable!=null){\n                sheetout.isPivotTable = sheet.isPivotTable;\n            }\n\n            if(sheet.pivotTable!=null){\n                sheetout.pivotTable = sheet.pivotTable;\n            }\n\n            if(sheet.luckysheet_conditionformat_save!=null){\n                sheetout.luckysheet_conditionformat_save = sheet.luckysheet_conditionformat_save;\n            }\n\n            if(sheet.freezen!=null){\n                sheetout.freezen = sheet.freezen;\n            }\n\n            if(sheet.calcChain!=null){\n                sheetout.calcChain = sheet.calcChain;\n            }\n\n            if(sheet.images!=null){\n                sheetout.images = sheet.images;\n            }\n          \n            if (sheet.dataVerification != null){\n              sheetout.dataVerification = sheet.dataVerification;\n            }\n          \n            if (sheet.hyperlink != null){\n                sheetout.hyperlink = sheet.hyperlink;\n            }\n          \n            if (sheet.hide != null) {\n              sheetout.hide = sheet.hide;\n            }\n            \n            LuckyOutPutFile.sheets.push(sheetout);\n        });\n\n        return JSON.stringify(LuckyOutPutFile);\n    }\n\n\n}\n","import { IluckyImage } from \"./ILuck\";\nimport {LuckySheetCelldata} from \"./LuckyCell\";\nimport { IuploadfileList, IattributeList } from \"../ICommon\";\nimport {getXmlAttibute, getColumnWidthPixel, fromulaRef,getRowHeightPixel,getcellrange} from \"../common/method\";\nimport {borderTypes} from \"../common/constant\";\nimport { ReadXml, IStyleCollections, Element,getColor } from \"./ReadXml\";\nimport { LuckyImageBase } from \"./LuckyBase\";\nimport { UDOC,FromEMF,ToContext2D  } from \"../common/emf\";\n\n\nexport class ImageList {\n    private images:IattributeList\n    constructor(files:IuploadfileList) {\n        if(files==null){\n            return;\n        }\n        this.images = {};\n        for(let fileKey in files){\n            // let reg = new RegExp(\"xl/media/image1.png\", \"g\");\n            if(fileKey.indexOf(\"xl/media/\")>-1){\n                let fileNameArr = fileKey.split(\".\");\n                let suffix = fileNameArr[fileNameArr.length-1].toLowerCase();\n                if(suffix in {\"png\":1, \"jpeg\":1, \"jpg\":1, \"gif\":1,\"bmp\":1,\"tif\":1,\"webp\":1,\"emf\":1}){\n                    if(suffix==\"emf\"){\n                        var pNum  = 0;  // number of the page, that you want to render\n                        var scale = 1;  // the scale of the document\n                        var wrt = new ToContext2D(pNum, scale);\n                        var inp, out, stt;\n                        FromEMF.K = [];\n                        inp = FromEMF.C;   out = FromEMF.K;   stt=4;\n                        for(var p in inp) out[inp[p]] = p.slice(stt);\n                        FromEMF.Parse(files[fileKey], wrt);\n                        this.images[fileKey] = wrt.canvas.toDataURL(\"image/png\");\n                    }\n                    else{\n                        this.images[fileKey] = files[fileKey];\n                    }\n                    \n                }\n            }\n        }\n    }\n\n    getImageByName(pathName:string):Image{\n        if(pathName in this.images){\n            let base64 = this.images[pathName];\n            return new Image(pathName, base64);\n        }\n        return null;\n    }\n}\n\n\nclass Image extends LuckyImageBase {\n\n    fromCol:number\n    fromColOff:number\n    fromRow:number\n    fromRowOff:number\n\n    toCol:number\n    toColOff:number\n    toRow:number\n    toRowOff:number\n\n    constructor(pathName:string, base64:string) {\n        super();\n        this.src = base64;\n    }\n\n    setDefault(){\n\n    }\n}","﻿import { IluckyImageBorder,IluckyImageCrop,IluckyImageDefault,IluckyImages,IluckySheetCelldata,IluckySheetCelldataValue,IMapluckySheetborderInfoCellForImp,IluckySheetborderInfoCellValue,IluckySheetborderInfoCellValueStyle,IFormulaSI,IluckySheetRowAndColumnLen,IluckySheetRowAndColumnHidden,IluckySheetSelection,IcellOtherInfo,IformulaList,IformulaListItem, IluckysheetHyperlink, IluckysheetHyperlinkType, IluckysheetDataVerification} from \"./ILuck\";\nimport {LuckySheetCelldata} from \"./LuckyCell\";\nimport { IattributeList } from \"../ICommon\";\nimport {getXmlAttibute, getColumnWidthPixel, fromulaRef,getRowHeightPixel,getcellrange,generateRandomIndex,getPxByEMUs, getMultiSequenceToNum, getTransR1C1ToSequence, getPeelOffX14, getMultiFormulaValue} from \"../common/method\";\nimport {borderTypes, COMMON_TYPE2, DATA_VERIFICATION_MAP, DATA_VERIFICATION_TYPE2_MAP, worksheetFilePath} from \"../common/constant\";\nimport { ReadXml, IStyleCollections, Element,getColor } from \"./ReadXml\";\nimport { LuckyFileBase,LuckySheetBase,LuckyConfig,LuckySheetborderInfoCellForImp,LuckySheetborderInfoCellValue,LuckysheetCalcChain,LuckySheetConfigMerge } from \"./LuckyBase\";\nimport {ImageList} from \"./LuckyImage\";\nimport dayjs from \"dayjs\";\n\nexport class LuckySheet extends LuckySheetBase {\n\n    private readXml:ReadXml\n    private sheetFile:string\n    private isInitialCell:boolean\n    private styles:IStyleCollections\n    private sharedStrings:Element[]\n    private mergeCells:Element[]\n    private calcChainEles:Element[]\n    private sheetList:IattributeList\n\n    private imageList:ImageList\n\n    private formulaRefList:IFormulaSI\n\n    constructor(sheetName:string, sheetId:string, sheetOrder:number,isInitialCell:boolean=false, allFileOption:any){\n        //Private\n        super();\n        this.isInitialCell = isInitialCell;\n\n        this.readXml = allFileOption.readXml;\n        this.sheetFile = allFileOption.sheetFile;\n        this.styles = allFileOption.styles;\n        this.sharedStrings = allFileOption.sharedStrings;\n        this.calcChainEles = allFileOption.calcChain;\n        this.sheetList = allFileOption.sheetList;\n        this.imageList = allFileOption.imageList;\n        this.hide = allFileOption.hide;\n\n        //Output\n        this.name = sheetName;\n        this.index = sheetId;\n        this.order = sheetOrder.toString();\n        this.config = new LuckyConfig();\n        this.celldata = [];\n        this.mergeCells = this.readXml.getElementsByTagName(\"mergeCells/mergeCell\", this.sheetFile);\n        let clrScheme = this.styles[\"clrScheme\"] as Element[];\n        let sheetView = this.readXml.getElementsByTagName(\"sheetViews/sheetView\", this.sheetFile);\n        let showGridLines = \"1\", tabSelected=\"0\", zoomScale = \"100\", activeCell = \"A1\";\n        if(sheetView.length>0){\n            let attrList = sheetView[0].attributeList;\n            showGridLines = getXmlAttibute(attrList, \"showGridLines\", \"1\");\n            tabSelected = getXmlAttibute(attrList, \"tabSelected\", \"0\");\n            zoomScale = getXmlAttibute(attrList, \"zoomScale\", \"100\");\n            // let colorId = getXmlAttibute(attrList, \"colorId\", \"0\");\n            let selections = sheetView[0].getInnerElements(\"selection\");\n            if(selections!=null && selections.length>0){\n                activeCell = getXmlAttibute(selections[0].attributeList, \"activeCell\", \"A1\");\n                let range:IluckySheetSelection = getcellrange(activeCell, this.sheetList, sheetId);\n                this.luckysheet_select_save = [];\n                this.luckysheet_select_save.push(range);\n            }\n        }\n        this.showGridLines = showGridLines;\n        this.status = tabSelected;\n        this.zoomRatio = parseInt(zoomScale)/100;\n\n        let tabColors = this.readXml.getElementsByTagName(\"sheetPr/tabColor\", this.sheetFile);\n        if(tabColors!=null && tabColors.length>0){\n            let tabColor = tabColors[0], attrList = tabColor.attributeList;\n            // if(attrList.rgb!=null){\n                let tc = getColor(tabColor, this.styles, \"b\");\n                this.color = tc;\n            // }\n        }\n\n        let sheetFormatPr = this.readXml.getElementsByTagName(\"sheetFormatPr\", this.sheetFile);\n        let defaultColWidth, defaultRowHeight;\n        if(sheetFormatPr.length>0){\n            let attrList = sheetFormatPr[0].attributeList;\n            defaultColWidth = getXmlAttibute(attrList, \"defaultColWidth\", \"9.21\");\n            defaultRowHeight = getXmlAttibute(attrList, \"defaultRowHeight\", \"19\");\n        }\n\n        this.defaultColWidth = getColumnWidthPixel(parseFloat(defaultColWidth));\n        this.defaultRowHeight = getRowHeightPixel(parseFloat(defaultRowHeight));\n\n\n        this.generateConfigColumnLenAndHidden();\n        let cellOtherInfo:IcellOtherInfo =  this.generateConfigRowLenAndHiddenAddCell();\n\n        if(this.formulaRefList!=null){\n            for(let key in this.formulaRefList){\n                let funclist = this.formulaRefList[key];\n                let mainFunc = funclist[\"mainRef\"], mainCellValue = mainFunc.cellValue;\n                let formulaTxt = mainFunc.fv;\n                let mainR = mainCellValue.r, mainC = mainCellValue.c;\n                // let refRange = getcellrange(ref);\n                for(let name in funclist){\n                    if(name == \"mainRef\"){\n                        continue;\n                    }\n\n                    let funcValue = funclist[name], cellValue = funcValue.cellValue;\n                    if(cellValue==null){\n                        continue;\n                    }\n                    let r = cellValue.r, c = cellValue.c;\n\n                    let func = formulaTxt;\n                    let offsetRow = r - mainR, offsetCol = c - mainC;\n\n                    \n                    if(offsetRow > 0){\n                        func = \"=\" + fromulaRef.functionCopy(func, \"down\", offsetRow);\n                    }\n                    else if(offsetRow < 0){\n                        func = \"=\" + fromulaRef.functionCopy(func, \"up\", Math.abs(offsetRow));\n                    }\n\n                    if(offsetCol > 0){\n                        func = \"=\" + fromulaRef.functionCopy(func, \"right\", offsetCol);\n                    }\n                    else if(offsetCol < 0){\n                        func = \"=\" + fromulaRef.functionCopy(func, \"left\", Math.abs(offsetCol));\n                    }\n\n                    // console.log(offsetRow, offsetCol, func);\n\n                    (cellValue.v as IluckySheetCelldataValue ).f = func;\n                    \n                }\n            }\n        }\n\n\n        if(this.calcChain==null){\n            this.calcChain = [];\n        }\n\n        let formulaListExist:IformulaList={};\n        for(let c=0;c<this.calcChainEles.length;c++){\n            let calcChainEle = this.calcChainEles[c], attrList = calcChainEle.attributeList;\n            if(attrList.i!=sheetId){\n                continue;\n            }\n\n            let r = attrList.r , i = attrList.i, l = attrList.l, s = attrList.s, a = attrList.a, t = attrList.t;\n\n            let range = getcellrange(r);\n            let chain = new LuckysheetCalcChain();\n            chain.r = range.row[0];\n            chain.c = range.column[0];\n            chain.index = this.index;\n            this.calcChain.push(chain);\n            formulaListExist[\"r\"+r+\"c\"+c] = null;\n        }\n\n        //There may be formulas that do not appear in calcChain\n        for(let key in cellOtherInfo.formulaList){\n            if(!(key in formulaListExist)){\n                let formulaListItem = cellOtherInfo.formulaList[key];\n                let chain = new LuckysheetCalcChain();\n                chain.r = formulaListItem.r;\n                chain.c = formulaListItem.c;\n                chain.index = this.index;\n                this.calcChain.push(chain);\n            }\n        }\n      \n        // dataVerification config\n        this.dataVerification = this.generateConfigDataValidations();\n\n        // hyperlink config\n        this.hyperlink = this.generateConfigHyperlinks();\n      \n        // sheet hide\n        this.hide = this.hide;\n\n        if(this.mergeCells!=null){\n            for(let i=0;i<this.mergeCells.length;i++){\n                let merge = this.mergeCells[i], attrList = merge.attributeList;\n                let ref = attrList.ref;\n                if(ref==null){\n                    continue;\n                }\n                let range = getcellrange(ref, this.sheetList, sheetId);\n                let mergeValue = new LuckySheetConfigMerge();\n                mergeValue.r = range.row[0];\n                mergeValue.c = range.column[0];\n                mergeValue.rs = range.row[1]-range.row[0]+1;\n                mergeValue.cs = range.column[1]-range.column[0]+1;\n                if(this.config.merge==null){\n                    this.config.merge = {};\n                }\n                this.config.merge[range.row[0] + \"_\" + range.column[0]] = mergeValue;\n            }\n        }\n\n        let drawingFile = allFileOption.drawingFile, drawingRelsFile = allFileOption.drawingRelsFile;\n        if(drawingFile!=null && drawingRelsFile!=null){\n            let twoCellAnchors = this.readXml.getElementsByTagName(\"xdr:twoCellAnchor\", drawingFile);\n\n            if(twoCellAnchors!=null && twoCellAnchors.length>0){\n                for(let i=0;i<twoCellAnchors.length;i++){\n                    let twoCellAnchor = twoCellAnchors[i];\n                    let editAs = getXmlAttibute(twoCellAnchor.attributeList, \"editAs\", \"twoCell\");\n\n                    let xdrFroms = twoCellAnchor.getInnerElements(\"xdr:from\"), xdrTos = twoCellAnchor.getInnerElements(\"xdr:to\");\n\n                    let xdr_blipfills = twoCellAnchor.getInnerElements(\"a:blip\");\n                    if(xdrFroms!=null && xdr_blipfills!=null && xdrFroms.length>0 && xdr_blipfills.length>0){\n                        let xdrFrom = xdrFroms[0], xdrTo = xdrTos[0],xdr_blipfill = xdr_blipfills[0];\n                        \n                        let rembed = getXmlAttibute(xdr_blipfill.attributeList, \"r:embed\", null);\n\n                        let imageObject = this.getBase64ByRid(rembed, drawingRelsFile);\n\n\n\n                        // let aoff = xdr_xfrm.getInnerElements(\"a:off\"), aext = xdr_xfrm.getInnerElements(\"a:ext\");\n\n                        \n\n                        // if(aoff!=null && aext!=null && aoff.length>0 && aext.length>0){\n                        //     let aoffAttribute = aoff[0].attributeList, aextAttribute = aext[0].attributeList;\n                        //     let x = getXmlAttibute(aoffAttribute, \"x\", null);\n                        //     let y = getXmlAttibute(aoffAttribute, \"y\", null);\n\n                        //     let cx = getXmlAttibute(aextAttribute, \"cx\", null);\n                        //     let cy = getXmlAttibute(aextAttribute, \"cy\", null);\n\n                        //     if(x!=null && y!=null && cx!=null && cy!=null && imageObject !=null){\n                        // let x_n = getPxByEMUs(parseInt(x), \"c\"),y_n = getPxByEMUs(parseInt(y));\n                        // let cx_n = getPxByEMUs(parseInt(cx), \"c\"),cy_n = getPxByEMUs(parseInt(cy));\n\n                        let x_n =0,y_n = 0;\n                        let cx_n = 0, cy_n = 0;\n\n                        imageObject.fromCol = this.getXdrValue(xdrFrom.getInnerElements(\"xdr:col\"));\n                        imageObject.fromColOff = getPxByEMUs(this.getXdrValue(xdrFrom.getInnerElements(\"xdr:colOff\")));\n                        imageObject.fromRow= this.getXdrValue(xdrFrom.getInnerElements(\"xdr:row\"));\n                        imageObject.fromRowOff = getPxByEMUs(this.getXdrValue(xdrFrom.getInnerElements(\"xdr:rowOff\")));\n\n                        imageObject.toCol = this.getXdrValue(xdrTo.getInnerElements(\"xdr:col\"));\n                        imageObject.toColOff = getPxByEMUs(this.getXdrValue(xdrTo.getInnerElements(\"xdr:colOff\")));\n                        imageObject.toRow = this.getXdrValue(xdrTo.getInnerElements(\"xdr:row\"));\n                        imageObject.toRowOff = getPxByEMUs(this.getXdrValue(xdrTo.getInnerElements(\"xdr:rowOff\")));\n\n                        imageObject.originWidth = cx_n;\n                        imageObject.originHeight = cy_n;\n                        \n                        if(editAs==\"absolute\"){\n                            imageObject.type = \"3\";\n                        }\n                        else if(editAs==\"oneCell\"){\n                            imageObject.type = \"2\";\n                        }\n                        else{\n                            imageObject.type = \"1\";\n                        }\n\n                        imageObject.isFixedPos = false;\n                        imageObject.fixedLeft = 0;\n                        imageObject.fixedTop = 0;\n\n                        let imageBorder:IluckyImageBorder = {\n                            color: \"#000\",\n                            radius: 0,\n                            style: \"solid\",\n                            width: 0\n                        }\n                        imageObject.border = imageBorder;\n\n                        let imageCrop:IluckyImageCrop = {\n                            height: cy_n,\n                            offsetLeft: 0,\n                            offsetTop: 0,\n                            width: cx_n\n                        }\n                        imageObject.crop = imageCrop;\n\n                        let imageDefault:IluckyImageDefault = {\n                            height: cy_n,\n                            left: x_n,\n                            top: y_n,\n                            width: cx_n\n                        }\n                        imageObject.default = imageDefault;\n\n                        if(this.images==null){\n                            this.images = {};\n                        }\n                        this.images[generateRandomIndex(\"image\")] = imageObject;\n                        //     }\n                        // }\n                    }\n                }\n            }\n            \n        } \n    }\n\n    private getXdrValue(ele:Element[]):number{\n        if(ele==null || ele.length==0){\n            return null;\n        }\n\n        return parseInt(ele[0].value);\n    }\n\n    private getBase64ByRid(rid:string, drawingRelsFile:string){\n        let Relationships = this.readXml.getElementsByTagName(\"Relationships/Relationship\", drawingRelsFile);\n\n        if(Relationships!=null && Relationships.length>0){\n            for(let i=0;i<Relationships.length;i++){\n                let Relationship = Relationships[i];\n                let attrList = Relationship.attributeList;\n                let Id = getXmlAttibute(attrList, \"Id\", null);\n                let src = getXmlAttibute(attrList, \"Target\", null);\n                if(Id == rid){\n                    src = src.replace(/\\.\\.\\//g, \"\");\n                    src = \"xl/\" + src;\n                    let imgage = this.imageList.getImageByName(src);\n                    return imgage;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n    * @desc This will convert cols/col to luckysheet config of column'width\n    */\n    private generateConfigColumnLenAndHidden(){\n        let cols = this.readXml.getElementsByTagName(\"cols/col\", this.sheetFile);\n        for(let i=0;i<cols.length;i++){\n            let col = cols[i], attrList = col.attributeList;\n            let min = getXmlAttibute(attrList, \"min\", null);\n            let max = getXmlAttibute(attrList, \"max\", null);\n            let width = getXmlAttibute(attrList, \"width\", null);\n            let hidden = getXmlAttibute(attrList, \"hidden\", null);\n            let customWidth = getXmlAttibute(attrList, \"customWidth\", null);\n\n\n            if(min==null || max==null){\n                continue;\n            }\n\n            let minNum = parseInt(min)-1, maxNum=parseInt(max)-1, widthNum=parseFloat(width);\n            \n            for(let m=minNum;m<=maxNum;m++){\n                if(width!=null){\n                    if(this.config.columnlen==null){\n                        this.config.columnlen = {};\n                    }\n                    this.config.columnlen[m] = getColumnWidthPixel(widthNum);\n                }\n\n                if(hidden==\"1\"){\n                    if(this.config.colhidden==null){\n                        this.config.colhidden = {};\n                    }\n                    this.config.colhidden[m] = 0;\n\n                    if(this.config.columnlen){\n                        delete this.config.columnlen[m];\n                    }\n                    \n                }\n\n                if(customWidth!=null){\n                    if(this.config.customWidth==null){\n                        this.config.customWidth = {};\n                    }\n                    this.config.customWidth[m] = 1;\n                }\n            } \n        }\n    }\n\n    /**\n    * @desc This will convert cols/col to luckysheet config of column'width\n    */\n    private generateConfigRowLenAndHiddenAddCell():IcellOtherInfo{\n        let rows = this.readXml.getElementsByTagName(\"sheetData/row\", this.sheetFile);\n        let cellOtherInfo:IcellOtherInfo = {};\n        let formulaList:IformulaList = {};\n        cellOtherInfo.formulaList = formulaList;\n        for(let i=0;i<rows.length;i++){\n            let row = rows[i], attrList = row.attributeList;\n            let rowNo = getXmlAttibute(attrList, \"r\", null);\n            let height = getXmlAttibute(attrList, \"ht\", null);\n            let hidden = getXmlAttibute(attrList, \"hidden\", null);\n            let customHeight = getXmlAttibute(attrList, \"customHeight\", null);\n\n            if(rowNo==null){\n                continue;\n            }\n\n            let rowNoNum = parseInt(rowNo) - 1;\n            if(height!=null){\n                let heightNum = parseFloat(height);\n                if(this.config.rowlen==null){\n                    this.config.rowlen = {};\n                }\n                this.config.rowlen[rowNoNum] = getRowHeightPixel(heightNum);\n            }\n\n            if(hidden==\"1\"){\n                if(this.config.rowhidden==null){\n                    this.config.rowhidden = {};\n                }\n                this.config.rowhidden[rowNoNum] = 0;\n                \n                if(this.config.rowlen){\n                    delete this.config.rowlen[rowNoNum];\n                }\n                \n            }\n\n            if(customHeight!=null){\n                if(this.config.customHeight==null){\n                    this.config.customHeight = {};\n                }\n                this.config.customHeight[rowNoNum] = 1;\n            }\n\n\n            if(this.isInitialCell){\n                let cells = row.getInnerElements(\"c\");\n                for(let key in cells){\n                    let cell = cells[key];\n                    let cellValue = new LuckySheetCelldata(cell, this.styles, this.sharedStrings, this.mergeCells,this.sheetFile, this.readXml);\n                    if(cellValue._borderObject!=null){\n                        if(this.config.borderInfo==null){\n                            this.config.borderInfo = [];\n                        }\n                        this.config.borderInfo.push(cellValue._borderObject);\n                        delete cellValue._borderObject;\n                    }\n                    \n                    // let borderId = cellValue._borderId;\n                    // if(borderId!=null){\n                    //     let borders = this.styles[\"borders\"] as Element[];\n                    //     if(this.config._borderInfo==null){\n                    //         this.config._borderInfo = {};\n                    //     }\n                    //     if( borderId in this.config._borderInfo){\n                    //         this.config._borderInfo[borderId].cells.push(cellValue.r + \"_\" + cellValue.c);\n                    //     }\n                    //     else{\n                    //         let border = borders[borderId];\n                    //         let borderObject = new LuckySheetborderInfoCellForImp();\n                    //         borderObject.rangeType = \"cellGroup\";\n                    //         borderObject.cells = [];\n                    //         let borderCellValue = new LuckySheetborderInfoCellValue();\n                            \n                    //         let lefts = border.getInnerElements(\"left\");\n                    //         let rights = border.getInnerElements(\"right\");\n                    //         let tops = border.getInnerElements(\"top\");\n                    //         let bottoms = border.getInnerElements(\"bottom\");\n                    //         let diagonals = border.getInnerElements(\"diagonal\");\n\n                    //         let left = this.getBorderInfo(lefts);\n                    //         let right = this.getBorderInfo(rights);\n                    //         let top = this.getBorderInfo(tops);\n                    //         let bottom = this.getBorderInfo(bottoms);\n                    //         let diagonal = this.getBorderInfo(diagonals);\n\n                    //         let isAdd = false;\n                    //         if(left!=null && left.color!=null){\n                    //             borderCellValue.l = left;\n                    //             isAdd = true;\n                    //         }\n\n                    //         if(right!=null && right.color!=null){\n                    //             borderCellValue.r = right;\n                    //             isAdd = true;\n                    //         }\n\n                    //         if(top!=null && top.color!=null){\n                    //             borderCellValue.t = top;\n                    //             isAdd = true;\n                    //         }\n\n                    //         if(bottom!=null && bottom.color!=null){\n                    //             borderCellValue.b = bottom;\n                    //             isAdd = true;\n                    //         }\n\n                    //         if(isAdd){\n                    //             borderObject.value = borderCellValue;\n                    //             this.config._borderInfo[borderId] = borderObject;\n                    //         }\n\n                    //     }\n                    // }\n                    if(cellValue._formulaType==\"shared\"){\n                        if(this.formulaRefList==null){\n                            this.formulaRefList = {};\n                        }\n\n                        if(this.formulaRefList[cellValue._formulaSi]==null){\n                            this.formulaRefList[cellValue._formulaSi] = {}\n                        }\n\n                        let fv;\n                        if(cellValue.v!=null){\n                            fv = (cellValue.v as IluckySheetCelldataValue).f;\n                        }\n\n                        let refValue = {\n                            t:cellValue._formulaType,\n                            ref:cellValue._fomulaRef,\n                            si:cellValue._formulaSi,\n                            fv:fv,\n                            cellValue:cellValue\n                        }\n\n                        if(cellValue._fomulaRef!=null){\n                            this.formulaRefList[cellValue._formulaSi][\"mainRef\"] = refValue;\n                        }\n                        else{\n                            this.formulaRefList[cellValue._formulaSi][cellValue.r+\"_\"+cellValue.c] = refValue;\n                        }\n\n                        // console.log(refValue, this.formulaRefList);\n                    }\n\n                    //There may be formulas that do not appear in calcChain\n                    if(cellValue.v!=null && (cellValue.v as IluckySheetCelldataValue).f!=null){\n                        let formulaCell:IformulaListItem = {\n                            r:cellValue.r,\n                            c:cellValue.c\n                        }\n                        cellOtherInfo.formulaList[\"r\"+cellValue.r+\"c\"+cellValue.c] = formulaCell;\n                    }\n\n                    this.celldata.push(cellValue);\n                }\n                \n            }\n        }\n\n        return cellOtherInfo;\n    }\n  \n    /**\n     * luckysheet config of dataValidations\n     * \n     * @returns {IluckysheetDataVerification} - dataValidations config\n     */\n    private generateConfigDataValidations(): IluckysheetDataVerification {\n      \n      let rows = this.readXml.getElementsByTagName(\n        \"dataValidations/dataValidation\",\n        this.sheetFile\n      );\n      let extLst =\n        this.readXml.getElementsByTagName(\n          \"extLst/ext/x14:dataValidations/x14:dataValidation\",\n          this.sheetFile\n        ) || [];\n      \n      rows = rows.concat(extLst);\n  \n      let dataVerification: IluckysheetDataVerification = {};\n  \n      for (let i = 0; i < rows.length; i++) {\n        let row = rows[i];\n        let attrList = row.attributeList;\n        let formulaValue = row.value;\n  \n        let type = getXmlAttibute(attrList, \"type\", null);\n        let operator = \"\",\n            sqref = \"\",\n            sqrefIndexArr: string[] = [],\n            valueArr: string[] = [];\n        let _prohibitInput =\n          getXmlAttibute(attrList, \"allowBlank\", null) !== \"1\" ? false : true;\n        \n        // x14 processing\n        const formulaReg = new RegExp(/<x14:formula1>|<xm:sqref>/g)\n        if (formulaReg.test(formulaValue) && extLst?.length >= 0) {\n          operator = getXmlAttibute(attrList, \"operator\", null);\n          const peelOffData = getPeelOffX14(formulaValue);\n          sqref = peelOffData?.sqref;\n          sqrefIndexArr = getMultiSequenceToNum(sqref);\n          valueArr = getMultiFormulaValue(peelOffData?.formula);\n        } else {\n          operator = getXmlAttibute(attrList, \"operator\", null);\n          sqref = getXmlAttibute(attrList, \"sqref\", null);\n          sqrefIndexArr = getMultiSequenceToNum(sqref);\n          valueArr = getMultiFormulaValue(formulaValue);\n        }\n\n        let _type = DATA_VERIFICATION_MAP[type];\n        let _type2 = null;\n        let _value1: string | number = valueArr?.length >= 1 ? valueArr[0] : \"\";\n        let _value2: string | number = valueArr?.length === 2 ? valueArr[1] : \"\";\n        let _hint = getXmlAttibute(attrList, \"prompt\", null);\n        let _hintShow = _hint ? true : false\n  \n        const matchType = COMMON_TYPE2.includes(_type) ? \"common\" : _type;\n        _type2 = operator\n          ? DATA_VERIFICATION_TYPE2_MAP[matchType][operator]\n          : \"bw\";\n        \n        // mobile phone number processing\n        if (\n          _type === \"text_content\" &&\n          (_value1?.includes(\"LEN\") || _value1?.includes(\"len\")) &&\n          _value1?.includes(\"=11\")\n        ) {\n          _type = \"validity\";\n          _type2 = \"phone\";\n        }\n\n        // date processing\n        if (_type === \"date\") {\n          const D1900 = new Date(1899, 11, 30, 0, 0, 0);\n          _value1 = dayjs(D1900)\n            .clone()\n            .add(Number(_value1), \"day\")\n            .format(\"YYYY-MM-DD\");\n          _value2 = dayjs(D1900)\n            .clone()\n            .add(Number(_value2), \"day\")\n            .format(\"YYYY-MM-DD\");\n        }\n        \n        // checkbox and dropdown processing\n        if (_type === \"checkbox\" || _type === \"dropdown\") {\n          _type2 = null;\n        }\n        \n        // dynamically add dataVerifications\n        for (const ref of sqrefIndexArr) {\n          dataVerification[ref] = {\n            type: _type,\n            type2: _type2,\n            value1: _value1,\n            value2: _value2,\n            checked: false,\n            remote: false,\n            prohibitInput: _prohibitInput,\n            hintShow: _hintShow,\n            hintText: _hint\n          };\n        }\n      }\n  \n      return dataVerification;\n    }\n  \n    /**\n     * luckysheet config of hyperlink\n     * \n     * @returns {IluckysheetHyperlink} - hyperlink config\n     */\n    private generateConfigHyperlinks(): IluckysheetHyperlink {\n      let rows = this.readXml.getElementsByTagName(\n        \"hyperlinks/hyperlink\",\n        this.sheetFile\n      );\n      let hyperlink: IluckysheetHyperlink = {};\n      for (let i = 0; i < rows.length; i++) {\n        let row = rows[i];\n        let attrList = row.attributeList;\n        let ref = getXmlAttibute(attrList, \"ref\", null),\n            refArr = getMultiSequenceToNum(ref),\n            _display = getXmlAttibute(attrList, \"display\", null),\n            _address = getXmlAttibute(attrList, \"location\", null),\n            _tooltip = getXmlAttibute(attrList, \"tooltip\", null);\n        let _type: IluckysheetHyperlinkType = _address ? \"internal\" : \"external\";\n  \n        // external hyperlink\n        if (!_address) {\n          let rid = attrList[\"r:id\"];\n          let sheetFile = this.sheetFile;\n          let relationshipList = this.readXml.getElementsByTagName(\n            \"Relationships/Relationship\",\n            `xl/worksheets/_rels/${sheetFile.replace(worksheetFilePath, \"\")}.rels`\n          );\n  \n          const findRid = relationshipList?.find(\n            (e) => e.attributeList[\"Id\"] === rid\n          );\n\n          if (findRid) {\n            _address = findRid.attributeList[\"Target\"];\n            _type = findRid.attributeList[\n              \"TargetMode\"\n            ]?.toLocaleLowerCase() as IluckysheetHyperlinkType;\n          }\n        }\n\n        // match R1C1\n        const addressReg = new RegExp(/^.*!R([\\d$])+C([\\d$])*$/g)\n        if (addressReg.test(_address)) {\n          _address = getTransR1C1ToSequence(_address);\n        }\n        \n        // dynamically add hyperlinks\n        for (const ref of refArr) {\n          hyperlink[ref] = {\n            linkAddress: _address,\n            linkTooltip: _tooltip || \"\",\n            linkType: _type,\n            display: _display || \"\",\n          };\n        }\n      }\n      \n      return hyperlink;\n    }\n\n    // private getBorderInfo(borders:Element[]):LuckySheetborderInfoCellValueStyle{\n    //     if(borders==null){\n    //         return null;\n    //     }\n\n    //     let border = borders[0], attrList = border.attributeList;\n    //     let clrScheme = this.styles[\"clrScheme\"] as Element[];\n    //     let style:string = attrList.style;\n    //     if(style==null || style==\"none\"){\n    //         return null;\n    //     }\n\n    //     let colors = border.getInnerElements(\"color\");\n    //     let colorRet = \"#000000\";\n    //     if(colors!=null){\n    //         let color = colors[0];\n    //         colorRet = getColor(color, clrScheme);\n    //     }\n\n    //     let ret = new LuckySheetborderInfoCellValueStyle();\n    //     ret.style = borderTypes[style];\n    //     ret.color = colorRet;\n\n    //     return ret;\n    // }\n}\n","import {IuploadfileList, IattributeList, stringToNum} from \"../ICommon\";\nimport {indexedColors}  from \"../common/constant\";\nimport {LightenDarkenColor}  from \"../common/method\";\n\n\nclass xmloperation {\n    /**\n    * @param tag Search xml tag name , div,title etc.\n    * @param file Xml string\n    * @return Xml element string \n    */\n    protected getElementsByOneTag(tag:string, file:string):string[]{\n        //<a:[^/>: ]+?>.*?</a:[^/>: ]+?>\n        let readTagReg;\n        if(tag.indexOf(\"|\")>-1){\n            let tags = tag.split(\"|\"), tagsRegTxt=\"\";\n            for(let i=0;i<tags.length;i++){\n                let t = tags[i];\n                tagsRegTxt += \"|<\"+ t +\" [^>]+?[^/]>[\\\\s\\\\S]*?</\"+ t +\">|<\"+ t +\" [^>]+?/>|<\"+ t +\">[\\\\s\\\\S]*?</\"+ t +\">|<\"+ t +\"/>\";\n            }\n            tagsRegTxt = tagsRegTxt.substr(1, tagsRegTxt.length);\n            readTagReg = new RegExp(tagsRegTxt, \"g\");\n        }\n        else{\n            readTagReg = new RegExp(\"<\"+ tag +\" [^>]+?[^/]>[\\\\s\\\\S]*?</\"+ tag +\">|<\"+ tag +\" [^>]+?/>|<\"+ tag +\">[\\\\s\\\\S]*?</\"+ tag +\">|<\"+ tag +\"/>\", \"g\");\n        }\n        \n        let ret = file.match(readTagReg);\n        if(ret==null){\n            return [];\n        }\n        else{\n            return ret;\n        }\n    }\n}\n\nexport class ReadXml extends xmloperation{\n    originFile:IuploadfileList\n    constructor(files:IuploadfileList){\n        super();\n        this.originFile = files;\n    }\n    /**\n    * @param path Search xml tag group , div,title etc.\n    * @param fileName One of uploadfileList, uploadfileList is file group, {key:value}\n    * @return Xml element calss\n    */\n    getElementsByTagName(path:string, fileName:string): Element[]{\n        \n        let file = this.getFileByName(fileName);\n        let pathArr = path.split(\"/\"), ret:string[] | string;\n        for(let key in pathArr){\n            let path = pathArr[key];\n            if(ret==undefined){\n                ret = this.getElementsByOneTag(path,file);\n            }\n            else{\n                if(ret instanceof Array){\n                    let items:string[]=[];\n                    for(let key in ret){\n                        let item = ret[key];\n                        items = items.concat(this.getElementsByOneTag(path,item));\n                    }\n                    ret = items;\n                }\n                else{\n                    ret = this.getElementsByOneTag(path,ret);\n                }\n            }\n        }\n\n        let elements:Element[] = [];\n\n        for(let i=0;i<ret.length;i++){\n            let ele = new Element(ret[i]);\n            elements.push(ele);\n        }\n\n        return elements;\n    }\n\n    /**\n    * @param name One of uploadfileList's name, search for file by this parameter\n    * @retrun Select a file from uploadfileList\n    */\n    private getFileByName(name:string):string{\n        for(let fileKey in this.originFile){\n            if(fileKey.indexOf(name)>-1){\n                return this.originFile[fileKey];\n            }\n        }\n        return \"\";\n    }\n\n    \n}\n\nexport class Element extends xmloperation {\n    elementString:string\n    attributeList:IattributeList\n    value:string\n    container:string\n    constructor(str:string){\n        super();\n        this.elementString = str;\n        this.setValue();\n        const readAttrReg = new RegExp('[a-zA-Z0-9_:]*?=\".*?\"', \"g\");\n        let attrList = this.container.match(readAttrReg);\n        this.attributeList = {};\n        if(attrList!=null){\n            for(let key in attrList){\n                let attrFull = attrList[key];\n                // let al= attrFull.split(\"=\");\n                if(attrFull.length==0){\n                    continue;\n                }\n                let attrKey = attrFull.substr(0, attrFull.indexOf('='));\n                let attrValue = attrFull.substr(attrFull.indexOf('=') + 1);\n                if(attrKey==null || attrValue==null ||attrKey.length==0 || attrValue.length==0){\n                    continue;\n                }\n                this.attributeList[attrKey] = attrValue.substr(1, attrValue.length-2);\n            }\n        }\n    }\n\n    /**\n    * @param name Get attribute by key in element\n    * @return Single attribute\n    */\n    get(name:string):string|number|boolean{\n        return this.attributeList[name];\n    }\n\n    /**\n    * @param tag Get elements by tag in elementString\n    * @return Element group\n    */\n    getInnerElements(tag:string):Element[]{\n        let ret = this.getElementsByOneTag(tag,this.elementString);\n        let elements:Element[] = [];\n\n        for(let i=0;i<ret.length;i++){\n            let ele = new Element(ret[i]);\n            elements.push(ele);\n        }\n\n        if(elements.length==0){\n            return null;\n        }\n        return elements;\n    }\n\n    /**\n    * @desc get xml dom value and container, <container>value</container>\n    */\n    private setValue(){\n        let str = this.elementString;\n        if(str.substr(str.length-2, 2)==\"/>\"){\n            this.value = \"\";\n            this.container = str;\n        }\n        else{\n            let firstTag = this.getFirstTag();\n            const firstTagReg = new RegExp(\"(<\"+ firstTag +\" [^>]+?[^/]>)([\\\\s\\\\S]*?)</\"+ firstTag +\">|(<\"+ firstTag +\">)([\\\\s\\\\S]*?)</\"+ firstTag +\">\", \"g\");\n            let result = firstTagReg.exec(str);\n            if (result != null) {\n                if(result[1]!=null){\n                    this.container = result[1];\n                    this.value = result[2];\n                }\n                else{\n                    this.container = result[3];\n                    this.value = result[4];\n                }\n            }\n        }\n    }\n\n    /**\n    * @desc get xml dom first tag, <a><b></b></a>, get a\n    */\n    private getFirstTag(){\n        let str = this.elementString;\n        let firstTag = str.substr(0, str.indexOf(' '));\n        if(firstTag==\"\" || firstTag.indexOf(\">\")>-1){\n            firstTag = str.substr(0, str.indexOf('>'));\n        }\n        firstTag = firstTag.substr(1,firstTag.length);\n        return firstTag;\n    }\n}\n\n\nexport interface IStyleCollections {\n    [index:string]:Element[] | IattributeList\n}\n\nfunction combineIndexedColor(indexedColorsInner:Element[], indexedColors:IattributeList):IattributeList{\n    let ret:IattributeList = {};\n    if(indexedColorsInner==null || indexedColorsInner.length==0){\n        return indexedColors;\n    }\n    for(let key in indexedColors){\n        let value = indexedColors[key], kn = parseInt(key);\n        let inner = indexedColorsInner[kn];\n        if(inner==null){\n            ret[key] = value;\n        }\n        else{\n            let rgb = inner.attributeList.rgb;\n            ret[key] = rgb;\n        }\n    }\n\n    return ret;\n}\n\n//clrScheme:Element[]\nexport function getColor(color:Element, styles:IStyleCollections , type:string=\"g\"){\n    let attrList = color.attributeList;\n    let clrScheme = styles[\"clrScheme\"] as Element[];\n    let indexedColorsInner = styles[\"indexedColors\"] as Element[];\n    let mruColorsInner = styles[\"mruColors\"];\n    let indexedColorsList = combineIndexedColor(indexedColorsInner, indexedColors);\n    let indexed = attrList.indexed, rgb = attrList.rgb, theme = attrList.theme, tint = attrList.tint;\n    let bg;\n    if(indexed!=null){\n        let indexedNum = parseInt(indexed);\n        bg = indexedColorsList[indexedNum];\n        if(bg!=null){\n            bg = bg.substring(bg.length-6, bg.length);\n            bg = \"#\"+bg;\n        }\n    }\n    else if(rgb!=null){\n        rgb = rgb.substring(rgb.length-6, rgb.length);\n        bg = \"#\"+rgb;\n    }\n    else if(theme!=null){\n        let themeNum = parseInt(theme);\n        if(themeNum==0){\n            themeNum = 1;\n        }\n        else if(themeNum==1){\n            themeNum = 0;\n        }\n        else if(themeNum==2){\n            themeNum = 3;\n        }\n        else if(themeNum==3){\n            themeNum = 2;\n        }\n        let clrSchemeElement = clrScheme[themeNum];\n        if(clrSchemeElement!=null){\n            let clrs = clrSchemeElement.getInnerElements(\"a:sysClr|a:srgbClr\");\n            if(clrs!=null){\n                let clr = clrs[0];\n                let clrAttrList = clr.attributeList;\n                // console.log(clr.container, );\n                if(clr.container.indexOf(\"sysClr\")>-1){\n                    // if(type==\"g\" && clrAttrList.val==\"windowText\"){\n                    //     bg = null;\n                    // }\n                    // else if((type==\"t\" || type==\"b\") && clrAttrList.val==\"window\"){\n                    //     bg = null;\n                    // }                    \n                    // else \n                    if(clrAttrList.lastClr!=null){\n                        bg = \"#\" + clrAttrList.lastClr;\n                    }\n                    else if(clrAttrList.val!=null){\n                        bg = \"#\" + clrAttrList.val;\n                    }\n\n                }\n                else if(clr.container.indexOf(\"srgbClr\")>-1){\n                    // console.log(clrAttrList.val);\n                    bg = \"#\" + clrAttrList.val;\n                }\n            }\n        }\n        \n    }\n    \n    if(tint!=null){\n        let tintNum = parseFloat(tint);\n        if(bg!=null){\n            bg = LightenDarkenColor(bg, tintNum);\n        }\n    }\n\n    return bg;\n}\n\n\n/** \n * @dom xml attribute object\n * @attr attribute name\n * @d if attribute is null, return default value \n * @return attribute value\n*/\nexport function getlineStringAttr(frpr:Element, attr:string):string{\n    let attrEle = frpr.getInnerElements(attr), value;\n\n    if(attrEle!=null && attrEle.length>0){\n        if(attr==\"b\" || attr==\"i\" || attr==\"strike\"){\n            value = \"1\";\n        }\n        else if(attr==\"u\"){\n            let v = attrEle[0].attributeList.val;\n            if(v==\"double\"){\n                value =  \"2\";\n            }\n            else if(v==\"singleAccounting\"){\n                value =  \"3\";\n            }\n            else if(v==\"doubleAccounting\"){\n                value =  \"4\";\n            }\n            else{\n                value = \"1\";\n            }\n        }\n        else if(attr==\"vertAlign\"){\n            let v = attrEle[0].attributeList.val;\n            if(v==\"subscript\"){\n                value = \"1\";\n            }\n            else if(v==\"superscript\"){\n                value = \"2\";\n            }\n        }\n        else{\n            value = attrEle[0].attributeList.val;\n        }\n        \n    }\n\n    return value;\n}","import {stringToNum, IattributeList, numTostring, IDataVerificationMap, IDataVerificationType2Map} from \"../ICommon\";\n\nexport const columeHeader_word:string[] = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n\nexport const columeHeader_word_index:stringToNum = { 'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6, 'H': 7, 'I': 8, 'J': 9, 'K': 10, 'L': 11, 'M': 12, 'N': 13, 'O': 14, 'P': 15, 'Q': 16, 'R': 17, 'S': 18, 'T': 19, 'U': 20, 'V': 21, 'W': 22, 'X': 23, 'Y': 24, 'Z': 25 };\n\nexport const coreFile = \"docProps/core.xml\";\nexport const appFile = \"docProps/app.xml\";\nexport const contentTypesFile = \"[Content_Types].xml\";\nexport const workBookFile = \"xl/workbook.xml\";\nexport const calcChainFile = \"xl/calcChain.xml\";\nexport const stylesFile = \"xl/styles.xml\";\nexport const sharedStringsFile = \"xl/sharedStrings.xml\";\nexport const worksheetFilePath = \"xl/worksheets/\";\nexport const theme1File = \"xl/theme/theme1.xml\";\nexport const workbookRels= \"xl/_rels/workbook.xml.rels\";\n\n\n\n\n//Excel Built-In cell type\nexport const ST_CellType:IattributeList ={\n    \"Boolean\":\"b\",\n    \"Date\":\"d\",\n    \"Error\":\"e\",\n    \"InlineString\":\"inlineStr\",\n    \"Number\":\"n\",\n    \"SharedString\":\"s\",\n    \"String\":\"str\",\n}\n\n//Excel Built-In cell style\nexport const BuiltInCellStyles:IattributeList = {\n    \"0\":\"Normal\",\n\n}\n\n\nexport let numFmtDefault:IattributeList = {\n    \"0\":'General',\n    \"1\": '0',\n    \"2\": '0.00',\n    \"3\": '#,##0',\n    \"4\": '#,##0.00',\n    \"9\":'0%',\n    \"10\": '0.00%',\n    \"11\": '0.00E+00',\n    \"12\": '# ?/?',\n    \"13\": '# ??/??',\n    \"14\": 'm/d/yy',\n    \"15\": 'd-mmm-yy',\n    \"16\": 'd-mmm',\n    \"17\": 'mmm-yy',\n    \"18\": 'h:mm AM/PM',\n    \"19\": 'h:mm:ss AM/PM',\n    \"20\": 'h:mm',\n    \"21\": 'h:mm:ss',\n    \"22\": 'm/d/yy h:mm',\n    \"37\": '#,##0 ;(#,##0)',\n    \"38\": '#,##0 ;[Red](#,##0)',\n    \"39\": '#,##0.00;(#,##0.00)',\n    \"40\": '#,##0.00;[Red](#,##0.00)',\n    \"45\": 'mm:ss',\n    \"46\": '[h]:mm:ss',\n    \"47\": 'mmss.0',\n    \"48\": '##0.0E+0',\n    \"49\": '@'\n}\n\nexport const indexedColors:IattributeList = {\n    \"0\":'00000000',\n    \"1\":'00FFFFFF',\n    \"2\":'00FF0000',\n    \"3\":'0000FF00',\n    \"4\":'000000FF',\n    \"5\":'00FFFF00',\n    \"6\":'00FF00FF',\n    \"7\":'0000FFFF',\n    \"8\":'00000000',\n    \"9\":'00FFFFFF',\n    \"10\":'00FF0000',\n    \"11\":'0000FF00',\n    \"12\":'000000FF',\n    \"13\":'00FFFF00',\n    \"14\":'00FF00FF',\n    \"15\":'0000FFFF',\n    \"16\":'00800000',\n    \"17\":'00008000',\n    \"18\":'00000080',\n    \"19\":'00808000',\n    \"20\":'00800080',\n    \"21\":'00008080',\n    \"22\":'00C0C0C0',\n    \"23\":'00808080',\n    \"24\":'009999FF',\n    \"25\":'00993366',\n    \"26\":'00FFFFCC',\n    \"27\":'00CCFFFF',\n    \"28\":'00660066',\n    \"29\":'00FF8080',\n    \"30\":'000066CC',\n    \"31\":'00CCCCFF',\n    \"32\":'00000080',\n    \"33\":'00FF00FF',\n    \"34\":'00FFFF00',\n    \"35\":'0000FFFF',\n    \"36\":'00800080',\n    \"37\":'00800000',\n    \"38\":'00008080',\n    \"39\":'000000FF',\n    \"40\":'0000CCFF',\n    \"41\":'00CCFFFF',\n    \"42\":'00CCFFCC',\n    \"43\":'00FFFF99',\n    \"44\":'0099CCFF',\n    \"45\":'00FF99CC',\n    \"46\":'00CC99FF',\n    \"47\":'00FFCC99',\n    \"48\":'003366FF',\n    \"49\":'0033CCCC',\n    \"50\":'0099CC00',\n    \"51\":'00FFCC00',\n    \"52\":'00FF9900',\n    \"53\":'00FF6600',\n    \"54\":'00666699',\n    \"55\":'00969696',\n    \"56\":'00003366',\n    \"57\":'00339966',\n    \"58\":'00003300',\n    \"59\":'00333300',\n    \"60\":'00993300',\n    \"61\":'00993366',\n    \"62\":'00333399',\n    \"63\":'00333333',\n    \"64\":null,//system Foreground n/a\n    \"65\":null,//system Background n/a\n}\n\nexport const OEM_CHARSET:IattributeList = {\n    \"0\": \"ANSI_CHARSET\",\n    \"1\": \"DEFAULT_CHARSET\",\n    \"2\": \"SYMBOL_CHARSET\",\n    \"77\": \"MAC_CHARSET\",\n    \"128\": \"SHIFTJIS_CHARSET\",\n    \"129\": \"HANGUL_CHARSET\",\n    \"130\": \"JOHAB_CHARSET\",\n    \"134\": \"GB2312_CHARSET\",\n    \"136\": \"CHINESEBIG5_CHARSET\",\n    \"161\": \"GREEK_CHARSET\",\n    \"162\": \"TURKISH_CHARSET\",\n    \"163\": \"VIETNAMESE_CHARSET\",\n    \"177\": \"HEBREW_CHARSET\",\n    \"178\": \"ARABIC_CHARSET\",\n    \"186\": \"BALTIC_CHARSET\",\n    \"204\": \"RUSSIAN_CHARSET\",\n    \"222\": \"THAI_CHARSET\",\n    \"238\": \"EASTEUROPE_CHARSET\",\n    \"255\": \"OEM_CHARSET\",\n}\n\n\nexport const borderTypes:stringToNum = {\n    \"none\":0,\n    \"thin\":1, \n    \"hair\":2, \n    \"dotted\":3, \n    \"dashed\":4, \n    \"dashDot\":5, \n    \"dashDotDot\":6, \n    \"double\":7, \n    \"medium\":8, \n    \"mediumDashed\":9, \n    \"mediumDashDot\":10, \n    \"mediumDashDotDot\":11, \n    \"slantDashDot\":12, \n    \"thick\":13\n}\n\n\nexport let numFmtDefaultMap: IattributeList = {\n    \"yyyy/m/d;@\": \"yyyy/MM/dd\",\n    \"yyyy&quot;年&quot;m&quot;月&quot;d&quot;日&quot;;@\":\n      \"yyyy&quot;年&quot;MM&quot;月&quot;dd&quot;日&quot;\",\n    \"[$-409]yyyy/m/d\\\\ h:mm\\\\ AM/PM;@\": \"yyyy/MM/dd hh:mm AM/PM\",\n};\n\nexport const fontFamilys:IattributeList = {\n    \"0\":\"defualt\",\n    \"1\":\"Roman\",\n    \"2\":\"Swiss\",\n    \"3\":\"Modern\",\n    \"4\":\"Script\",\n    \"5\":\"Decorative\"\n}\n\nexport const DATA_VERIFICATION_MAP: IDataVerificationMap = {\n    list: \"dropdown\",\n    whole: \"number_integer\",\n    decimal: \"number_decimal\",\n    custom: \"text_content\",\n    textLength: \"text_length\",\n    date: \"date\",\n    \"unknown1\": \"number\", // no match yet\n    \"unknown2\": \"checkbox\", // no match yet\n    \"unknown3\": \"validity\", // no match yet\n};\n\nexport const COMMON_TYPE2: string[] = [\n    \"number\",\n    \"number_integer\",\n    \"number_decimal\",\n    \"text_length\",\n];\n\nexport const DATA_VERIFICATION_TYPE2_MAP: IDataVerificationType2Map = {\n    common: {\n      between: \"bw\",\n      notBetween: \"nb\",\n      equal: \"eq\",\n      notEqualTo: \"ne\",\n      moreThanThe: \"gt\",\n      lessThan: \"lt\",\n      greaterOrEqualTo: \"gte\",\n      lessThanOrEqualTo: \"lte\",\n    },\n    text_content: {\n      include: \"include\",\n      exclude: \"exclude\",\n      equal: \"equal\",\n    },\n    date: {\n      between: \"bw\",\n      notBetween: \"nb\",\n      equal: \"eq\",\n      notEqualTo: \"ne\",\n      earlierThan: \"bf\",\n      noEarlierThan: \"nbf\",\n      laterThan: \"af\",\n      noLaterThan: \"naf\",\n    },\n    validity: {\n      card: \"card\",\n      phone: \"phone\",\n    },\n};\n","export let UDOC:any = {};\n\t\n\tUDOC.G = {\n\t\tconcat : function(p:any,r:any) {\n\t\t\tfor(var i=0; i<r.cmds.length; i++) p.cmds.push(r.cmds[i]);\n\t\t\tfor(var i=0; i<r.crds.length; i++) p.crds.push(r.crds[i]);\n\t\t},\n\t\tgetBB  : function(ps:any) {\n\t\t\tvar x0=1e99, y0=1e99, x1=-x0, y1=-y0;\n\t\t\tfor(var i=0; i<ps.length; i+=2) {  var x=ps[i],y=ps[i+1];  if(x<x0)x0=x; else if(x>x1)x1=x;  if(y<y0)y0=y;  else if(y>y1)y1=y;  }\n\t\t\treturn [x0,y0,x1,y1];\n\t\t},\n\t\trectToPath: function(r:any) {  return  {cmds:[\"M\",\"L\",\"L\",\"L\",\"Z\"],crds:[r[0],r[1],r[2],r[1], r[2],r[3],r[0],r[3]]};  },\n\t\t// a inside b\n\t\tinsideBox: function(a:any,b:any) {  return b[0]<=a[0] && b[1]<=a[1] && a[2]<=b[2] && a[3]<=b[3];   },\n\t\tisBox : function(p:any, bb:any) {\n\t\t\tvar sameCrd8 = function(pcrd:any, crds:any) {\n\t\t\t\tfor(var o=0; o<8; o+=2) {  var eq = true;  for(var j=0; j<8; j++) if(Math.abs(crds[j]-pcrd[(j+o)&7])>=2) {  eq = false;  break;  }    if(eq) return true;  }\n\t\t\t\treturn false;\n\t\t\t};\n\t\t\tif(p.cmds.length>10) return false;\n\t\t\tvar cmds=p.cmds.join(\"\"), crds=p.crds;\n\t\t\tvar sameRect = false;\n\t\t\tif((cmds==\"MLLLZ\"  && crds.length== 8) \n\t\t\t ||(cmds==\"MLLLLZ\" && crds.length==10) ) {\n\t\t\t\tif(crds.length==10) crds=crds.slice(0,8);\n\t\t\t\tvar x0=bb[0],y0=bb[1],x1=bb[2],y1=bb[3];\n\t\t\t\tif(!sameRect) sameRect = sameCrd8(crds, [x0,y0,x1,y0,x1,y1,x0,y1]);\n\t\t\t\tif(!sameRect) sameRect = sameCrd8(crds, [x0,y1,x1,y1,x1,y0,x0,y0]);\n\t\t\t}\n\t\t\treturn sameRect;\n\t\t},\n\t\tboxArea: function(a:any) {  var w=a[2]-a[0], h=a[3]-a[1];  return w*h;  },\n\t\tnewPath: function(gst:any    ) {  gst.pth = {cmds:[], crds:[]};  },\n\t\tmoveTo : function(gst:any,x:any,y:any) {  var p=UDOC.M.multPoint(gst.ctm,[x,y]);  //if(gst.cpos[0]==p[0] && gst.cpos[1]==p[1]) return;\n\t\t\t\t\t\t\t\t\t\tgst.pth.cmds.push(\"M\");  gst.pth.crds.push(p[0],p[1]);  gst.cpos = p;  },\n\t\tlineTo : function(gst:any,x:any,y:any) {  var p=UDOC.M.multPoint(gst.ctm,[x,y]);  if(gst.cpos[0]==p[0] && gst.cpos[1]==p[1]) return;\n\t\t\t\t\t\t\t\t\t\tgst.pth.cmds.push(\"L\");  gst.pth.crds.push(p[0],p[1]);  gst.cpos = p;  },\n\t\tcurveTo: function(gst:any,x1:any,y1:any,x2:any,y2:any,x3:any,y3:any) {   var p;  \n\t\t\tp=UDOC.M.multPoint(gst.ctm,[x1,y1]);  x1=p[0];  y1=p[1];\n\t\t\tp=UDOC.M.multPoint(gst.ctm,[x2,y2]);  x2=p[0];  y2=p[1];\n\t\t\tp=UDOC.M.multPoint(gst.ctm,[x3,y3]);  x3=p[0];  y3=p[1];  gst.cpos = p;\n\t\t\tgst.pth.cmds.push(\"C\");  \n\t\t\tgst.pth.crds.push(x1,y1,x2,y2,x3,y3);  \n\t\t},\n\t\tclosePath: function(gst:any  ) {  gst.pth.cmds.push(\"Z\");  },\n\t\tarc : function(gst:any,x:any,y:any,r:any,a0:any,a1:any, neg:any) {\n\t\t\t\n\t\t\t// circle from a0 counter-clock-wise to a1\n\t\t\tif(neg) while(a1>a0) a1-=2*Math.PI;\n\t\t\telse    while(a1<a0) a1+=2*Math.PI;\n\t\t\tvar th = (a1-a0)/4;\n\t\t\t\n\t\t\tvar x0 = Math.cos(th/2), y0 = -Math.sin(th/2);\n\t\t\tvar x1 = (4-x0)/3, y1 = y0==0 ? y0 : (1-x0)*(3-x0)/(3*y0);\n\t\t\tvar x2 = x1, y2 = -y1;\n\t\t\tvar x3 = x0, y3 = -y0;\n\t\t\t\n\t\t\tvar p0 = [x0,y0], p1 = [x1,y1], p2 = [x2,y2], p3 = [x3,y3];\n\t\t\t\n\t\t\tvar pth = {cmds:[(gst.pth.cmds.length==0)?\"M\":\"L\",\"C\",\"C\",\"C\",\"C\"], crds:[x0,y0,x1,y1,x2,y2,x3,y3]};\n\t\t\t\n\t\t\tvar rot = [1,0,0,1,0,0];  UDOC.M.rotate(rot,-th);\n\t\t\t\n\t\t\tfor(var i=0; i<3; i++) {\n\t\t\t\tp1 = UDOC.M.multPoint(rot,p1);  p2 = UDOC.M.multPoint(rot,p2);  p3 = UDOC.M.multPoint(rot,p3);\n\t\t\t\tpth.crds.push(p1[0],p1[1],p2[0],p2[1],p3[0],p3[1]);\n\t\t\t}\n\t\t\t\n\t\t\tvar sc = [r,0,0,r,x,y];  \n\t\t\tUDOC.M.rotate(rot, -a0+th/2);  UDOC.M.concat(rot, sc);  UDOC.M.multArray(rot, pth.crds);\n\t\t\tUDOC.M.multArray(gst.ctm, pth.crds);\n\t\t\t\n\t\t\tUDOC.G.concat(gst.pth, pth);\n\t\t\tvar y:any=pth.crds.pop();  x=pth.crds.pop();\n\t\t\tgst.cpos = [x,y];\n\t\t},\n\t\ttoPoly : function(p:any) {\n\t\t\tif(p.cmds[0]!=\"M\" || p.cmds[p.cmds.length-1]!=\"Z\") return null;\n\t\t\tfor(var i=1; i<p.cmds.length-1; i++) if(p.cmds[i]!=\"L\") return null;\n\t\t\tvar out = [], cl = p.crds.length;\n\t\t\tif(p.crds[0]==p.crds[cl-2] && p.crds[1]==p.crds[cl-1]) cl-=2;\n\t\t\tfor(var i=0; i<cl; i+=2) out.push([p.crds[i],p.crds[i+1]]);\n\t\t\tif(UDOC.G.polyArea(p.crds)<0) out.reverse();\n\t\t\treturn out;\n\t\t},\n\t\tfromPoly : function(p:any) {\n\t\t\tvar o:any = {cmds:[],crds:[]};\n\t\t\tfor(var i=0; i<p.length; i++) { o.crds.push(p[i][0], p[i][1]);  o.cmds.push(i==0?\"M\":\"L\");  }\n\t\t\to.cmds.push(\"Z\");\n\t\t\treturn o;\n\t\t},\n\t\tpolyArea : function(p:any) {\n\t\t\tif(p.length <6) return 0;\n\t\t\tvar l = p.length - 2;\n\t\t\tvar sum = (p[0]-p[l]) * (p[l+1]+p[1]);\n\t\t\tfor(var i=0; i<l; i+=2)\n\t\t\t\tsum += (p[i+2]-p[i]) * (p[i+1]+p[i+3]);\n\t\t\treturn - sum * 0.5;\n\t\t},\n\t\tpolyClip : function(p0:any, p1:any) {  // p0 clipped by p1\n            var cp1:any, cp2:any, s:any, e:any;\n            var inside = function (p:any) {\n                return (cp2[0]-cp1[0])*(p[1]-cp1[1]) > (cp2[1]-cp1[1])*(p[0]-cp1[0]);\n            };\n            var isc = function () {\n                var dc = [ cp1[0] - cp2[0], cp1[1] - cp2[1] ],\n                    dp = [ s[0] - e[0], s[1] - e[1] ],\n                    n1 = cp1[0] * cp2[1] - cp1[1] * cp2[0],\n                    n2 = s[0] * e[1] - s[1] * e[0], \n                    n3 = 1.0 / (dc[0] * dp[1] - dc[1] * dp[0]);\n                return [(n1*dp[0] - n2*dc[0]) * n3, (n1*dp[1] - n2*dc[1]) * n3];\n            };\n            var out = p0;\n            cp1 = p1[p1.length-1];\n            for (let j in p1) {\n                var cp2 = p1[j];\n                var inp = out;\n                out = [];\n                s = inp[inp.length - 1]; //last on the input list\n                for (let i in inp) {\n                    var e = inp[i];\n                    if (inside(e)) {\n                        if (!inside(s)) {\n                            out.push(isc());\n                        }\n                        out.push(e);\n                    }\n                    else if (inside(s)) {\n                        out.push(isc());\n                    }\n                    s = e;\n                }\n                cp1 = cp2;\n            }\n            return out\n        }\n\t}\n\tUDOC.M = {\n\t\tgetScale : function(m:any) {  return Math.sqrt(Math.abs(m[0]*m[3]-m[1]*m[2]));  },\n\t\ttranslate: function(m:any,x:any,y:any) {  UDOC.M.concat(m, [1,0,0,1,x,y]);  },\n\t\trotate   : function(m:any,a:any  ) {  UDOC.M.concat(m, [Math.cos(a), -Math.sin(a), Math.sin(a), Math.cos(a),0,0]);  },\n\t\tscale    : function(m:any,x:any,y:any) {  UDOC.M.concat(m, [x,0,0,y,0,0]);  },\n\t\tconcat   : function(m:any,w:any  ) {  \n\t\t\tvar a=m[0],b=m[1],c=m[2],d=m[3],tx=m[4],ty=m[5];\n\t\t\tm[0] = (a *w[0])+(b *w[2]);       m[1] = (a *w[1])+(b *w[3]);\n\t\t\tm[2] = (c *w[0])+(d *w[2]);       m[3] = (c *w[1])+(d *w[3]);\n\t\t\tm[4] = (tx*w[0])+(ty*w[2])+w[4];  m[5] = (tx*w[1])+(ty*w[3])+w[5]; \n\t\t},\n\t\tinvert   : function(m:any    ) {  \n\t\t\tvar a=m[0],b=m[1],c=m[2],d=m[3],tx=m[4],ty=m[5], adbc=a*d-b*c;\n\t\t\tm[0] = d/adbc;  m[1] = -b/adbc;  m[2] =-c/adbc;  m[3] =  a/adbc;\n\t\t\tm[4] = (c*ty - d*tx)/adbc;  m[5] = (b*tx - a*ty)/adbc;\n\t\t},\n\t\tmultPoint: function(m:any, p:any ) {  var x=p[0],y=p[1];  return [x*m[0]+y*m[2]+m[4],   x*m[1]+y*m[3]+m[5]];  },\n\t\tmultArray: function(m:any, a:any ) {  for(var i=0; i<a.length; i+=2) {  var x=a[i],y=a[i+1];  a[i]=x*m[0]+y*m[2]+m[4];  a[i+1]=x*m[1]+y*m[3]+m[5];  }  }\n\t}\n\tUDOC.C = {\n\t\tsrgbGamma : function(x:any) {  return x < 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1.0 / 2.4) - 0.055;  },\n\t\tcmykToRgb : function(clr:any) { \n\t\t\tvar c=clr[0], m=clr[1], y=clr[2], k=clr[3];\n\t\t\t// return [1-Math.min(1,c+k), 1-Math.min(1, m+k), 1-Math.min(1,y+k)];\n\t\t\tvar r = 255\n\t\t\t+ c * (-4.387332384609988  * c + 54.48615194189176  * m +  18.82290502165302  * y + 212.25662451639585 * k +  -285.2331026137004) \n\t\t\t+ m * ( 1.7149763477362134 * m - 5.6096736904047315 * y + -17.873870861415444 * k - 5.497006427196366) \n\t\t\t+ y * (-2.5217340131683033 * y - 21.248923337353073 * k +  17.5119270841813) \n\t\t\t+ k * (-21.86122147463605  * k - 189.48180835922747);\n\t\t\tvar g = 255\n\t\t\t+ c * (8.841041422036149   * c + 60.118027045597366 * m +  6.871425592049007  * y + 31.159100130055922 * k +  -79.2970844816548) \n\t\t\t+ m * (-15.310361306967817 * m + 17.575251261109482 * y +  131.35250912493976 * k - 190.9453302588951) \n\t\t\t+ y * (4.444339102852739   * y + 9.8632861493405    * k -  24.86741582555878) \n\t\t\t+ k * (-20.737325471181034 * k - 187.80453709719578);\n\t\t\tvar b = 255\n\t\t\t+ c * (0.8842522430003296  * c + 8.078677503112928  * m +  30.89978309703729  * y - 0.23883238689178934 * k + -14.183576799673286) \n\t\t\t+ m * (10.49593273432072   * m + 63.02378494754052  * y +  50.606957656360734 * k - 112.23884253719248) \n\t\t\t+ y * (0.03296041114873217 * y + 115.60384449646641 * k + -193.58209356861505)\n\t\t\t+ k * (-22.33816807309886  * k - 180.12613974708367);\n\n\t\t\treturn [Math.max(0, Math.min(1, r/255)), Math.max(0, Math.min(1, g/255)), Math.max(0, Math.min(1, b/255))];\n\t\t\t//var iK = 1-c[3];  \n\t\t\t//return [(1-c[0])*iK, (1-c[1])*iK, (1-c[2])*iK];  \n\t\t},\n\t\tlabToRgb  : function(lab:any) {\n\t\t\tvar k = 903.3, e = 0.008856, L = lab[0], a = lab[1], b = lab[2];\n\t\t\tvar fy = (L+16)/116, fy3 = fy*fy*fy;\n\t\t\tvar fz = fy - b/200, fz3 = fz*fz*fz;\n\t\t\tvar fx = a/500 + fy, fx3 = fx*fx*fx;\n\t\t\tvar zr = fz3>e ? fz3 : (116*fz-16)/k;\n\t\t\tvar yr = fy3>e ? fy3 : (116*fy-16)/k;\n\t\t\tvar xr = fx3>e ? fx3 : (116*fx-16)/k;\n\t\t\t\t\n\t\t\tvar X = xr*96.72, Y = yr*100, Z = zr*81.427, xyz = [X/100,Y/100,Z/100];\n\t\t\tvar x2s = [3.1338561, -1.6168667, -0.4906146, -0.9787684,  1.9161415,  0.0334540, 0.0719453, -0.2289914,  1.4052427];\n\t\t\t\n\t\t\tvar rgb = [ x2s[0]*xyz[0] + x2s[1]*xyz[1] + x2s[2]*xyz[2],\n\t\t\t\t\t\tx2s[3]*xyz[0] + x2s[4]*xyz[1] + x2s[5]*xyz[2],\n\t\t\t\t\t\tx2s[6]*xyz[0] + x2s[7]*xyz[1] + x2s[8]*xyz[2]  ];\n\t\t\tfor(var i=0; i<3; i++) rgb[i] = Math.max(0, Math.min(1, UDOC.C.srgbGamma(rgb[i])));\n\t\t\treturn rgb;\n\t\t}\n\t}\n\t\n\tUDOC.getState = function(crds:any):any {\n\t\treturn {\n\t\t\tfont : UDOC.getFont(),\n\t\t\tdd: {flat:1},  // device-dependent\n\t\t\tspace :\"/DeviceGray\",\n\t\t\t// fill\n\t\t\tca: 1,\n\t\t\tcolr  : [0,0,0],\n\t\t\tsspace:\"/DeviceGray\",\n\t\t\t// stroke\n\t\t\tCA: 1,\n\t\t\tCOLR : [0,0,0],\n\t\t\tbmode: \"/Normal\",\n\t\t\tSA:false, OPM:0, AIS:false, OP:false, op:false, SMask:\"/None\",\n\t\t\tlwidth : 1,\n\t\t\tlcap: 0,\n\t\t\tljoin: 0,\n\t\t\tmlimit: 10,\n\t\t\tSM : 0.1,\n\t\t\tdoff: 0,\n\t\t\tdash: [],\n\t\t\tctm : [1,0,0,1,0,0],\n\t\t\tcpos: [0,0],\n\t\t\tpth : {cmds:[],crds:[]}, \n\t\t\tcpth: crds ? UDOC.G.rectToPath(crds) : null  // clipping path\n\t\t};\n\t}\n\t\n\tUDOC.getFont = function() {\n\t\treturn {\n\t\t\tTc: 0, // character spacing\n\t\t\tTw: 0, // word spacing\n\t\t\tTh:100, // horizontal scale\n\t\t\tTl: 0, // leading\n\t\t\tTf:\"Helvetica-Bold\", \n\t\t\tTfs:1, // font size\n\t\t\tTmode:0, // rendering mode\n\t\t\tTrise:0, // rise\n\t\t\tTk: 0,  // knockout\n\t\t\tTal:0,  // align, 0: left, 1: right, 2: center\n\t\t\tTun:0,  // 0: no, 1: underline\n\t\t\t\n\t\t\tTm :[1,0,0,1,0,0],\n\t\t\tTlm:[1,0,0,1,0,0],\n\t\t\tTrm:[1,0,0,1,0,0]\n\t\t};\n\t}\n\n\nexport let FromEMF:any = function()\n{\n}\n\nFromEMF.Parse = function(buff:any, genv:any)\n{\n    buff = new Uint8Array(buff);  var off=0;\n    //console.log(buff.slice(0,32));\n    var prms:any = {fill:false, strk:false, bb:[0,0,1,1], wbb:[0,0,1,1], fnt:{nam:\"Arial\",hgh:25,und:false,orn:0}, tclr:[0,0,0], talg:0}, gst, tab = [], sts=[];\n    \n    var rI = FromEMF.B.readShort, rU = FromEMF.B.readUshort, rI32 = FromEMF.B.readInt, rU32 = FromEMF.B.readUint, rF32 = FromEMF.B.readFloat;\t\n    \n    var opn=0;\n    while(true) {\n        var fnc = rU32(buff, off);  off+=4;\n        var fnm = FromEMF.K[fnc]; \n        var siz = rU32(buff, off);  off+=4;\n        \n        //if(gst && isNaN(gst.ctm[0])) throw \"e\";\n        //console.log(fnc,fnm,siz);\n        \n        var loff = off;\n        \n        //if(opn++==253) break;\n        var obj:any = null, oid = 0;\n        //console.log(fnm, siz);\n        \n        if(false) {}\n        else if(fnm==\"EOF\") {  break;  }\n        else if(fnm==\"HEADER\") {\n            prms.bb = FromEMF._readBox(buff,loff);   loff+=16;  //console.log(fnm, prms.bb);\n            genv.StartPage(prms.bb[0],prms.bb[1],prms.bb[2],prms.bb[3]);\n            gst = UDOC.getState(prms.bb);\t\n        }\n        else if(fnm==\"SAVEDC\") sts.push(JSON.stringify(gst), JSON.stringify(prms));\n        else if(fnm==\"RESTOREDC\") {\n            var dif = rI32(buff, loff);  loff+=4;\n            while(dif<-1) {  sts.pop();  sts.pop();  }\n            prms = JSON.parse(sts.pop());  gst = JSON.parse(sts.pop());\n        }\n        else if(fnm==\"SELECTCLIPPATH\") {  gst.cpth = JSON.parse(JSON.stringify(gst.pth));  }\n        else if([\"SETMAPMODE\",\"SETPOLYFILLMODE\",\"SETBKMODE\"/*,\"SETVIEWPORTEXTEX\"*/,\"SETICMMODE\",\"SETROP2\",\"EXTSELECTCLIPRGN\"].indexOf(fnm)!=-1) {}\n        //else if(fnm==\"INTERSECTCLIPRECT\") {  var r=prms.crct=FromEMF._readBox(buff, loff);  /*var y0=r[1],y1=r[3]; if(y0>y1){r[1]=y1; r[3]=y0;}*/ console.log(prms.crct);  }\n        else if(fnm==\"SETMITERLIMIT\") gst.mlimit = rU32(buff, loff);\n        else if(fnm==\"SETTEXTCOLOR\") prms.tclr = [buff[loff]/255, buff[loff+1]/255, buff[loff+2]/255]; \n        else if(fnm==\"SETTEXTALIGN\") prms.talg = rU32(buff, loff);\n        else if(fnm==\"SETVIEWPORTEXTEX\" || fnm==\"SETVIEWPORTORGEX\") {\n            if(prms.vbb==null) prms.vbb=[];\n            var coff = fnm==\"SETVIEWPORTORGEX\" ? 0 : 2;\n            prms.vbb[coff  ] = rI32(buff, loff);  loff+=4;\n            prms.vbb[coff+1] = rI32(buff, loff);  loff+=4;\n            //console.log(prms.vbb);\n            if(fnm==\"SETVIEWPORTEXTEX\") FromEMF._updateCtm(prms, gst);\n        }\n        else if(fnm==\"SETWINDOWEXTEX\" || fnm==\"SETWINDOWORGEX\") {\n            var coff = fnm==\"SETWINDOWORGEX\" ? 0 : 2;\n            prms.wbb[coff  ] = rI32(buff, loff);  loff+=4;\n            prms.wbb[coff+1] = rI32(buff, loff);  loff+=4;\n            if(fnm==\"SETWINDOWEXTEX\") FromEMF._updateCtm(prms, gst);\n        }\n        //else if(fnm==\"SETMETARGN\") {}\n        else if(fnm==\"COMMENT\") {  var ds = rU32(buff, loff);  loff+=4;  }\n        \n        else if(fnm==\"SELECTOBJECT\") {\n            var ind = rU32(buff, loff);  loff+=4;\n            //console.log(ind.toString(16), tab, tab[ind]);\n            if     (ind==0x80000000) {  prms.fill=true ;  gst.colr=[1,1,1];  } // white brush\n            else if(ind==0x80000005) {  prms.fill=false;  } // null brush\n            else if(ind==0x80000007) {  prms.strk=true ;  prms.lwidth=1;  gst.COLR=[0,0,0];  } // black pen\n            else if(ind==0x80000008) {  prms.strk=false;  } // null  pen\n            else if(ind==0x8000000d) {} // system font\n            else if(ind==0x8000000e) {}  // device default font\n            else {\n                var co:any = tab[ind];  //console.log(ind, co);\n                if(co.t==\"b\") {\n                    prms.fill=co.stl!=1;\n                    if     (co.stl==0) {}\n                    else if(co.stl==1) {}\n                    else throw co.stl+\" e\";\n                    gst.colr=co.clr;\n                }\n                else if(co.t==\"p\") {\n                    prms.strk=co.stl!=5;\n                    gst.lwidth = co.wid;\n                    gst.COLR=co.clr;\n                }\n                else if(co.t==\"f\") {\n                    prms.fnt = co;\n                    gst.font.Tf = co.nam;\n                    gst.font.Tfs = Math.abs(co.hgh);\n                    gst.font.Tun = co.und;\n                }\n                else throw \"e\";\n            }\n        }\n        else if(fnm==\"DELETEOBJECT\") {\n            var ind = rU32(buff, loff);  loff+=4;\n            if(tab[ind]!=null) tab[ind]=null;\n            else throw \"e\";\n        }\n        else if(fnm==\"CREATEBRUSHINDIRECT\") {\n            oid = rU32(buff, loff);  loff+=4;\n            obj = {t:\"b\"};\n            obj.stl = rU32(buff, loff);  loff+=4;\n            obj.clr = [buff[loff]/255, buff[loff+1]/255, buff[loff+2]/255];  loff+=4;\n            obj.htc = rU32(buff, loff);  loff+=4;\n            //console.log(oid, obj);\n        }\n        else if(fnm==\"CREATEPEN\" || fnm==\"EXTCREATEPEN\") {\n            oid = rU32(buff, loff);  loff+=4;\n            obj = {t:\"p\"};\n            if(fnm==\"EXTCREATEPEN\") {\n                loff+=16;\n                obj.stl = rU32(buff, loff);  loff+=4;\n                obj.wid = rU32(buff, loff);  loff+=4;\n                //obj.stl = rU32(buff, loff);  \n                loff+=4;\n            } else {\n                obj.stl = rU32(buff, loff);  loff+=4;\n                obj.wid = rU32(buff, loff);  loff+=4;  loff+=4;\n            }\n            obj.clr = [buff[loff]/255, buff[loff+1]/255, buff[loff+2]/255];  loff+=4;\n        }\n        else if(fnm==\"EXTCREATEFONTINDIRECTW\") {\n            oid = rU32(buff, loff);  loff+=4;\n            obj = {t:\"f\", nam:\"\"};\n            obj.hgh = rI32(buff, loff);  loff += 4;\n            loff += 4*2;\n            obj.orn = rI32(buff, loff)/10;  loff+=4;\n            var wgh = rU32(buff, loff);  loff+=4;  //console.log(fnm, obj.orn, wgh);\n            //console.log(rU32(buff,loff), rU32(buff,loff+4), buff.slice(loff,loff+8));\n            obj.und = buff[loff+1];  obj.stk = buff[loff+2];  loff += 4*2;\n            while(rU(buff,loff)!=0) {  obj.nam+=String.fromCharCode(rU(buff,loff));  loff+=2;  }\n            if(wgh>500) obj.nam+=\"-Bold\";\n            //console.log(wgh, obj.nam);\n        }\n        else if(fnm==\"EXTTEXTOUTW\") {\n            //console.log(buff.slice(loff-8, loff-8+siz));\n            loff+=16;\n            var mod = rU32(buff, loff);  loff+=4;  //console.log(mod);\n            var scx = rF32(buff, loff);  loff+=4;\n            var scy = rF32(buff, loff);  loff+=4;\n            var rfx = rI32(buff, loff);  loff+=4;\n            var rfy = rI32(buff, loff);  loff+=4;\n            //console.log(mod, scx, scy,rfx,rfy);\n            \n            gst.font.Tm = [1,0,0,-1,0,0];\n            UDOC.M.rotate(gst.font.Tm, prms.fnt.orn*Math.PI/180);\n            UDOC.M.translate(gst.font.Tm, rfx, rfy);\n            \n            var alg = prms.talg;  //console.log(alg.toString(2));\n            if     ((alg&6)==6) gst.font.Tal = 2;\n            else if((alg&7)==0) gst.font.Tal = 0;\n            else throw alg+\" e\";\n            if((alg&24)==24) {}  // baseline\n            else if((alg&24)==0) UDOC.M.translate(gst.font.Tm, 0, gst.font.Tfs);\n            else throw \"e\";\n            \n            \n            var crs = rU32(buff, loff);  loff+=4;\n            var ofs = rU32(buff, loff);  loff+=4;\n            var ops = rU32(buff, loff);  loff+=4;  //if(ops!=0) throw \"e\";\n            //console.log(ofs,ops,crs);\n            loff+=16;\n            var ofD = rU32(buff, loff);  loff+=4;  //console.log(ops, ofD, loff, ofs+off-8);\n            ofs += off-8;  //console.log(crs, ops);\n            var str = \"\";\n            for(var i=0; i<crs; i++) {  var cc=rU(buff,ofs+i*2);  str+=String.fromCharCode(cc);  };\n            var oclr = gst.colr;  gst.colr = prms.tclr;\n            //console.log(str, gst.colr, gst.font.Tm);\n            //var otfs = gst.font.Tfs;  gst.font.Tfs *= 1/gst.ctm[0];\n            genv.PutText(gst, str, str.length*gst.font.Tfs*0.5);  gst.colr=oclr;\n            //gst.font.Tfs = otfs;\n            //console.log(rfx, rfy, scx, ops, rcX, rcY, rcW, rcH, offDx, str);\n        }\n        else if(fnm==\"BEGINPATH\") {  UDOC.G.newPath(gst);  }\n        else if(fnm==\"ENDPATH\"  ) {    }\n        else if(fnm==\"CLOSEFIGURE\") UDOC.G.closePath(gst);\n        else if(fnm==\"MOVETOEX\" ) {  UDOC.G.moveTo(gst, rI32(buff,loff), rI32(buff,loff+4));  }\n        else if(fnm==\"LINETO\"   ) {  \n            if(gst.pth.cmds.length==0) {  var im=gst.ctm.slice(0);  UDOC.M.invert(im);  var p = UDOC.M.multPoint(im, gst.cpos);  UDOC.G.moveTo(gst, p[0], p[1]);  }  \n            UDOC.G.lineTo(gst, rI32(buff,loff), rI32(buff,loff+4));  }\n        else if(fnm==\"POLYGON\" || fnm==\"POLYGON16\" || fnm==\"POLYLINE\" || fnm==\"POLYLINE16\" || fnm==\"POLYLINETO\" || fnm==\"POLYLINETO16\") {\n            loff+=16;\n            var ndf = fnm.startsWith(\"POLYGON\"), isTo = fnm.indexOf(\"TO\")!=-1;\n            var cnt = rU32(buff, loff);  loff+=4;\n            if(!isTo) UDOC.G.newPath(gst);\n            loff = FromEMF._drawPoly(buff,loff,cnt,gst, fnm.endsWith(\"16\")?2:4,  ndf, isTo);\n            if(!isTo) FromEMF._draw(genv,gst,prms, ndf);\n            //console.log(prms, gst.lwidth);\n            //console.log(JSON.parse(JSON.stringify(gst.pth)));\n        }\n        else if(fnm==\"POLYPOLYGON16\") {\n            loff+=16;\n            var ndf = fnm.startsWith(\"POLYPOLYGON\"), isTo = fnm.indexOf(\"TO\")!=-1;\n            var nop = rU32(buff, loff);  loff+=4;  loff+=4;\n            var pi = loff;  loff+= nop*4;\n            \n            if(!isTo) UDOC.G.newPath(gst);\n            for(var i=0; i<nop; i++) {\n                var ppp = rU(buff, pi+i*4);\n                loff = FromEMF._drawPoly(buff,loff,ppp,gst, fnm.endsWith(\"16\")?2:4, ndf, isTo);\n            }\n            if(!isTo) FromEMF._draw(genv,gst,prms, ndf);\n        }\n        else if(fnm==\"POLYBEZIER\" || fnm==\"POLYBEZIER16\" || fnm==\"POLYBEZIERTO\" || fnm==\"POLYBEZIERTO16\") {\n            loff+=16;\n            var is16 = fnm.endsWith(\"16\"), rC = is16?rI:rI32, nl = is16?2:4;\n            var cnt = rU32(buff, loff);  loff+=4;\n            if(fnm.indexOf(\"TO\")==-1) {\n                UDOC.G.moveTo(gst, rC(buff,loff), rC(buff,loff+nl));  loff+=2*nl;  cnt--;\n            }\n            while(cnt>0) {\n                UDOC.G.curveTo(gst, rC(buff,loff), rC(buff,loff+nl), rC(buff,loff+2*nl), rC(buff,loff+3*nl), rC(buff,loff+4*nl), rC(buff,loff+5*nl) );\n                loff+=6*nl;\n                cnt-=3;\n            }\n            //console.log(JSON.parse(JSON.stringify(gst.pth)));\n        }\n        else if(fnm==\"RECTANGLE\" || fnm==\"ELLIPSE\") {\n            UDOC.G.newPath(gst);\n            var bx = FromEMF._readBox(buff, loff);\n            if(fnm==\"RECTANGLE\") {\n                UDOC.G.moveTo(gst, bx[0],bx[1]);\n                UDOC.G.lineTo(gst, bx[2],bx[1]);\n                UDOC.G.lineTo(gst, bx[2],bx[3]);\n                UDOC.G.lineTo(gst, bx[0],bx[3]);\n            }\n            else {\n                var x = (bx[0]+bx[2])/2, y = (bx[1]+bx[3])/2;\n                UDOC.G.arc(gst,x,y,(bx[2]-bx[0])/2,0,2*Math.PI, false);\n            }\n            UDOC.G.closePath(gst);\n            FromEMF._draw(genv,gst,prms, true);\n            //console.log(prms, gst.lwidth);\n        }\n        else if(fnm==\"FILLPATH\"  ) genv.Fill(gst, false);\n        else if(fnm==\"STROKEPATH\") genv.Stroke(gst);\n        else if(fnm==\"STROKEANDFILLPATH\") {  genv.Fill(gst, false);  genv.Stroke(gst);  }\n        else if(fnm==\"SETWORLDTRANSFORM\" || fnm==\"MODIFYWORLDTRANSFORM\") {\n            var mat = [];\n            for(var i=0; i<6; i++) mat.push(rF32(buff,loff+i*4));  loff+=24;\n            //console.log(fnm, gst.ctm.slice(0), mat);\n            if(fnm==\"SETWORLDTRANSFORM\") gst.ctm=mat;\n            else {\n                var mod = rU32(buff,loff);  loff+=4;\n                if(mod==2) {  var om=gst.ctm;  gst.ctm=mat;  UDOC.M.concat(gst.ctm, om);  }\n                else throw \"e\";\n            }\n        }\n        else if(fnm==\"SETSTRETCHBLTMODE\") {  var sm = rU32(buff, loff);  loff+=4;  }\n        else if(fnm==\"STRETCHDIBITS\") {\n            var bx = FromEMF._readBox(buff, loff);  loff+=16;\n            var xD = rI32(buff, loff);  loff+=4;\n            var yD = rI32(buff, loff);  loff+=4;\n            var xS = rI32(buff, loff);  loff+=4;\n            var yS = rI32(buff, loff);  loff+=4;\n            var wS = rI32(buff, loff);  loff+=4;\n            var hS = rI32(buff, loff);  loff+=4;\n            var ofH = rU32(buff, loff)+off-8;  loff+=4;\n            var szH = rU32(buff, loff);  loff+=4;\n            var ofB = rU32(buff, loff)+off-8;  loff+=4;\n            var szB = rU32(buff, loff);  loff+=4;\n            var usg = rU32(buff, loff);  loff+=4;  if(usg!=0) throw \"e\";\n            var bop = rU32(buff, loff);  loff+=4;\n            var wD = rI32(buff, loff);  loff+=4;\n            var hD = rI32(buff, loff);  loff+=4;  //console.log(bop, wD, hD);\n            \n            //console.log(ofH, szH, ofB, szB, ofH+40);\n            //console.log(bx, xD,yD,wD,hD);\n            //console.log(xS,yS,wS,hS);\n            //console.log(ofH,szH,ofB,szB,usg,bop);\n            \n            var hl = rU32(buff, ofH);  ofH+=4;\n            var w  = rU32(buff, ofH);  ofH+=4;\n            var h  = rU32(buff, ofH);  ofH+=4;  if(w!=wS || h!=hS) throw \"e\";\n            var ps = rU  (buff, ofH);  ofH+=2;\n            var bc = rU  (buff, ofH);  ofH+=2;  if(bc!=8 && bc!=24 && bc!=32) throw bc+\" e\";\n            var cpr= rU32(buff, ofH);  ofH+=4;  if(cpr!=0) throw cpr+\" e\";\n            var sz = rU32(buff, ofH);  ofH+=4;\n            var xpm= rU32(buff, ofH);  ofH+=4;\n            var ypm= rU32(buff, ofH);  ofH+=4;\n            var cu = rU32(buff, ofH);  ofH+=4;\n            var ci = rU32(buff, ofH);  ofH+=4;  //console.log(hl, w, h, ps, bc, cpr, sz, xpm, ypm, cu, ci);\n            \n            //console.log(hl,w,h,\",\",xS,yS,wS,hS,\",\",xD,yD,wD,hD,\",\",xpm,ypm);\n            \n            var rl = Math.floor(((w * ps * bc + 31) & ~31) / 8);\n            var img = new Uint8Array(w*h*4);\n            if(bc==8) {\n                for(var y=0; y<h; y++) \n                    for(var x=0; x<w; x++) {\n                        var qi = (y*w+x)<<2, ind:any = buff[ofB+(h-1-y)*rl+x]<<2;\n                        img[qi  ] = buff[ofH+ind+2];\n                        img[qi+1] = buff[ofH+ind+1];\n                        img[qi+2] = buff[ofH+ind+0];\n                        img[qi+3] = 255;\n                    }\n            }\n            if(bc==24) {\n                for(var y=0; y<h; y++) \n                    for(var x=0; x<w; x++) {\n                        var qi = (y*w+x)<<2, ti=ofB+(h-1-y)*rl+x*3;\n                        img[qi  ] = buff[ti+2];\n                        img[qi+1] = buff[ti+1];\n                        img[qi+2] = buff[ti+0];\n                        img[qi+3] = 255;\n                    }\n            }\n            if(bc==32) {\n                for(var y=0; y<h; y++) \n                    for(var x=0; x<w; x++) {\n                        var qi = (y*w+x)<<2, ti=ofB+(h-1-y)*rl+x*4;\n                        img[qi  ] = buff[ti+2];\n                        img[qi+1] = buff[ti+1];\n                        img[qi+2] = buff[ti+0];\n                        img[qi+3] = buff[ti+3];\n                    }\n            }\n            \n            var ctm = gst.ctm.slice(0);\n            gst.ctm = [1,0,0,1,0,0];\n            UDOC.M.scale(gst.ctm, wD, -hD);\n            UDOC.M.translate(gst.ctm, xD, yD+hD);\n            UDOC.M.concat(gst.ctm, ctm);\n            genv.PutImage(gst, img, w, h);\n            gst.ctm = ctm;\n        }\n        else {\n            console.log(fnm, siz);\n        }\n        \n        if(obj!=null) tab[oid]=obj;\n        \n        off+=siz-8;\n    }\n    //genv.Stroke(gst);\n    genv.ShowPage();  genv.Done();\n}\nFromEMF._readBox = function(buff:any, off:any) {  var b=[];  for(var i=0; i<4; i++) b[i] = FromEMF.B.readInt(buff,off+i*4);  return b;  }\t\n\nFromEMF._updateCtm = function(prms:any, gst:any) {\n    var mat = [1,0,0,1,0,0];\n    var wbb = prms.wbb, bb = prms.bb, vbb=(prms.vbb && prms.vbb.length==4) ? prms.vbb:prms.bb;\n    \n    //var y0 = bb[1], y1 = bb[3];  bb[1]=Math.min(y0,y1);  bb[3]=Math.max(y0,y1);\n    \n    UDOC.M.translate(mat, -wbb[0],-wbb[1]);\n    UDOC.M.scale(mat, 1/wbb[2], 1/wbb[3]);\n    \n    UDOC.M.scale(mat, vbb[2], vbb[3]);\n    //UDOC.M.scale(mat, vbb[2]/(bb[2]-bb[0]), vbb[3]/(bb[3]-bb[1]));\n    \n    //UDOC.M.scale(mat, bb[2]-bb[0],bb[3]-bb[1]);\n    \n    gst.ctm = mat;\n}\nFromEMF._draw = function(genv:any, gst:any, prms:any, needFill:any) {\n    if(prms.fill && needFill     ) genv.Fill  (gst, false);\n    if(prms.strk && gst.lwidth!=0) genv.Stroke(gst);\n}\nFromEMF._drawPoly = function(buff:any, off:any, ppp:any, gst:any, nl:any, clos:any, justLine:any) {\n    var rS = nl==2 ? FromEMF.B.readShort : FromEMF.B.readInt;\n    for(var j=0; j<ppp; j++) {\n        var px = rS(buff, off);  off+=nl;  \n        var py = rS(buff, off);  off+=nl;\n        if(j==0 && !justLine) UDOC.G.moveTo(gst,px,py);  else UDOC.G.lineTo(gst,px,py);\n    }\n    if(clos) UDOC.G.closePath(gst);\n    return off;\n}\n\nFromEMF.B = {\n    uint8 : new Uint8Array(4),\n    readShort  : function(buff:any,p:any):any  {  var u8=FromEMF.B.uint8;  u8[0]=buff[p];  u8[1]=buff[p+1];  return FromEMF.B.int16 [0];  },\n    readUshort : function(buff:any,p:any):any  {  var u8=FromEMF.B.uint8;  u8[0]=buff[p];  u8[1]=buff[p+1];  return FromEMF.B.uint16[0];  },\n    readInt    : function(buff:any,p:any):any  {  var u8=FromEMF.B.uint8;  u8[0]=buff[p];  u8[1]=buff[p+1];  u8[2]=buff[p+2];  u8[3]=buff[p+3];  return FromEMF.B.int32 [0];  },\n    readUint   : function(buff:any,p:any):any  {  var u8=FromEMF.B.uint8;  u8[0]=buff[p];  u8[1]=buff[p+1];  u8[2]=buff[p+2];  u8[3]=buff[p+3];  return FromEMF.B.uint32[0];  },\n    readFloat  : function(buff:any,p:any):any  {  var u8=FromEMF.B.uint8;  u8[0]=buff[p];  u8[1]=buff[p+1];  u8[2]=buff[p+2];  u8[3]=buff[p+3];  return FromEMF.B.flot32[0];  },\n    readASCII  : function(buff:any,p:any,l:any):any {  var s = \"\";  for(var i=0; i<l; i++) s += String.fromCharCode(buff[p+i]);  return s;    }\n}\nFromEMF.B.int16  = new Int16Array (FromEMF.B.uint8.buffer);\nFromEMF.B.uint16 = new Uint16Array(FromEMF.B.uint8.buffer);\nFromEMF.B.int32  = new Int32Array (FromEMF.B.uint8.buffer);\nFromEMF.B.uint32 = new Uint32Array(FromEMF.B.uint8.buffer);\nFromEMF.B.flot32 = new Float32Array(FromEMF.B.uint8.buffer);\n\n\nFromEMF.C = {\n    EMR_HEADER : 0x00000001,\n    EMR_POLYBEZIER : 0x00000002,\n    EMR_POLYGON : 0x00000003,\n    EMR_POLYLINE : 0x00000004,\n    EMR_POLYBEZIERTO : 0x00000005,\n    EMR_POLYLINETO : 0x00000006,\n    EMR_POLYPOLYLINE : 0x00000007,\n    EMR_POLYPOLYGON : 0x00000008,\n    EMR_SETWINDOWEXTEX : 0x00000009,\n    EMR_SETWINDOWORGEX : 0x0000000A,\n    EMR_SETVIEWPORTEXTEX : 0x0000000B,\n    EMR_SETVIEWPORTORGEX : 0x0000000C,\n    EMR_SETBRUSHORGEX : 0x0000000D,\n    EMR_EOF : 0x0000000E,\n    EMR_SETPIXELV : 0x0000000F,\n    EMR_SETMAPPERFLAGS : 0x00000010,\n    EMR_SETMAPMODE : 0x00000011,\n    EMR_SETBKMODE : 0x00000012,\n    EMR_SETPOLYFILLMODE : 0x00000013,\n    EMR_SETROP2 : 0x00000014,\n    EMR_SETSTRETCHBLTMODE : 0x00000015,\n    EMR_SETTEXTALIGN : 0x00000016,\n    EMR_SETCOLORADJUSTMENT : 0x00000017,\n    EMR_SETTEXTCOLOR : 0x00000018,\n    EMR_SETBKCOLOR : 0x00000019,\n    EMR_OFFSETCLIPRGN : 0x0000001A,\n    EMR_MOVETOEX : 0x0000001B,\n    EMR_SETMETARGN : 0x0000001C,\n    EMR_EXCLUDECLIPRECT : 0x0000001D,\n    EMR_INTERSECTCLIPRECT : 0x0000001E,\n    EMR_SCALEVIEWPORTEXTEX : 0x0000001F,\n    EMR_SCALEWINDOWEXTEX : 0x00000020,\n    EMR_SAVEDC : 0x00000021,\n    EMR_RESTOREDC : 0x00000022,\n    EMR_SETWORLDTRANSFORM : 0x00000023,\n    EMR_MODIFYWORLDTRANSFORM : 0x00000024,\n    EMR_SELECTOBJECT : 0x00000025,\n    EMR_CREATEPEN : 0x00000026,\n    EMR_CREATEBRUSHINDIRECT : 0x00000027,\n    EMR_DELETEOBJECT : 0x00000028,\n    EMR_ANGLEARC : 0x00000029,\n    EMR_ELLIPSE : 0x0000002A,\n    EMR_RECTANGLE : 0x0000002B,\n    EMR_ROUNDRECT : 0x0000002C,\n    EMR_ARC : 0x0000002D,\n    EMR_CHORD : 0x0000002E,\n    EMR_PIE : 0x0000002F,\n    EMR_SELECTPALETTE : 0x00000030,\n    EMR_CREATEPALETTE : 0x00000031,\n    EMR_SETPALETTEENTRIES : 0x00000032,\n    EMR_RESIZEPALETTE : 0x00000033,\n    EMR_REALIZEPALETTE : 0x00000034,\n    EMR_EXTFLOODFILL : 0x00000035,\n    EMR_LINETO : 0x00000036,\n    EMR_ARCTO : 0x00000037,\n    EMR_POLYDRAW : 0x00000038,\n    EMR_SETARCDIRECTION : 0x00000039,\n    EMR_SETMITERLIMIT : 0x0000003A,\n    EMR_BEGINPATH : 0x0000003B,\n    EMR_ENDPATH : 0x0000003C,\n    EMR_CLOSEFIGURE : 0x0000003D,\n    EMR_FILLPATH : 0x0000003E,\n    EMR_STROKEANDFILLPATH : 0x0000003F,\n    EMR_STROKEPATH : 0x00000040,\n    EMR_FLATTENPATH : 0x00000041,\n    EMR_WIDENPATH : 0x00000042,\n    EMR_SELECTCLIPPATH : 0x00000043,\n    EMR_ABORTPATH : 0x00000044,\n    EMR_COMMENT : 0x00000046,\n    EMR_FILLRGN : 0x00000047,\n    EMR_FRAMERGN : 0x00000048,\n    EMR_INVERTRGN : 0x00000049,\n    EMR_PAINTRGN : 0x0000004A,\n    EMR_EXTSELECTCLIPRGN : 0x0000004B,\n    EMR_BITBLT : 0x0000004C,\n    EMR_STRETCHBLT : 0x0000004D,\n    EMR_MASKBLT : 0x0000004E,\n    EMR_PLGBLT : 0x0000004F,\n    EMR_SETDIBITSTODEVICE : 0x00000050,\n    EMR_STRETCHDIBITS : 0x00000051,\n    EMR_EXTCREATEFONTINDIRECTW : 0x00000052,\n    EMR_EXTTEXTOUTA : 0x00000053,\n    EMR_EXTTEXTOUTW : 0x00000054,\n    EMR_POLYBEZIER16 : 0x00000055,\n    EMR_POLYGON16 : 0x00000056,\n    EMR_POLYLINE16 : 0x00000057,\n    EMR_POLYBEZIERTO16 : 0x00000058,\n    EMR_POLYLINETO16 : 0x00000059,\n    EMR_POLYPOLYLINE16 : 0x0000005A,\n    EMR_POLYPOLYGON16 : 0x0000005B,\n    EMR_POLYDRAW16 : 0x0000005C,\n    EMR_CREATEMONOBRUSH : 0x0000005D,\n    EMR_CREATEDIBPATTERNBRUSHPT : 0x0000005E,\n    EMR_EXTCREATEPEN : 0x0000005F,\n    EMR_POLYTEXTOUTA : 0x00000060,\n    EMR_POLYTEXTOUTW : 0x00000061,\n    EMR_SETICMMODE : 0x00000062,\n    EMR_CREATECOLORSPACE : 0x00000063,\n    EMR_SETCOLORSPACE : 0x00000064,\n    EMR_DELETECOLORSPACE : 0x00000065,\n    EMR_GLSRECORD : 0x00000066,\n    EMR_GLSBOUNDEDRECORD : 0x00000067,\n    EMR_PIXELFORMAT : 0x00000068,\n    EMR_DRAWESCAPE : 0x00000069,\n    EMR_EXTESCAPE : 0x0000006A,\n    EMR_SMALLTEXTOUT : 0x0000006C,\n    EMR_FORCEUFIMAPPING : 0x0000006D,\n    EMR_NAMEDESCAPE : 0x0000006E,\n    EMR_COLORCORRECTPALETTE : 0x0000006F,\n    EMR_SETICMPROFILEA : 0x00000070,\n    EMR_SETICMPROFILEW : 0x00000071,\n    EMR_ALPHABLEND : 0x00000072,\n    EMR_SETLAYOUT : 0x00000073,\n    EMR_TRANSPARENTBLT : 0x00000074,\n    EMR_GRADIENTFILL : 0x00000076,\n    EMR_SETLINKEDUFIS : 0x00000077,\n    EMR_SETTEXTJUSTIFICATION : 0x00000078,\n    EMR_COLORMATCHTOTARGETW : 0x00000079,\n    EMR_CREATECOLORSPACEW : 0x0000007A\n};\nFromEMF.K = [];\n\n// (function() {\n//     var inp, out, stt;\n//     inp = FromEMF.C;   out = FromEMF.K;   stt=4;\n//     for(var p in inp) out[inp[p]] = p.slice(stt);\n// }  )();\n\n\n\nexport let ToContext2D:any = function (needPage:any, scale:any)\n{\n    this.canvas = document.createElement(\"canvas\");\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.bb = null;\n    this.currPage = 0;\n    this.needPage = needPage;\n    this.scale = scale;\n}\nToContext2D.prototype.StartPage = function(x:any,y:any,w:any,h:any) {\n    if(this.currPage!=this.needPage) return;\n    this.bb = [x,y,w,h];\n    var scl = this.scale, dpr = window.devicePixelRatio;\n    var cnv = this.canvas, ctx = this.ctx;\n    cnv.width = Math.round(w*scl);  cnv.height = Math.round(h*scl);\n    ctx.translate(0,h*scl);  ctx.scale(scl,-scl);\n    cnv.setAttribute(\"style\", \"border:1px solid; width:\"+(cnv.width/dpr)+\"px; height:\"+(cnv.height/dpr)+\"px\");\n}\nToContext2D.prototype.Fill = function(gst:any, evenOdd:any) {\n    if(this.currPage!=this.needPage) return;\n    var ctx = this.ctx;\n    ctx.beginPath();\n    this._setStyle(gst, ctx);\n    this._draw(gst.pth, ctx);\n    ctx.fill();\n}\nToContext2D.prototype.Stroke = function(gst:any) {\n    if(this.currPage!=this.needPage) return;\n    var ctx = this.ctx;\n    ctx.beginPath();\n    this._setStyle(gst, ctx);\n    this._draw(gst.pth, ctx);\n    ctx.stroke();\n}\nToContext2D.prototype.PutText = function(gst:any, str:any, stw:any) {\n    if(this.currPage!=this.needPage) return;\n    var scl = this._scale(gst.ctm);\n    var ctx = this.ctx;\n    this._setStyle(gst, ctx);\n    ctx.save();\n    var m = [1,0,0,-1,0,0];  this._concat(m, gst.font.Tm);  this._concat(m, gst.ctm);\n    //console.log(str, m, gst);  throw \"e\";\n    ctx.transform(m[0],m[1],m[2],m[3],m[4],m[5]);\n    ctx.fillText(str,0,0);\n    ctx.restore();\n}\nToContext2D.prototype.PutImage = function(gst:any, buff:any, w:any, h:any, msk:any) {\n    if(this.currPage!=this.needPage) return;\n    var ctx = this.ctx;\n    \n    if(buff.length==w*h*4) {\n        buff = buff.slice(0);\n        if(msk && msk.length==w*h*4) for(var i=0; i<buff.length; i+=4) buff[i+3] = msk[i+1];\n        \n        var cnv = document.createElement(\"canvas\"), cctx = cnv.getContext(\"2d\");\n        cnv.width = w;  cnv.height = h;\n        var imgd = cctx.createImageData(w,h);\n        for(var i=0; i<buff.length; i++) imgd.data[i]=buff[i];\n        cctx.putImageData(imgd,0,0);\n        \n        ctx.save();\n        var m = [1,0,0,1,0,0];  this._concat(m, [1/w,0,0,-1/h,0,1]);  this._concat(m, gst.ctm);\n        ctx.transform(m[0],m[1],m[2],m[3],m[4],m[5]);\n        ctx.drawImage(cnv,0,0);\n        ctx.restore();\n    }\n}\nToContext2D.prototype.ShowPage = function() {  this.currPage++;  }\nToContext2D.prototype.Done = function() {}\n\n\nfunction _flt(n:any)  {  return \"\"+parseFloat(n.toFixed(2));  }\n\nToContext2D.prototype._setStyle = function(gst:any, ctx:any) {\n    var scl = this._scale(gst.ctm);\n    ctx.fillStyle = this._getFill(gst.colr, gst.ca, ctx);\n    ctx.strokeStyle=this._getFill(gst.COLR, gst.CA, ctx);\n    \n    ctx.lineCap = [\"butt\",\"round\",\"square\"][gst.lcap];\n    ctx.lineJoin= [\"miter\",\"round\",\"bevel\"][gst.ljoin];\n    ctx.lineWidth=gst.lwidth*scl;\n    var dsh = gst.dash.slice(0);  for(var i=0; i<dsh.length; i++) dsh[i] = _flt(dsh[i]*scl);\n    ctx.setLineDash(dsh); \n    ctx.miterLimit = gst.mlimit*scl;\n    \n    var fn = gst.font.Tf, ln = fn.toLowerCase();\n    var p0 = ln.indexOf(\"bold\")!=-1 ? \"bold \" : \"\";\n    var p1 = (ln.indexOf(\"italic\")!=-1 || ln.indexOf(\"oblique\")!=-1) ? \"italic \" : \"\";\n    ctx.font = p0+p1 + gst.font.Tfs+\"px \\\"\"+fn+\"\\\"\";\n}\nToContext2D.prototype._getFill = function(colr:any, ca:any, ctx:any)\n{\n    if(colr.typ==null) return this._colr(colr,ca);\n    else {\n        var grd = colr, crd = grd.crds, mat = grd.mat, scl=this._scale(mat), gf;\n        if     (grd.typ==\"lin\") {\n            var p0 = this._multPoint(mat,crd.slice(0,2)), p1 = this._multPoint(mat,crd.slice(2));\n            gf=ctx.createLinearGradient(p0[0],p0[1],p1[0],p1[1]);\n        }\n        else if(grd.typ==\"rad\") {\n            var p0 = this._multPoint(mat,crd.slice(0,2)), p1 = this._multPoint(mat,crd.slice(3));\n            gf=ctx.createRadialGradient(p0[0],p0[1],crd[2]*scl,p1[0],p1[1],crd[5]*scl);\n        }\n        for(var i=0; i<grd.grad.length; i++)  gf.addColorStop(grd.grad[i][0],this._colr(grd.grad[i][1], ca));\n        return gf;\n    }\n}\nToContext2D.prototype._colr  = function(c:any,a:any) {  return \"rgba(\"+Math.round(c[0]*255)+\",\"+Math.round(c[1]*255)+\",\"+Math.round(c[2]*255)+\",\"+a+\")\";  };\nToContext2D.prototype._scale = function(m:any)  {  return Math.sqrt(Math.abs(m[0]*m[3]-m[1]*m[2]));  };\nToContext2D.prototype._concat= function(m:any,w:any  ) {  \n        var a=m[0],b=m[1],c=m[2],d=m[3],tx=m[4],ty=m[5];\n        m[0] = (a *w[0])+(b *w[2]);       m[1] = (a *w[1])+(b *w[3]);\n        m[2] = (c *w[0])+(d *w[2]);       m[3] = (c *w[1])+(d *w[3]);\n        m[4] = (tx*w[0])+(ty*w[2])+w[4];  m[5] = (tx*w[1])+(ty*w[3])+w[5]; \n}\nToContext2D.prototype._multPoint= function(m:any, p:any) {  var x=p[0],y=p[1];  return [x*m[0]+y*m[2]+m[4],   x*m[1]+y*m[3]+m[5]];  },\nToContext2D.prototype._draw  = function(path:any, ctx:any)\n{\n    var c = 0, crds = path.crds;\n    for(var j=0; j<path.cmds.length; j++) {\n        var cmd = path.cmds[j];\n        if     (cmd==\"M\") {  ctx.moveTo(crds[c], crds[c+1]);  c+=2;  }\n        else if(cmd==\"L\") {  ctx.lineTo(crds[c], crds[c+1]);  c+=2;  }\n        else if(cmd==\"C\") {  ctx.bezierCurveTo(crds[c], crds[c+1], crds[c+2], crds[c+3], crds[c+4], crds[c+5]);  c+=6;  }\n        else if(cmd==\"Q\") {  ctx.quadraticCurveTo(crds[c], crds[c+1], crds[c+2], crds[c+3]);  c+=4;  }\n        else if(cmd==\"Z\") {  ctx.closePath();  }\n    }\n}\n","import { columeHeader_word, columeHeader_word_index } from \"./constant\";\nimport { IluckySheetSelection } from \"../ToLuckySheet/ILuck\";\nimport { IattributeList, stringToNum} from \"../ICommon\";\n\n\nexport function getRangetxt(range:IluckySheetSelection, sheettxt:string) {\n\n    let row0 = range[\"row\"][0], row1 = range[\"row\"][1];\n    let column0 = range[\"column\"][0], column1 = range[\"column\"][1];\n\n    if (row0 == null && row1 == null) {\n        return sheettxt + chatatABC(column0) + \":\" + chatatABC(column1);\n    }\n    else if (column0 == null && column1 == null) {\n        return sheettxt + (row0 + 1) + \":\" + (row1 + 1);\n    }\n    else {\n        if (column0 == column1 && row0 == row1) {\n            return sheettxt + chatatABC(column0) + (row0 + 1);\n        }\n        else {\n            return sheettxt + chatatABC(column0) + (row0 + 1) + \":\" + chatatABC(column1) + (row1 + 1);\n        }\n    }\n}\n\n\nexport function getcellrange (txt:string, sheets:IattributeList={}, sheetId:string=\"1\") {\n    let val = txt.split(\"!\");\n\n    let sheettxt = \"\",\n        rangetxt = \"\",\n        sheetIndex = -1;\n\n    if (val.length > 1) {\n        sheettxt = val[0];\n        rangetxt = val[1];\n        \n        let si = sheets[sheettxt];\n        if(si==null){\n            sheetIndex = parseInt(sheetId);\n        }\n        else{\n            sheetIndex = parseInt(si);\n        }\n    } \n    else {\n        sheetIndex = parseInt(sheetId);\n        rangetxt = val[0];\n    }\n    \n    if (rangetxt.indexOf(\":\") == -1) {\n        let row = parseInt(rangetxt.replace(/[^0-9]/g, \"\")) - 1;\n        let col = ABCatNum(rangetxt.replace(/[^A-Za-z]/g, \"\"));\n\n        if (!isNaN(row) && !isNaN(col)) {\n            return {\n                \"row\": [row, row],\n                \"column\": [col, col],\n                \"sheetIndex\": sheetIndex\n            };\n        }\n        else {\n            return null;\n        }\n    } \n    else {\n        let rangetxtArray:string[] = rangetxt.split(\":\");\n        let row = [],col = [];\n        row[0] = parseInt(rangetxtArray[0].replace(/[^0-9]/g, \"\")) - 1;\n        row[1] = parseInt(rangetxtArray[1].replace(/[^0-9]/g, \"\")) - 1;\n        // if (isNaN(row[0])) {\n        //     row[0] = 0;\n        // }\n        // if (isNaN(row[1])) {\n        //     row[1] = sheetdata.length - 1;\n        // }\n        if (row[0] > row[1]) {\n            return null;\n        }\n        col[0] = ABCatNum(rangetxtArray[0].replace(/[^A-Za-z]/g, \"\"));\n        col[1] = ABCatNum(rangetxtArray[1].replace(/[^A-Za-z]/g, \"\"));\n        // if (isNaN(col[0])) {\n        //     col[0] = 0;\n        // }\n        // if (isNaN(col[1])) {\n        //     col[1] = sheetdata[0].length - 1;\n        // }\n        if (col[0] > col[1]) {\n            return null;\n        }\n\n        return {\n            \"row\": row,\n            \"column\": col,\n            \"sheetIndex\": sheetIndex\n        };\n    }\n}\n\n//列下标  字母转数字\nfunction ABCatNum(abc:string) {\n    abc = abc.toUpperCase();\n\n    let abc_len = abc.length;\n    if (abc_len == 0) {\n        return NaN;\n    }\n\n    let abc_array = abc.split(\"\");\n    let wordlen = columeHeader_word.length;\n    let ret = 0;\n\n    for (let i = abc_len - 1; i >= 0; i--) {\n        if (i == abc_len - 1) {\n            ret += columeHeader_word_index[abc_array[i]];\n        }\n        else {\n            ret += Math.pow(wordlen, abc_len - i - 1) * (columeHeader_word_index[abc_array[i]] + 1);\n        }\n    }\n\n    return ret;\n}\n\n//列下标  数字转字母\nfunction chatatABC(index:number) {\n    let wordlen = columeHeader_word.length;\n\n    if (index < wordlen) {\n        return columeHeader_word[index];\n    }\n    else {\n        let last = 0, pre = 0, ret = \"\";\n        let i = 1, n = 0;\n\n        while (index >= (wordlen / (wordlen - 1)) * (Math.pow(wordlen, i++) - 1)) {\n            n = i;\n        }\n\n        let index_ab = index - (wordlen / (wordlen - 1)) * (Math.pow(wordlen, n - 1) - 1);//970\n        last = index_ab + 1;\n\n        for (let x = n; x > 0; x--) {\n            let last1 = last, x1 = x;//-702=268, 3\n\n            if (x == 1) {\n                last1 = last1 % wordlen;\n\n                if (last1 == 0) {\n                    last1 = 26;\n                }\n\n                return ret + columeHeader_word[last1 - 1];\n            }\n\n            last1 = Math.ceil(last1 / Math.pow(wordlen, x - 1));\n            //last1 = last1 % wordlen;\n            ret += columeHeader_word[last1 - 1];\n\n            if (x > 1) {\n                last = last - (last1 - 1) * wordlen;\n            }\n        }\n    }\n}\n\n/** \n * @return ratio, default 0.75 1in = 2.54cm = 25.4mm = 72pt = 6pc,  pt = 1/72 In, px = 1/dpi In\n*/\nexport function getptToPxRatioByDPI():number{\n    return 72/96;\n}\n\n/** \n * @emus EMUs, Excel drawing unit\n * @return pixel\n*/\nexport function getPxByEMUs(emus:number){\n    if(emus==null){\n        return 0;\n    }\n    let inch = emus/914400;\n    let pt = inch*72;\n    let px = pt / getptToPxRatioByDPI();\n    return px;\n}\n\n/** \n * @dom xml attribute object\n * @attr attribute name\n * @d if attribute is null, return default value \n * @return attribute value\n*/\nexport function getXmlAttibute(dom:IattributeList, attr:string, d:string){\n    let value = dom[attr];\n    value = value==null?d:value;\n    return value;\n}\n\n/** \n * @columnWidth Excel column width\n * @return pixel column width\n*/\nexport function getColumnWidthPixel(columnWidth:number){\n    let pix = Math.round((columnWidth-0.83) * 8 + 5);\n    return pix;\n}\n\n/** \n * @rowHeight Excel row height\n * @return pixel row height\n*/\nexport function getRowHeightPixel(rowHeight:number){\n    let pix = Math.round(rowHeight/getptToPxRatioByDPI());\n    return pix;\n}\n\nexport function LightenDarkenColor(sixColor:string, tint:number){\n    let hex:string = sixColor.substring(sixColor.length-6,sixColor.length);\n    let rgbArray:number[] = hexToRgbArray(\"#\"+hex);\n    let hslArray = rgbToHsl(rgbArray[0], rgbArray[1],rgbArray[2]);\n    if(tint>0){\n        hslArray[2] = hslArray[2] * (1.0-tint) + tint;\n    }\n    else if(tint<0){\n        hslArray[2] = hslArray[2] * (1.0 + tint)\n    }\n    else{\n        return \"#\"+hex;\n    }\n\n    let newRgbArray = hslToRgb(hslArray[0],hslArray[1],hslArray[2]);\n\n    return rgbToHex(\"RGB(\" + newRgbArray.join(\",\") + \")\");\n}\n\n\nfunction rgbToHex(rgb:string){\n    //十六进制颜色值的正则表达式\n    var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;\n    // 如果是rgb颜色表示\n    if (/^(rgb|RGB)/.test(rgb)) {\n        var aColor = rgb.replace(/(?:\\(|\\)|rgb|RGB)*/g, \"\").split(\",\");\n        var strHex = \"#\";\n        for (var i=0; i<aColor.length; i++) {\n            var hex = Number(aColor[i]).toString(16);\n            if (hex.length < 2) {\n                hex = '0' + hex;    \n            }\n            strHex += hex;\n        }\n        if (strHex.length !== 7) {\n            strHex = rgb;    \n        }\n        return strHex;\n    } else if (reg.test(rgb)) {\n        var aNum = rgb.replace(/#/,\"\").split(\"\");\n        if (aNum.length === 6) {\n            return rgb;    \n        } else if(aNum.length === 3) {\n            var numHex = \"#\";\n            for (var i=0; i<aNum.length; i+=1) {\n                numHex += (aNum[i] + aNum[i]);\n            }\n            return numHex;\n        }\n    }\n    return rgb;\n}\n\nfunction hexToRgb(hex:string){\n    var sColor = hex.toLowerCase();\n    //十六进制颜色值的正则表达式\n    var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;\n    // 如果是16进制颜色\n    if (sColor && reg.test(sColor)) {\n        if (sColor.length === 4) {\n            var sColorNew = \"#\";\n            for (var i=1; i<4; i+=1) {\n                sColorNew += sColor.slice(i, i+1).concat(sColor.slice(i, i+1));    \n            }\n            sColor = sColorNew;\n        }\n        //处理六位的颜色值\n        var sColorChange = [];\n        for (var i=1; i<7; i+=2) {\n            sColorChange.push(parseInt(\"0x\"+sColor.slice(i, i+2)));    \n        }\n        return \"RGB(\" + sColorChange.join(\",\") + \")\";\n    }\n    return sColor;\n}\n\nfunction hexToRgbArray(hex:string){\n    var sColor = hex.toLowerCase();\n    //十六进制颜色值的正则表达式\n    var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;\n    // 如果是16进制颜色\n    if (sColor && reg.test(sColor)) {\n        if (sColor.length === 4) {\n            var sColorNew = \"#\";\n            for (var i=1; i<4; i+=1) {\n                sColorNew += sColor.slice(i, i+1).concat(sColor.slice(i, i+1));    \n            }\n            sColor = sColorNew;\n        }\n        //处理六位的颜色值\n        var sColorChange:number[] = [];\n        for (var i=1; i<7; i+=2) {\n            sColorChange.push(parseInt(\"0x\"+sColor.slice(i, i+2)));    \n        }\n        return  sColorChange;\n    }\n    return null;\n}\n\n/**\n * HSL颜色值转换为RGB. \n * 换算公式改编自 http://en.wikipedia.org/wiki/HSL_color_space.\n * h, s, 和 l 设定在 [0, 1] 之间\n * 返回的 r, g, 和 b 在 [0, 255]之间\n *\n * @param   Number  h       色相\n * @param   Number  s       饱和度\n * @param   Number  l       亮度\n * @return  Array           RGB色值数值\n */\nfunction hslToRgb(h:number, s:number, l:number) {\n    var r, g, b;\n\n    if(s == 0) {\n        r = g = b = l; // achromatic\n    } else {\n        var hue2rgb = function hue2rgb(p:number, q:number, t:number) {\n            if(t < 0) t += 1;\n            if(t > 1) t -= 1;\n            if(t < 1/6) return p + (q - p) * 6 * t;\n            if(t < 1/2) return q;\n            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n            return p;\n        }\n\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n}\n\n\n/**\n * RGB 颜色值转换为 HSL.\n * 转换公式参考自 http://en.wikipedia.org/wiki/HSL_color_space.\n * r, g, 和 b 需要在 [0, 255] 范围内\n * 返回的 h, s, 和 l 在 [0, 1] 之间\n *\n * @param   Number  r       红色色值\n * @param   Number  g       绿色色值\n * @param   Number  b       蓝色色值\n * @return  Array           HSL各值数组\n */\nfunction rgbToHsl(r:number, g:number, b:number) {\n    r /= 255, g /= 255, b /= 255;\n    var max = Math.max(r, g, b), min = Math.min(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if (max == min){ \n        h = s = 0; // achromatic\n    } else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n\n    return [h, s, l];\n}\n \nexport function generateRandomIndex(prefix:string):string {\n    if(prefix == null){\n        prefix = \"Sheet\";\n    }\n\n    let userAgent = window.navigator.userAgent.replace(/[^a-zA-Z0-9]/g, \"\").split(\"\");\n\n    let mid = \"\";\n\n    for(let i = 0; i < 5; i++){\n        mid += userAgent[Math.round(Math.random() * (userAgent.length - 1))];\n    }\n\n    let time = new Date().getTime();\n\n    return prefix + \"_\" + mid + \"_\" + time;\n}\n\n\nexport function escapeCharacter(str:string){\n    if(str==null || str.length==0){\n        return str;\n    }\n\n    return str.replace(/&amp;/g, \"&\").replace(/&quot;/g, '\"').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&nbsp;/g, ' ').replace(/&apos;/g, \"'\").replace(/&iexcl;/g, \"¡\").replace(/&cent;/g, \"¢\").replace(/&pound;/g, \"£\").replace(/&curren;/g, \"¤\").replace(/&yen;/g, \"¥\").replace(/&brvbar;/g, \"¦\").replace(/&sect;/g, \"§\").replace(/&uml;/g, \"¨\").replace(/&copy;/g, \"©\").replace(/&ordf;/g, \"ª\").replace(/&laquo;/g, \"«\").replace(/&not;/g, \"¬\").replace(/&shy;/g, \"­\").replace(/&reg;/g, \"®\").replace(/&macr;/g, \"¯\").replace(/&deg;/g, \"°\").replace(/&plusmn;/g, \"±\").replace(/&sup2;/g, \"²\").replace(/&sup3;/g, \"³\").replace(/&acute;/g, \"´\").replace(/&micro;/g, \"µ\").replace(/&para;/g, \"¶\").replace(/&middot;/g, \"·\").replace(/&cedil;/g, \"¸\").replace(/&sup1;/g, \"¹\").replace(/&ordm;/g, \"º\").replace(/&raquo;/g, \"»\").replace(/&frac14;/g, \"¼\").replace(/&frac12;/g, \"½\").replace(/&frac34;/g, \"¾\").replace(/&iquest;/g, \"¿\").replace(/&times;/g, \"×\").replace(/&divide;/g, \"÷\").replace(/&Agrave;/g, \"À\").replace(/&Aacute;/g, \"Á\").replace(/&Acirc;/g, \"Â\").replace(/&Atilde;/g, \"Ã\").replace(/&Auml;/g, \"Ä\").replace(/&Aring;/g, \"Å\").replace(/&AElig;/g, \"Æ\").replace(/&Ccedil;/g, \"Ç\").replace(/&Egrave;/g, \"È\").replace(/&Eacute;/g, \"É\").replace(/&Ecirc;/g, \"Ê\").replace(/&Euml;/g, \"Ë\").replace(/&Igrave;/g, \"Ì\").replace(/&Iacute;/g, \"Í\").replace(/&Icirc;/g, \"Î\").replace(/&Iuml;/g, \"Ï\").replace(/&ETH;/g, \"Ð\").replace(/&Ntilde;/g, \"Ñ\").replace(/&Ograve;/g, \"Ò\").replace(/&Oacute;/g, \"Ó\").replace(/&Ocirc;/g, \"Ô\").replace(/&Otilde;/g, \"Õ\").replace(/&Ouml;/g, \"Ö\").replace(/&Oslash;/g, \"Ø\").replace(/&Ugrave;/g, \"Ù\").replace(/&Uacute;/g, \"Ú\").replace(/&Ucirc;/g, \"Û\").replace(/&Uuml;/g, \"Ü\").replace(/&Yacute;/g, \"Ý\").replace(/&THORN;/g, \"Þ\").replace(/&szlig;/g, \"ß\").replace(/&agrave;/g, \"à\").replace(/&aacute;/g, \"á\").replace(/&acirc;/g, \"â\").replace(/&atilde;/g, \"ã\").replace(/&auml;/g, \"ä\").replace(/&aring;/g, \"å\").replace(/&aelig;/g, \"æ\").replace(/&ccedil;/g, \"ç\").replace(/&egrave;/g, \"è\").replace(/&eacute;/g, \"é\").replace(/&ecirc;/g, \"ê\").replace(/&euml;/g, \"ë\").replace(/&igrave;/g, \"ì\").replace(/&iacute;/g, \"í\").replace(/&icirc;/g, \"î\").replace(/&iuml;/g, \"ï\").replace(/&eth;/g, \"ð\").replace(/&ntilde;/g, \"ñ\").replace(/&ograve;/g, \"ò\").replace(/&oacute;/g, \"ó\").replace(/&ocirc;/g, \"ô\").replace(/&otilde;/g, \"õ\").replace(/&ouml;/g, \"ö\").replace(/&oslash;/g, \"ø\").replace(/&ugrave;/g, \"ù\").replace(/&uacute;/g, \"ú\").replace(/&ucirc;/g, \"û\").replace(/&uuml;/g, \"ü\").replace(/&yacute;/g, \"ý\").replace(/&thorn;/g, \"þ\").replace(/&yuml;/g, \"ÿ\");\n\n}\n\n\nexport class fromulaRef {\n\n    static operator = '==|!=|<>|<=|>=|=|+|-|>|<|/|*|%|&|^'\n    static error = {\n        v: \"#VALUE!\",    //错误的参数或运算符\n        n: \"#NAME?\",     //公式名称错误\n        na: \"#N/A\",      //函数或公式中没有可用数值\n        r: \"#REF!\",      //删除了由其他公式引用的单元格\n        d: \"#DIV/0!\",    //除数是0或空单元格\n        nm: \"#NUM!\",     //当公式或函数中某个数字有问题时\n        nl: \"#NULL!\",    //交叉运算符（空格）使用不正确\n        sp: \"#SPILL!\"    //数组范围有其它值\n    }\n\n    static operatorjson:stringToNum = null\n\n    static trim(str:string) {  \n        if(str == null){  \n            str = \"\";  \n        }  \n        return str.replace(/(^\\s*)|(\\s*$)/g, \"\");  \n    }\n\n    static functionCopy(txt:string, mode:string, step:number) {\n        let _this = this;\n\n        if (_this.operatorjson == null) {\n            let arr = _this.operator.split(\"|\"),\n                op:stringToNum = {};\n\n            for (let i = 0; i < arr.length; i++) {\n                op[arr[i].toString()] = 1;\n            }\n\n            _this.operatorjson = op;\n        }\n\n        if (mode == null) {\n            mode = \"down\";\n        }\n\n        if (step == null) {\n            step = 1;\n        }\n\n        if (txt.substr(0, 1) == \"=\") {\n            txt = txt.substr(1);\n        }\n\n        let funcstack = txt.split(\"\");\n        let i = 0,\n            str = \"\",\n            function_str = \"\",\n            ispassby = true;\n        \n        let matchConfig = {\n            \"bracket\": 0,\n            \"comma\": 0,\n            \"squote\": 0,\n            \"dquote\": 0\n        };\n\n        while (i < funcstack.length) {\n            let s = funcstack[i];\n\n            if (s == \"(\" && matchConfig.dquote == 0) {\n                matchConfig.bracket += 1;\n\n                if (str.length > 0) {\n                    function_str += str + \"(\";\n                } \n                else {\n                    function_str += \"(\";\n                }\n\n                str = \"\";\n            } \n            else if (s == \")\" && matchConfig.dquote == 0) {\n                matchConfig.bracket -= 1;\n                function_str += _this.functionCopy(str, mode, step) + \")\";\n                str = \"\";\n            }\n            else if (s == '\"' && matchConfig.squote == 0) {\n                if (matchConfig.dquote > 0) {\n                    function_str += str + '\"';\n                    matchConfig.dquote -= 1;\n                    str = \"\";\n                } \n                else {\n                    matchConfig.dquote += 1;\n                    str += '\"';\n                }\n            } \n            else if (s == ',' && matchConfig.dquote == 0) {\n                function_str += _this.functionCopy(str, mode, step) + ',';\n                str = \"\";\n            } \n            else if (s == '&' && matchConfig.dquote == 0) {\n                if (str.length > 0) {\n                    function_str += _this.functionCopy(str, mode, step) + \"&\";\n                    str = \"\";\n                } \n                else {\n                    function_str += \"&\";\n                }\n            } \n            else if (s in _this.operatorjson && matchConfig.dquote == 0) {\n                let s_next = \"\";\n\n                if ((i + 1) < funcstack.length) {\n                    s_next = funcstack[i + 1];\n                }\n\n                let p = i - 1, \n                    s_pre = null;\n\n                if(p >= 0){\n                    do {\n                        s_pre = funcstack[p--];\n                    }\n                    while (p>=0 && s_pre ==\" \")\n                }\n\n                if ((s + s_next) in _this.operatorjson) {\n                    if (str.length > 0) {\n                        function_str += _this.functionCopy(str, mode, step) + s + s_next;\n                        str = \"\";\n                    } \n                    else {\n                        function_str += s + s_next;\n                    }\n\n                    i++;\n                }\n                else if(!(/[^0-9]/.test(s_next)) && s==\"-\" && (s_pre==\"(\" || s_pre == null || s_pre == \",\" || s_pre == \" \" || s_pre in _this.operatorjson ) ){\n                    str += s;\n                }\n                else {\n                    if (str.length > 0) {\n                        function_str += _this.functionCopy(str, mode, step) + s;\n                        str = \"\";\n                    } \n                    else {\n                        function_str += s;\n                    }\n                }\n            } \n            else {\n                str += s;\n            }\n\n            if (i == funcstack.length - 1) {\n                if (_this.iscelldata(_this.trim(str))) {\n                    if (mode == \"down\") {\n                        function_str += _this.downparam(_this.trim(str), step);\n                    } \n                    else if (mode == \"up\") {\n                        function_str += _this.upparam(_this.trim(str), step);\n                    } \n                    else if (mode == \"left\") {\n                        function_str += _this.leftparam(_this.trim(str), step);\n                    } \n                    else if (mode == \"right\") {\n                        function_str += _this.rightparam(_this.trim(str), step);\n                    }\n                } \n                else {\n                    function_str += _this.trim(str);\n                }\n            }\n            \n            i++;\n        }\n\n        return function_str;\n    }\n\n\n    static downparam(txt:string, step:number) {\n        return this.updateparam(\"d\", txt, step);\n    }\n\n    static upparam(txt:string, step:number) {\n        return this.updateparam(\"u\", txt, step);\n    }\n\n    static leftparam(txt:string, step:number) {\n        return this.updateparam(\"l\", txt, step);\n    }\n\n    static rightparam (txt:string, step:number) {\n        return this.updateparam(\"r\", txt, step);\n    }\n\n\n    static updateparam (orient:string, txt:string, step:number) {\n        let _this = this;\n        let val = txt.split(\"!\"),\n            rangetxt, prefix = \"\";\n        \n        if (val.length > 1) {\n            rangetxt = val[1];\n            prefix = val[0] + \"!\";\n        } \n        else {\n            rangetxt = val[0];\n        }\n\n        if (rangetxt.indexOf(\":\") == -1) {\n            let row = parseInt(rangetxt.replace(/[^0-9]/g, \"\"));\n            let col = ABCatNum(rangetxt.replace(/[^A-Za-z]/g, \"\"));\n            let freezonFuc = _this.isfreezonFuc(rangetxt);\n            let $row = freezonFuc[0] ? \"$\" : \"\",\n                $col = freezonFuc[1] ? \"$\" : \"\";\n            \n            if (orient == \"u\" && !freezonFuc[0]) {\n                row -= step;\n            } \n            else if (orient == \"r\" && !freezonFuc[1]) {\n                col += step;\n            } \n            else if (orient == \"l\" && !freezonFuc[1]) {\n                col -= step;\n            } \n            else if (!freezonFuc[0]) {\n                row += step;\n            }\n\n            if(row < 0 || col < 0){\n                return _this.error.r;\n            }\n            \n            if (!isNaN(row) && !isNaN(col)) {\n                return prefix + $col + chatatABC(col) + $row + (row);\n            } \n            else if (!isNaN(row)) {\n                return prefix + $row + (row);\n            } \n            else if (!isNaN(col)) {\n                return prefix + $col + chatatABC(col);\n            } \n            else {\n                return txt;\n            }\n        } \n        else {\n            rangetxt = rangetxt.split(\":\");\n            let row = [],\n                col = [];\n\n            row[0] = parseInt(rangetxt[0].replace(/[^0-9]/g, \"\"));\n            row[1] = parseInt(rangetxt[1].replace(/[^0-9]/g, \"\"));\n            if (row[0] > row[1]) {\n                return txt;\n            }\n            \n            col[0] = ABCatNum(rangetxt[0].replace(/[^A-Za-z]/g, \"\"));\n            col[1] = ABCatNum(rangetxt[1].replace(/[^A-Za-z]/g, \"\"));\n            if (col[0] > col[1]) {\n                return txt;\n            }\n\n            let freezonFuc0 = _this.isfreezonFuc(rangetxt[0]);\n            let freezonFuc1 = _this.isfreezonFuc(rangetxt[1]);\n            let $row0 = freezonFuc0[0] ? \"$\" : \"\",\n                $col0 = freezonFuc0[1] ? \"$\" : \"\";\n            let $row1 = freezonFuc1[0] ? \"$\" : \"\",\n                $col1 = freezonFuc1[1] ? \"$\" : \"\";\n            \n            if (orient == \"u\") {\n                if (!freezonFuc0[0]) {\n                    row[0] -= step;\n                }\n\n                if (!freezonFuc1[0]) {\n                    row[1] -= step;\n                }\n            } \n            else if (orient == \"r\") {\n                if (!freezonFuc0[1]) {\n                    col[0] += step;\n                }\n\n                if (!freezonFuc1[1]) {\n                    col[1] += step;\n                }\n            } \n            else if (orient == \"l\") {\n                if (!freezonFuc0[1]) {\n                    col[0] -= step;\n                }\n\n                if (!freezonFuc1[1]) {\n                    col[1] -= step;\n                }\n            } \n            else {\n                if (!freezonFuc0[0]) {\n                    row[0] += step;\n                }\n\n                if (!freezonFuc1[0]) {\n                    row[1] += step;\n                }\n            }\n\n            if(row[0] < 0 || col[0] < 0){\n                return _this.error.r;\n            }\n\n            if (isNaN(col[0]) && isNaN(col[1])) {\n                return prefix + $row0 + (row[0]) + \":\" + $row1 + (row[1]);\n            } \n            else if (isNaN(row[0]) && isNaN(row[1])) {\n                return prefix + $col0 + chatatABC(col[0]) + \":\" + $col1 + chatatABC(col[1]);\n            } \n            else {\n                return prefix + $col0 + chatatABC(col[0]) + $row0 + (row[0]) + \":\" + $col1 + chatatABC(col[1]) + $row1 + (row[1]);\n            }\n        }\n    }\n\n\n    static iscelldata(txt:string) { //判断是否为单元格格式\n        let val = txt.split(\"!\"),\n            rangetxt;\n\n        if (val.length > 1) {\n            rangetxt = val[1];\n        } \n        else {\n            rangetxt = val[0];\n        }\n\n        let reg_cell = /^(([a-zA-Z]+)|([$][a-zA-Z]+))(([0-9]+)|([$][0-9]+))$/g; //增加正则判断单元格为字母+数字的格式：如 A1:B3\n        let reg_cellRange = /^(((([a-zA-Z]+)|([$][a-zA-Z]+))(([0-9]+)|([$][0-9]+)))|((([a-zA-Z]+)|([$][a-zA-Z]+))))$/g; //增加正则判断单元格为字母+数字或字母的格式：如 A1:B3，A:A\n        \n        if (rangetxt.indexOf(\":\") == -1) {\n            let row = parseInt(rangetxt.replace(/[^0-9]/g, \"\")) - 1;\n            let col = ABCatNum(rangetxt.replace(/[^A-Za-z]/g, \"\"));\n            \n            if (!isNaN(row) && !isNaN(col) && rangetxt.toString().match(reg_cell)) {\n                return true;\n            } \n            else if (!isNaN(row)) {\n                return false;\n            } \n            else if (!isNaN(col)) {\n                return false;\n            } \n            else {\n                return false;\n            }\n        } \n        else {\n            reg_cellRange = /^(((([a-zA-Z]+)|([$][a-zA-Z]+))(([0-9]+)|([$][0-9]+)))|((([a-zA-Z]+)|([$][a-zA-Z]+)))|((([0-9]+)|([$][0-9]+s))))$/g;\n\n            rangetxt = rangetxt.split(\":\");\n\n            let row = [],col = [];\n            row[0] = parseInt(rangetxt[0].replace(/[^0-9]/g, \"\")) - 1;\n            row[1] = parseInt(rangetxt[1].replace(/[^0-9]/g, \"\")) - 1;\n            if (row[0] > row[1]) {\n                return false;\n            }\n\n            col[0] = ABCatNum(rangetxt[0].replace(/[^A-Za-z]/g, \"\"));\n            col[1] = ABCatNum(rangetxt[1].replace(/[^A-Za-z]/g, \"\"));\n            if (col[0] > col[1]) {\n                return false;\n            }\n\n            if(rangetxt[0].toString().match(reg_cellRange) && rangetxt[1].toString().match(reg_cellRange)){\n                return true;\n            }\n            else{\n                return false;\n            }\n        }\n    }\n\n    static isfreezonFuc(txt:string) {\n        let row = txt.replace(/[^0-9]/g, \"\");\n        let col = txt.replace(/[^A-Za-z]/g, \"\");\n        let row$ = txt.substr(txt.indexOf(row) - 1, 1);\n        let col$ = txt.substr(txt.indexOf(col) - 1, 1);\n        let ret = [false, false];\n\n        if (row$ == \"$\") {\n            ret[0] = true;\n        }\n        if (col$ == \"$\") {\n            ret[1] = true;\n        }\n\n        return ret;\n    }\n\n}\n\n\n\nexport function isChinese(temp:string):boolean\n{ \n    var re = /[^\\u4e00-\\u9fa5]/; \n    var reg = /[\\u3002|\\uff1f|\\uff01|\\uff0c|\\u3001|\\uff1b|\\uff1a|\\u201c|\\u201d|\\u2018|\\u2019|\\uff08|\\uff09|\\u300a|\\u300b|\\u3008|\\u3009|\\u3010|\\u3011|\\u300e|\\u300f|\\u300c|\\u300d|\\ufe43|\\ufe44|\\u3014|\\u3015|\\u2026|\\u2014|\\uff5e|\\ufe4f|\\uffe5]/;\n    if(reg.test(temp)) return true; \n    if(re.test(temp)) return false; \n\treturn true; \n}\n \nexport function isJapanese(temp:string):boolean\n{ \n\tvar re = /[^\\u0800-\\u4e00]/; \n\tif(re.test(temp)) return false; \n\treturn true; \n}\n \nexport function isKoera(chr:any):boolean {\n\t\n\tif(((chr > 0x3130 && chr < 0x318F) || \n\t    (chr >= 0xAC00 && chr <= 0xD7A3))) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nexport function isContainMultiType(str:string):boolean {\n\t\n    let isUnicode = false;\n    if(escape(str).indexOf(\"%u\")>-1){\n        isUnicode = true;\n    }\n\n    let isNot = false;\n    let reg = /[0-9a-z]/gi; \n    if(reg.test(str)){\n        isNot = true;\n    }\n\n    let reEnSign = /[\\x00-\\xff]+/g;\n    if(reEnSign.test(str)){\n        isNot = true;\n    }\n\n    if(isUnicode && isNot){\n        return true;\n    }\n\n    return false;\n\n}\n\n\n\n\n\n\n\n\nexport function getBinaryContent (path:any, options:any) {\n    let promise, resolve:any, reject:any;\n    let callback:any;\n\n    if (!options) {\n        options = {};\n    }\n\n    // taken from jQuery\n    let createStandardXHR = function () {\n        try {\n            return new window.XMLHttpRequest();\n        } catch( e ) {}\n    }\n\n    let createActiveXHR = function () {\n        try {\n            return new window.ActiveXObject(\"Microsoft.XMLHTTP\");\n        } catch( e ) {}\n    }\n\n    // Create the request object\n    var createXHR = (typeof window !== \"undefined\" && window.ActiveXObject) ?\n        /* Microsoft failed to properly\n        * implement the XMLHttpRequest in IE7 (can't request local files),\n        * so we use the ActiveXObject when it is available\n        * Additionally XMLHttpRequest can be disabled in IE7/IE8 so\n        * we need a fallback.\n        */\n        function() {\n        return createStandardXHR() || createActiveXHR();\n    } :\n        // For all other browsers, use the standard XMLHttpRequest object\n        createStandardXHR;\n\n    // backward compatible callback\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    } else if (typeof options.callback === 'function') {\n        // callback inside options object\n        callback = options.callback;\n    }\n\n    resolve = function (data:any) { callback(null, data); };\n    reject = function (err:any) { callback(err, null); };\n\n    try {\n        var xhr = createXHR();\n\n        xhr.open('GET', path, true);\n\n        // recent browsers\n        if (\"responseType\" in xhr) {\n            xhr.responseType = \"arraybuffer\";\n        }\n\n        // older browser\n        if(xhr.overrideMimeType) {\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n        }\n\n        xhr.onreadystatechange = function (event:Event) {\n            // use `xhr` and not `this`... thanks IE\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200 || xhr.status === 0) {\n                    try {\n                        resolve(function (xhr:XMLHttpRequest) {\n                            // for xhr.responseText, the 0xFF mask is applied by JSZip\n                            return xhr.response || xhr.responseText;\n                        }(xhr));\n                    } catch(err) {\n                        reject(new Error(err));\n                    }\n                } else {\n                    reject(new Error(\"Ajax error for \" + path + \" : \" + this.status + \" \" + this.statusText));\n                }\n            }\n        };\n\n        if(options.progress) {\n            xhr.onprogress = function(e:any) {\n                options.progress({\n                    path: path,\n                    originalEvent: e,\n                    percent: e.loaded / e.total * 100,\n                    loaded: e.loaded,\n                    total: e.total\n                });\n            };\n        }\n\n        xhr.send();\n\n    } catch (e) {\n        reject(new Error(e), null);\n    }\n\n    // returns a promise or undefined depending on whether a callback was\n    // provided\n    return promise;\n}\n\n/**\n * multi sequence conversion\n * example:\n *  1、E14 -> 13_4\n *  2、E14 J14 O14 T14 Y14 AD14 AI14 AN14 AS14 AX14 ->\n *     ['13_4', '13_9','13_14', '13_19', '13_24', '13_3', '13_8',  '13_13', '13_18', '13_23']\n *  3、E46:E47 -> ['45_4',  '46_4']\n *\n * @param {string} sqref - before sequence\n * @returns {string[]}\n */\nexport function getMultiSequenceToNum(sqref: string): string[] {\n  if (!sqref || sqref?.length <= 0) return [];\n  sqref = sqref.toUpperCase();\n  let sqrefRawArr = sqref.split(\" \");\n  let sqrefArr = sqrefRawArr.filter((e) => e && e.trim());\n  let sqrefLastArr = getSqrefRawArrFormat(sqrefArr);\n\n  let resArr: string[] = [];\n  for (let i = 0; i < sqrefLastArr.length; i++) {\n    let _res = getSingleSequenceToNum(sqrefLastArr[i]);\n    if (_res) resArr.push(_res);\n  }\n  return resArr;\n}\n\n/**\n * get region sequence\n * example:\n *  1、[A1:C2'] -> ['A1', 'A2', 'B1', 'B2', 'C1', 'C2']\n *\n * @param {string[]} arr - formats arr\n * @returns {string[]} - after arr\n */\nexport function getRegionSequence(arr: string[]): string[] {\n  let formatArr: string[] = [];\n  \n  const regEn = new RegExp(/[A-Z]+|[0-9]+/g);\n  const startArr = arr[0]?.match(regEn);\n  const lastArr = arr[1]?.match(regEn);\n  const columnMax = Math.max(...[ABCatNum(startArr[0]), ABCatNum(lastArr[0])]);\n  const columnMin = Math.min(...[ABCatNum(startArr[0]), ABCatNum(lastArr[0])]);\n  const rowMax = Math.max(...[parseInt(startArr[1]), parseInt(lastArr[1])]);\n  const rowMin = Math.min(...[parseInt(startArr[1]), parseInt(lastArr[1])]);\n  \n  for (let i = columnMin; i <= columnMax; i++) {\n    for (let j = rowMin; j <= rowMax; j++) {\n      formatArr.push(`${chatatABC(i)}${j}`);\n    }\n  }\n\n  return formatArr;\n}\n\n/**\n * unified processing of conversion formats\n * example:\n *  1、['E38', 'A1:C2'] -> ['E38', 'A1', 'A2', 'B1', 'B2', 'C1', 'C2']\n *\n * @param {string[]} arr - formats arr\n * @returns {string[]} - after arr\n */\nexport function getSqrefRawArrFormat(arr: string[]): string[] {\n  arr?.map((el) => {\n    if (el.includes(\":\")) {\n      let tempArr: string[] = el.split(\":\");\n      if (tempArr?.length === 2) {\n        arr = arr.concat(getRegionSequence(tempArr));\n        arr.splice(arr.indexOf(el), 1);\n      }\n    }\n  });\n\n  const resultArr = arr.filter(\n    (value, index, array) => array.indexOf(value) === index\n  );\n\n  return resultArr;\n}\n\n/**\n * single sequence to number\n * example:\n *  1、A1 -> 0_0\n *  2、ES14 -> 13_4\n *\n * @param {string} sqref - before sequence\n * @returns {string} - after sequence\n */\nexport function getSingleSequenceToNum(sqref: string): string {\n  let sqrefArray = sqref.match(/[A-Z]+|[0-9]+/g);\n  let sqrefLen = sqrefArray.length;\n  let regEn = new RegExp(\"^[A-Z]+$\");\n  let ret = \"\";\n  for (let i = sqrefLen - 1; i >= 0; i--) {\n    let cur = sqrefArray[i];\n    if (regEn.test(cur)) {\n      ret += ABCatNum(cur) + \"_\";\n    } else {\n      ret += parseInt(cur) - 1 + \"_\";\n    }\n  }\n  return ret.substring(0, ret.length - 1);\n}\n\n/**\n * R1C1 to Sequence\n * example: sheet2!R1C1 => sheet!A1\n *\n * @param {string} value - R1C1 value\n * @returns\n */\nexport function getTransR1C1ToSequence(value: string): string {\n  if (!value && value?.length <= 0) return \"\";\n\n  const len = value.length;\n  const index = value.lastIndexOf(\"!\");\n  const valueArr = [value.slice(0, index), value.slice(index + 1, len)];\n  const repStr = valueArr[1] || \"\";\n  const indexR = repStr.indexOf(\"R\");\n  const indexC = repStr.indexOf(\"C\");\n  \n  const row = Number(repStr.slice(indexR + 1, indexC));\n  const column = chatatABC(Number(repStr.slice(indexC + 1, repStr?.length)) - 1);\n\n  return `${valueArr[0]}!${column}${row}`;\n}\n\n/**\n * strip x14 format data\n *\n * @param {string} value\n * @returns {Object} - { formula, sqref }\n */\nexport function getPeelOffX14(value: string): {  [key: string]: any} {\n  if (!value || value?.length <= 0) return {};\n\n  // formula\n  const formulaReg = new RegExp(\"</x14:formula[^]>\", \"g\");\n  const lastIndex = value.match(formulaReg)?.length;\n  const lastValue = `</x14:formula${lastIndex}>`;\n  const lastValueEnd = value.indexOf(lastValue);\n  let formulaValue = value.substring(0, lastValueEnd + lastValue.length);\n  formulaValue = formulaValue\n    .replace(/<xm:f>/g, \"\")\n    .replace(/<\\/xm:f>/g, \"\")\n    .replace(/x14:/g, \"\")\n    .replace(/\\/x14:/g, \"\");\n  const formula = formulaValue;\n  \n  // sqref\n  const xmSqrefLen = \"<xm:sqref>\".length;\n  const sqrefStart = value.indexOf(\"<xm:sqref>\");\n  const sqrefEnd = value.indexOf(\"</xm:sqref>\");\n  const sqref = value.substring(sqrefStart + xmSqrefLen, sqrefEnd);\n\n  return {\n    formula,\n    sqref,\n  };\n}\n\n\n/**\n * get the value in the formula\n *\n * @param {string} value - extracted value\n * @returns {string[]}\n */\nexport function getMultiFormulaValue(value: string): string[] {\n  if (!value || value?.length <= 0) return [];\n  \n  const lenReg = new RegExp(\"formula\", \"g\");\n  const len = (value.match(lenReg)?.length || 0) / 2;\n  \n  if (len === 0) return [];\n  \n  let retArr: any = [];\n  for (let i = 1; i <= len; i++) {\n    const startLen = `<formula${i}>`?.length;\n    const start = value.indexOf(`<formula${i}>`);\n    const end = value.indexOf(`</formula${i}>`);\n    const _value = value.substring(start + startLen, end);\n    retArr.push(escapeCharacter(_value.replace(/&quot;/g, \"\")));\n  }\n  return retArr;\n}","import { LuckyFile } from \"./ToLuckySheet/LuckyFile\";\n// import {SecurityDoor,Car} from './content';\n\nimport {HandleZip} from './HandleZip';\n\nimport {IuploadfileList} from \"./ICommon\";\nimport { fstat } from \"fs\";\n\n// //demo\n// function demoHandler(){\n//     let upload = document.getElementById(\"Luckyexcel-demo-file\");\n//     let selectADemo = document.getElementById(\"Luckyexcel-select-demo\");\n//     let downlodDemo = document.getElementById(\"Luckyexcel-downlod-file\");\n//     let mask = document.getElementById(\"lucky-mask-demo\");\n//     if(upload){\n        \n//         window.onload = () => {\n            \n//             upload.addEventListener(\"change\", function(evt){\n//                 var files:FileList = (evt.target as any).files;\n//                 if(files==null || files.length==0){\n//                     alert(\"No files wait for import\");\n//                     return;\n//                 }\n\n//                 let name = files[0].name;\n//                 let suffixArr = name.split(\".\"), suffix = suffixArr[suffixArr.length-1];\n//                 if(suffix!=\"xlsx\"){\n//                     alert(\"Currently only supports the import of xlsx files\");\n//                     return;\n//                 }\n//                 LuckyExcel.transformExcelToLucky(files[0], function(exportJson:any, luckysheetfile:string){\n                    \n//                     if(exportJson.sheets==null || exportJson.sheets.length==0){\n//                         alert(\"Failed to read the content of the excel file, currently does not support xls files!\");\n//                         return;\n//                     }\n//                     console.log(exportJson, luckysheetfile);\n//                     window.luckysheet.destroy();\n                    \n//                     window.luckysheet.create({\n//                         container: 'luckysheet', //luckysheet is the container id\n//                         showinfobar:false,\n//                         data:exportJson.sheets,\n//                         title:exportJson.info.name,\n//                         userInfo:exportJson.info.name.creator\n//                     });\n//                 });\n//             });\n\n//             selectADemo.addEventListener(\"change\", function(evt){\n//                 var obj:any = selectADemo;\n//                 var index = obj.selectedIndex;\n//                 var value = obj.options[index].value;\n//                 var name = obj.options[index].innerHTML;\n//                 if(value==\"\"){\n//                     return;\n//                 }\n//                 mask.style.display = \"flex\";\n//                 LuckyExcel.transformExcelToLuckyByUrl(value, name, function(exportJson:any, luckysheetfile:string){\n                    \n//                     if(exportJson.sheets==null || exportJson.sheets.length==0){\n//                         alert(\"Failed to read the content of the excel file, currently does not support xls files!\");\n//                         return;\n//                     }\n//                     console.log(exportJson, luckysheetfile);\n//                     mask.style.display = \"none\";\n//                     window.luckysheet.destroy();\n                    \n//                     window.luckysheet.create({\n//                         container: 'luckysheet', //luckysheet is the container id\n//                         showinfobar:false,\n//                         data:exportJson.sheets,\n//                         title:exportJson.info.name,\n//                         userInfo:exportJson.info.name.creator\n//                     });\n//                 });\n//             });\n\n//             downlodDemo.addEventListener(\"click\", function(evt){\n//                 var obj:any = selectADemo;\n//                 var index = obj.selectedIndex;\n//                 var value = obj.options[index].value;\n\n//                 if(value.length==0){\n//                     alert(\"Please select a demo file\");\n//                     return;\n//                 }\n\n//                 var elemIF:any = document.getElementById(\"Lucky-download-frame\");\n//                 if(elemIF==null){\n//                     elemIF = document.createElement(\"iframe\");\n//                     elemIF.style.display = \"none\";\n//                     elemIF.id = \"Lucky-download-frame\";\n//                     document.body.appendChild(elemIF);\n//                 }\n//                 elemIF.src = value;\n\n//                 // elemIF.parentNode.removeChild(elemIF);\n//             });\n//         }\n//     }\n// }\n// demoHandler();\n\n// api\nexport class LuckyExcel{\n    static transformExcelToLucky(excelFile:File, callBack?:(files:IuploadfileList, fs?:string)=>void){\n        let handleZip:HandleZip = new HandleZip(excelFile);\n        handleZip.unzipFile(function(files:IuploadfileList){\n            let luckyFile = new LuckyFile(files, excelFile.name);\n            let luckysheetfile = luckyFile.Parse();\n            let exportJson = JSON.parse(luckysheetfile);\n            if(callBack != undefined){\n                callBack(exportJson, luckysheetfile);\n            }\n            \n        },\n        function(err:Error){\n            console.error(err);\n        });\n    }\n\n    static transformExcelToLuckyByUrl(url:string, name:string, callBack?:(files:IuploadfileList, fs?:string)=>void){\n        let handleZip:HandleZip = new HandleZip();\n        handleZip.unzipFileByUrl(url, function(files:IuploadfileList){\n            let luckyFile = new LuckyFile(files, name);\n            let luckysheetfile = luckyFile.Parse();\n            let exportJson = JSON.parse(luckysheetfile);\n            if(callBack != undefined){\n                callBack(exportJson, luckysheetfile);\n            }\n        },\n        function(err:Error){\n            console.error(err);\n        });\n    }\n\n    static transformLuckyToExcel(LuckyFile: any, callBack?: (files: string) => void) {\n        \n    }\n}","import {LuckyExcel} from \"./main\"\n// export Node module\nexport = LuckyExcel;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}